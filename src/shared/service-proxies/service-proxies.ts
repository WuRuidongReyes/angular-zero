/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v12.3.1.0 (NJsonSchema v9.14.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AcceptOrderQueueServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 移动应用-物流公司-查询车辆排队队列
     * @param vehicleCode (optional) 车辆编号
     * @param mainVehiclePlate (optional) 车牌号
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getAcceptOrderQueuesForManager(vehicleCode: string | null | undefined, mainVehiclePlate: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfAcceptOrderQueueListForManagerDto> {
        let url_ = this.baseUrl + "/api/services/app/AcceptOrderQueue/GetAcceptOrderQueuesForManagerAsync?";
        if (vehicleCode !== undefined)
            url_ += "VehicleCode=" + encodeURIComponent("" + vehicleCode) + "&"; 
        if (mainVehiclePlate !== undefined)
            url_ += "MainVehiclePlate=" + encodeURIComponent("" + mainVehiclePlate) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAcceptOrderQueuesForManager(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAcceptOrderQueuesForManager(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfAcceptOrderQueueListForManagerDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfAcceptOrderQueueListForManagerDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAcceptOrderQueuesForManager(response: HttpResponseBase): Observable<PagedResultDtoOfAcceptOrderQueueListForManagerDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfAcceptOrderQueueListForManagerDto.fromJS(resultData200) : new PagedResultDtoOfAcceptOrderQueueListForManagerDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfAcceptOrderQueueListForManagerDto>(<any>null);
    }

    /**
     * 移动应用-物流公司-取消排队
     * @param input (optional) 
     * @return Success
     */
    deputyCancelAcceptOrderQueueByMobile(input: GetAcceptOrderQueueByVehicleCodeInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AcceptOrderQueue/DeputyCancelAcceptOrderQueueByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeputyCancelAcceptOrderQueueByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeputyCancelAcceptOrderQueueByMobile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeputyCancelAcceptOrderQueueByMobile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 移动应用-物流公司-车辆代排队
     * @param input (optional) 
     * @return Success
     */
    deputyCreateAcceptOrderQueueByMobile(input: GetAcceptOrderQueueByVehicleCodeInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AcceptOrderQueue/DeputyCreateAcceptOrderQueueByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeputyCreateAcceptOrderQueueByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeputyCreateAcceptOrderQueueByMobile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDeputyCreateAcceptOrderQueueByMobile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 移动应用-车主司机-手动接单
     * @return Success
     */
    createAcceptOrderQueueByMobile(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AcceptOrderQueue/CreateAcceptOrderQueueByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateAcceptOrderQueueByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateAcceptOrderQueueByMobile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateAcceptOrderQueueByMobile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 移动应用-车主司机-取消排队
     * @return Success
     */
    cancelAcceptOrderQueueByMobile(): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AcceptOrderQueue/CancelAcceptOrderQueueByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCancelAcceptOrderQueueByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCancelAcceptOrderQueueByMobile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCancelAcceptOrderQueueByMobile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 移动应用-车主司机-排队信息
     * @return Success
     */
    getAcceptOrderQueueByUserByMobile(): Observable<AcceptOrderQueueListDto> {
        let url_ = this.baseUrl + "/api/services/app/AcceptOrderQueue/GetAcceptOrderQueueByUserByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAcceptOrderQueueByUserByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAcceptOrderQueueByUserByMobile(<any>response_);
                } catch (e) {
                    return <Observable<AcceptOrderQueueListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<AcceptOrderQueueListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAcceptOrderQueueByUserByMobile(response: HttpResponseBase): Observable<AcceptOrderQueueListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AcceptOrderQueueListDto.fromJS(resultData200) : new AcceptOrderQueueListDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AcceptOrderQueueListDto>(<any>null);
    }

    /**
     * 移动应用-车主司机-自动接单开关
     * @return Success
     */
    getVehicleQueueAndOrderStatusByMobile(): Observable<VehicleQueueAndOrderStatusListDto> {
        let url_ = this.baseUrl + "/api/services/app/AcceptOrderQueue/GetVehicleQueueAndOrderStatusByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleQueueAndOrderStatusByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleQueueAndOrderStatusByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleQueueAndOrderStatusListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleQueueAndOrderStatusListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleQueueAndOrderStatusByMobile(response: HttpResponseBase): Observable<VehicleQueueAndOrderStatusListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleQueueAndOrderStatusListDto.fromJS(resultData200) : new VehicleQueueAndOrderStatusListDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleQueueAndOrderStatusListDto>(<any>null);
    }
}

@Injectable()
export class AutoAcceptOrderStateServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 移动应用-车主司机-自动接单操作
     * @param input (optional) 
     * @return Success
     */
    createOrUpdateAutoAcceptOrderStateByMobile(input: AutoAcceptOrderStateEditDto | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/AutoAcceptOrderState/CreateOrUpdateAutoAcceptOrderStateByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrUpdateAutoAcceptOrderStateByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrUpdateAutoAcceptOrderStateByMobile(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrUpdateAutoAcceptOrderStateByMobile(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class CodeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取车辆类型
     * @return Success
     */
    getVehicleType(): Observable<SelectListItem[]> {
        let url_ = this.baseUrl + "/api/services/app/Code/GetVehicleType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleType(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItem[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItem[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleType(response: HttpResponseBase): Observable<SelectListItem[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SelectListItem.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItem[]>(<any>null);
    }

    /**
     * 获取车辆状态
     * @return Success
     */
    getVehicleState(): Observable<SelectListItem[]> {
        let url_ = this.baseUrl + "/api/services/app/Code/GetVehicleState";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleState(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleState(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItem[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItem[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleState(response: HttpResponseBase): Observable<SelectListItem[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SelectListItem.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItem[]>(<any>null);
    }

    /**
     * 获取派车分组
     * @return Success
     */
    getCustomerDispatchingVehicleGroup(): Observable<SelectListItem[]> {
        let url_ = this.baseUrl + "/api/services/app/Code/GetCustomerDispatchingVehicleGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCustomerDispatchingVehicleGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCustomerDispatchingVehicleGroup(<any>response_);
                } catch (e) {
                    return <Observable<SelectListItem[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<SelectListItem[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetCustomerDispatchingVehicleGroup(response: HttpResponseBase): Observable<SelectListItem[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(SelectListItem.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<SelectListItem[]>(<any>null);
    }
}

@Injectable()
export class DeliveryOrderRecordServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 移动应用-车主司机-当前提货单
     * @return Success
     */
    getNowDeliveryOrderRecordsByMobile(): Observable<NowDeliveryOrderRecordListByMobileDto> {
        let url_ = this.baseUrl + "/api/services/app/DeliveryOrderRecord/GetNowDeliveryOrderRecordsByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNowDeliveryOrderRecordsByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNowDeliveryOrderRecordsByMobile(<any>response_);
                } catch (e) {
                    return <Observable<NowDeliveryOrderRecordListByMobileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<NowDeliveryOrderRecordListByMobileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetNowDeliveryOrderRecordsByMobile(response: HttpResponseBase): Observable<NowDeliveryOrderRecordListByMobileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? NowDeliveryOrderRecordListByMobileDto.fromJS(resultData200) : new NowDeliveryOrderRecordListByMobileDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<NowDeliveryOrderRecordListByMobileDto>(<any>null);
    }

    /**
     * 移动应用-车主司机-历史提货单查询
     * @param startGenerateDate (optional) 提货单开始日期
     * @param endGenerateDate (optional) 提货单结束日期
     * @param loadPlaceId (optional) 装地
     * @param unloadPlaceId (optional) 卸地
     * @param goodsId (optional) 货物（物料）
     * @param deliveryOrderCode (optional) 提货单号
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDeliveryOrderRecordsByMobile(startGenerateDate: moment.Moment | null | undefined, endGenerateDate: moment.Moment | null | undefined, loadPlaceId: number | null | undefined, unloadPlaceId: number | null | undefined, goodsId: number | null | undefined, deliveryOrderCode: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfDeliveryOrderRecordListByMobileDto> {
        let url_ = this.baseUrl + "/api/services/app/DeliveryOrderRecord/GetDeliveryOrderRecordsByMobileAsync?";
        if (startGenerateDate !== undefined)
            url_ += "StartGenerateDate=" + encodeURIComponent(startGenerateDate ? "" + startGenerateDate.toJSON() : "") + "&"; 
        if (endGenerateDate !== undefined)
            url_ += "EndGenerateDate=" + encodeURIComponent(endGenerateDate ? "" + endGenerateDate.toJSON() : "") + "&"; 
        if (loadPlaceId !== undefined)
            url_ += "LoadPlaceId=" + encodeURIComponent("" + loadPlaceId) + "&"; 
        if (unloadPlaceId !== undefined)
            url_ += "UnloadPlaceId=" + encodeURIComponent("" + unloadPlaceId) + "&"; 
        if (goodsId !== undefined)
            url_ += "GoodsId=" + encodeURIComponent("" + goodsId) + "&"; 
        if (deliveryOrderCode !== undefined)
            url_ += "DeliveryOrderCode=" + encodeURIComponent("" + deliveryOrderCode) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeliveryOrderRecordsByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeliveryOrderRecordsByMobile(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfDeliveryOrderRecordListByMobileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfDeliveryOrderRecordListByMobileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeliveryOrderRecordsByMobile(response: HttpResponseBase): Observable<PagedResultDtoOfDeliveryOrderRecordListByMobileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfDeliveryOrderRecordListByMobileDto.fromJS(resultData200) : new PagedResultDtoOfDeliveryOrderRecordListByMobileDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfDeliveryOrderRecordListByMobileDto>(<any>null);
    }

    /**
     * 移动应用-物流公司-历史提货单查询
     * @param organizationUnitId (optional) 所属业务单位
     * @param startGenerateDate (optional) 提货单开始日期
     * @param endGenerateDate (optional) 提货单结束日期
     * @param consignmentCustomerId (optional) 托运客户
     * @param consignorId (optional) 发货人
     * @param consigneeId (optional) 收货人
     * @param loadPlaceId (optional) 装地
     * @param unloadPlaceId (optional) 卸地
     * @param goodsId (optional) 货物（物料）
     * @param vehicleCode (optional) 车辆编号
     * @param mainVehiclePlate (optional) 主车车牌号
     * @param source (optional) 提货单来源（mes,系统自建）
     * @param deliveryOrderState (optional) 提货单状态
     * @param deliveryOrderCode (optional) 提货单号
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getDeliveryOrderRecordsForManagerByMobile(organizationUnitId: number | null | undefined, startGenerateDate: moment.Moment | null | undefined, endGenerateDate: moment.Moment | null | undefined, consignmentCustomerId: number | null | undefined, consignorId: number | null | undefined, consigneeId: number | null | undefined, loadPlaceId: number | null | undefined, unloadPlaceId: number | null | undefined, goodsId: number | null | undefined, vehicleCode: string | null | undefined, mainVehiclePlate: string | null | undefined, source: Source | null | undefined, deliveryOrderState: DeliveryOrderState | null | undefined, deliveryOrderCode: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfDeliveryOrderRecordListByMobileDto> {
        let url_ = this.baseUrl + "/api/services/app/DeliveryOrderRecord/GetDeliveryOrderRecordsForManagerByMobileAsync?";
        if (organizationUnitId !== undefined)
            url_ += "OrganizationUnitId=" + encodeURIComponent("" + organizationUnitId) + "&"; 
        if (startGenerateDate !== undefined)
            url_ += "StartGenerateDate=" + encodeURIComponent(startGenerateDate ? "" + startGenerateDate.toJSON() : "") + "&"; 
        if (endGenerateDate !== undefined)
            url_ += "EndGenerateDate=" + encodeURIComponent(endGenerateDate ? "" + endGenerateDate.toJSON() : "") + "&"; 
        if (consignmentCustomerId !== undefined)
            url_ += "ConsignmentCustomerId=" + encodeURIComponent("" + consignmentCustomerId) + "&"; 
        if (consignorId !== undefined)
            url_ += "ConsignorId=" + encodeURIComponent("" + consignorId) + "&"; 
        if (consigneeId !== undefined)
            url_ += "ConsigneeId=" + encodeURIComponent("" + consigneeId) + "&"; 
        if (loadPlaceId !== undefined)
            url_ += "LoadPlaceId=" + encodeURIComponent("" + loadPlaceId) + "&"; 
        if (unloadPlaceId !== undefined)
            url_ += "UnloadPlaceId=" + encodeURIComponent("" + unloadPlaceId) + "&"; 
        if (goodsId !== undefined)
            url_ += "GoodsId=" + encodeURIComponent("" + goodsId) + "&"; 
        if (vehicleCode !== undefined)
            url_ += "VehicleCode=" + encodeURIComponent("" + vehicleCode) + "&"; 
        if (mainVehiclePlate !== undefined)
            url_ += "MainVehiclePlate=" + encodeURIComponent("" + mainVehiclePlate) + "&"; 
        if (source !== undefined)
            url_ += "Source=" + encodeURIComponent("" + source) + "&"; 
        if (deliveryOrderState !== undefined)
            url_ += "DeliveryOrderState=" + encodeURIComponent("" + deliveryOrderState) + "&"; 
        if (deliveryOrderCode !== undefined)
            url_ += "DeliveryOrderCode=" + encodeURIComponent("" + deliveryOrderCode) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDeliveryOrderRecordsForManagerByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDeliveryOrderRecordsForManagerByMobile(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfDeliveryOrderRecordListByMobileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfDeliveryOrderRecordListByMobileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetDeliveryOrderRecordsForManagerByMobile(response: HttpResponseBase): Observable<PagedResultDtoOfDeliveryOrderRecordListByMobileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfDeliveryOrderRecordListByMobileDto.fromJS(resultData200) : new PagedResultDtoOfDeliveryOrderRecordListByMobileDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfDeliveryOrderRecordListByMobileDto>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCurrentLoginInformations(): Observable<GetCurrentLoginInformationsOutput> {
        let url_ = this.baseUrl + "/api/services/app/Session/GetCurrentLoginInformations";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCurrentLoginInformations(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCurrentLoginInformations(<any>response_);
                } catch (e) {
                    return <Observable<GetCurrentLoginInformationsOutput>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetCurrentLoginInformationsOutput>><any>_observableThrow(response_);
        }));
    }

    protected processGetCurrentLoginInformations(response: HttpResponseBase): Observable<GetCurrentLoginInformationsOutput> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? GetCurrentLoginInformationsOutput.fromJS(resultData200) : new GetCurrentLoginInformationsOutput();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetCurrentLoginInformationsOutput>(<any>null);
    }
}

@Injectable()
export class SysCodeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取车辆类型
     * @return Success
     */
    getVehicleType(): Observable<void> {
        let url_ = this.baseUrl + "/api/SysCode/GetVehicleType";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleType(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleType(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取车辆状态
     * @return Success
     */
    getVehicleState(): Observable<void> {
        let url_ = this.baseUrl + "/api/SysCode/GetVehicleState";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleState(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleState(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleState(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * 获取客户派车分组
     * @return Success
     */
    getCustomerDispatchingVehicleGroup(): Observable<void> {
        let url_ = this.baseUrl + "/api/SysCode/GetCustomerDispatchingVehicleGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCustomerDispatchingVehicleGroup(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCustomerDispatchingVehicleGroup(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processGetCustomerDispatchingVehicleGroup(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class TenantServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getTenants(sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfTenantDto> {
        let url_ = this.baseUrl + "/api/services/app/Tenant/GetTenantsAsync?";
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTenants(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTenants(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTenantDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTenantDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTenants(response: HttpResponseBase): Observable<PagedResultDtoOfTenantDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfTenantDto.fromJS(resultData200) : new PagedResultDtoOfTenantDto();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTenantDto>(<any>null);
    }
}

@Injectable()
export class TokenAuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * @param model (optional) 
     * @return Success
     */
    authenticate(model: AuthenticateModel | null | undefined): Observable<AuthenticateResultModel> {
        let url_ = this.baseUrl + "/api/TokenAuth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(model);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAuthenticate(<any>response_);
                } catch (e) {
                    return <Observable<AuthenticateResultModel>><any>_observableThrow(e);
                }
            } else
                return <Observable<AuthenticateResultModel>><any>_observableThrow(response_);
        }));
    }

    protected processAuthenticate(response: HttpResponseBase): Observable<AuthenticateResultModel> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? AuthenticateResultModel.fromJS(resultData200) : new AuthenticateResultModel();
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<AuthenticateResultModel>(<any>null);
    }
}

@Injectable()
export class TransportPlaceServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 获取所有装卸地
     * @return Success
     */
    getAllTransportPlaceByMobile(): Observable<ListResultDtoOfTransportPlaceListByMobileDto> {
        let url_ = this.baseUrl + "/api/services/app/TransportPlace/GetAllTransportPlaceByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllTransportPlaceByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllTransportPlaceByMobile(<any>response_);
                } catch (e) {
                    return <Observable<ListResultDtoOfTransportPlaceListByMobileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<ListResultDtoOfTransportPlaceListByMobileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllTransportPlaceByMobile(response: HttpResponseBase): Observable<ListResultDtoOfTransportPlaceListByMobileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? ListResultDtoOfTransportPlaceListByMobileDto.fromJS(resultData200) : new ListResultDtoOfTransportPlaceListByMobileDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<ListResultDtoOfTransportPlaceListByMobileDto>(<any>null);
    }
}

@Injectable()
export class TransportSingleVehicleRoadCostServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 移动应用-车主司机-过路费查询
     * @param happenDate (optional) 发生日期从
     * @param happenDateTo (optional) 发生日期到
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getSingleVehicleRoadCostListByMobile(happenDate: moment.Moment | null | undefined, happenDateTo: moment.Moment | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfSingleVehicleRoadCostListDto> {
        let url_ = this.baseUrl + "/api/services/app/TransportSingleVehicleRoadCost/GetSingleVehicleRoadCostListByMobileAsync?";
        if (happenDate !== undefined)
            url_ += "HappenDate=" + encodeURIComponent(happenDate ? "" + happenDate.toJSON() : "") + "&"; 
        if (happenDateTo !== undefined)
            url_ += "HappenDateTo=" + encodeURIComponent(happenDateTo ? "" + happenDateTo.toJSON() : "") + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSingleVehicleRoadCostListByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSingleVehicleRoadCostListByMobile(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfSingleVehicleRoadCostListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfSingleVehicleRoadCostListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetSingleVehicleRoadCostListByMobile(response: HttpResponseBase): Observable<PagedResultDtoOfSingleVehicleRoadCostListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfSingleVehicleRoadCostListDto.fromJS(resultData200) : new PagedResultDtoOfSingleVehicleRoadCostListDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfSingleVehicleRoadCostListDto>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 我的个人信息
     * @return Success
     */
    getUserInfoByMobile(): Observable<UserInfoByMobileDto> {
        let url_ = this.baseUrl + "/api/services/app/User/GetUserInfoByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserInfoByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserInfoByMobile(<any>response_);
                } catch (e) {
                    return <Observable<UserInfoByMobileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserInfoByMobileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserInfoByMobile(response: HttpResponseBase): Observable<UserInfoByMobileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? UserInfoByMobileDto.fromJS(resultData200) : new UserInfoByMobileDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserInfoByMobileDto>(<any>null);
    }
}

@Injectable()
export class VehicleArchivesServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 物流公司-车辆档案-查询
     * @param originalOUId (optional) 
     * @param detailedOriginalOUId (optional) 调度组织
     * @param vehicleCode (optional) 
     * @param mainVehiclePlate (optional) 
     * @param ownerIDNumber (optional) 
     * @param ownerName (optional) 
     * @param ownerPhone (optional) 
     * @param vehicleBusinessType (optional) 
     * @param vehicleType (optional) 
     * @param models (optional) 
     * @param vehicleState (optional) 
     * @param joiningDate (optional) 
     * @param joiningDateTo (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getVehicleArchivesForManagerByMobile(originalOUId: number | null | undefined, detailedOriginalOUId: number | null | undefined, vehicleCode: string | null | undefined, mainVehiclePlate: string | null | undefined, ownerIDNumber: string | null | undefined, ownerName: string | null | undefined, ownerPhone: string | null | undefined, vehicleBusinessType: string | null | undefined, vehicleType: string | null | undefined, models: string | null | undefined, vehicleState: string | null | undefined, joiningDate: moment.Moment | null | undefined, joiningDateTo: moment.Moment | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfVehicleArchivesListByMobileDto> {
        let url_ = this.baseUrl + "/api/services/app/VehicleArchives/GetVehicleArchivesForManagerByMobileAsync?";
        if (originalOUId !== undefined)
            url_ += "OriginalOUId=" + encodeURIComponent("" + originalOUId) + "&"; 
        if (detailedOriginalOUId !== undefined)
            url_ += "DetailedOriginalOUId=" + encodeURIComponent("" + detailedOriginalOUId) + "&"; 
        if (vehicleCode !== undefined)
            url_ += "VehicleCode=" + encodeURIComponent("" + vehicleCode) + "&"; 
        if (mainVehiclePlate !== undefined)
            url_ += "MainVehiclePlate=" + encodeURIComponent("" + mainVehiclePlate) + "&"; 
        if (ownerIDNumber !== undefined)
            url_ += "OwnerIDNumber=" + encodeURIComponent("" + ownerIDNumber) + "&"; 
        if (ownerName !== undefined)
            url_ += "OwnerName=" + encodeURIComponent("" + ownerName) + "&"; 
        if (ownerPhone !== undefined)
            url_ += "OwnerPhone=" + encodeURIComponent("" + ownerPhone) + "&"; 
        if (vehicleBusinessType !== undefined)
            url_ += "VehicleBusinessType=" + encodeURIComponent("" + vehicleBusinessType) + "&"; 
        if (vehicleType !== undefined)
            url_ += "VehicleType=" + encodeURIComponent("" + vehicleType) + "&"; 
        if (models !== undefined)
            url_ += "Models=" + encodeURIComponent("" + models) + "&"; 
        if (vehicleState !== undefined)
            url_ += "VehicleState=" + encodeURIComponent("" + vehicleState) + "&"; 
        if (joiningDate !== undefined)
            url_ += "JoiningDate=" + encodeURIComponent(joiningDate ? "" + joiningDate.toJSON() : "") + "&"; 
        if (joiningDateTo !== undefined)
            url_ += "JoiningDateTo=" + encodeURIComponent(joiningDateTo ? "" + joiningDateTo.toJSON() : "") + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleArchivesForManagerByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleArchivesForManagerByMobile(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfVehicleArchivesListByMobileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfVehicleArchivesListByMobileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleArchivesForManagerByMobile(response: HttpResponseBase): Observable<PagedResultDtoOfVehicleArchivesListByMobileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfVehicleArchivesListByMobileDto.fromJS(resultData200) : new PagedResultDtoOfVehicleArchivesListByMobileDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfVehicleArchivesListByMobileDto>(<any>null);
    }

    /**
     * 物流公司-车辆档案-查询详情
     * @return Success
     */
    getVehicleArchiveDetailForManagerByMobile(id: string): Observable<VehicleArchiveDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/VehicleArchives/GetVehicleArchiveDetailForManagerByMobileAsync?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleArchiveDetailForManagerByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleArchiveDetailForManagerByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleArchiveDetailDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleArchiveDetailDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleArchiveDetailForManagerByMobile(response: HttpResponseBase): Observable<VehicleArchiveDetailDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleArchiveDetailDto.fromJS(resultData200) : new VehicleArchiveDetailDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleArchiveDetailDto>(<any>null);
    }

    /**
     * 移动应用-物流公司-车辆锁定
     * @param input (optional) 
     * @return Success
     */
    toStopVehicleArchiveByMobile(input: GetVehicleDriverArchiveInputMobile | null | undefined): Observable<VehicleArchiveOutputToMobile> {
        let url_ = this.baseUrl + "/api/services/app/VehicleArchives/ToStopVehicleArchiveByMobile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processToStopVehicleArchiveByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processToStopVehicleArchiveByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleArchiveOutputToMobile>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleArchiveOutputToMobile>><any>_observableThrow(response_);
        }));
    }

    protected processToStopVehicleArchiveByMobile(response: HttpResponseBase): Observable<VehicleArchiveOutputToMobile> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleArchiveOutputToMobile.fromJS(resultData200) : new VehicleArchiveOutputToMobile();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleArchiveOutputToMobile>(<any>null);
    }

    /**
     * 移动应用-物流公司-车辆解锁
     * @param input (optional) 
     * @return Success
     */
    toNomanlVehicleArchiveByMobile(input: GetVehicleDriverArchiveInputMobile | null | undefined): Observable<VehicleArchiveOutputToMobile> {
        let url_ = this.baseUrl + "/api/services/app/VehicleArchives/ToNomanlVehicleArchiveByMobile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processToNomanlVehicleArchiveByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processToNomanlVehicleArchiveByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleArchiveOutputToMobile>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleArchiveOutputToMobile>><any>_observableThrow(response_);
        }));
    }

    protected processToNomanlVehicleArchiveByMobile(response: HttpResponseBase): Observable<VehicleArchiveOutputToMobile> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleArchiveOutputToMobile.fromJS(resultData200) : new VehicleArchiveOutputToMobile();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleArchiveOutputToMobile>(<any>null);
    }

    /**
     * 移动应用-车主司机-车辆档案
     * @return Success
     */
    getVehicleArchivesByMobile(): Observable<VehicleArchivesListByMobileDto[]> {
        let url_ = this.baseUrl + "/api/services/app/VehicleArchives/GetVehicleArchivesByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleArchivesByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleArchivesByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleArchivesListByMobileDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleArchivesListByMobileDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleArchivesByMobile(response: HttpResponseBase): Observable<VehicleArchivesListByMobileDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(VehicleArchivesListByMobileDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleArchivesListByMobileDto[]>(<any>null);
    }

    /**
     * 移动应用-车主司机-车辆证照状态
     * @param vehicleCode (optional) 
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getVehicleArchivesStatusByMobile(vehicleCode: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<VehicleBusinessStateListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/VehicleArchives/GetVehicleArchivesStatusByMobileAsync?";
        if (vehicleCode !== undefined)
            url_ += "VehicleCode=" + encodeURIComponent("" + vehicleCode) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleArchivesStatusByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleArchivesStatusByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleBusinessStateListDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleBusinessStateListDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleArchivesStatusByMobile(response: HttpResponseBase): Observable<VehicleBusinessStateListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(VehicleBusinessStateListDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleBusinessStateListDto[]>(<any>null);
    }
}

@Injectable()
export class VehicleDispatchAssignServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 移动应用-车主司机-当前指派客户
     * @return Success
     */
    getVehicleDispatchAssignForMobile(): Observable<VehicleDispatchAssignListDto> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDispatchAssign/GetVehicleDispatchAssignForMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDispatchAssignForMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDispatchAssignForMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleDispatchAssignListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleDispatchAssignListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDispatchAssignForMobile(response: HttpResponseBase): Observable<VehicleDispatchAssignListDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleDispatchAssignListDto.fromJS(resultData200) : new VehicleDispatchAssignListDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleDispatchAssignListDto>(<any>null);
    }

    /**
     * 移动应用-物流公司-查看车辆调度指派
     * @param group (optional) 派车分组
     * @param vehicleCode (optional) 车辆编号
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getVehicleDispatchAssignsForManager(group: string | null | undefined, vehicleCode: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfVehicleDispatchAssignListForManagerDto> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDispatchAssign/GetVehicleDispatchAssignsForManagerAsync?";
        if (group !== undefined)
            url_ += "Group=" + encodeURIComponent("" + group) + "&"; 
        if (vehicleCode !== undefined)
            url_ += "VehicleCode=" + encodeURIComponent("" + vehicleCode) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDispatchAssignsForManager(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDispatchAssignsForManager(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfVehicleDispatchAssignListForManagerDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfVehicleDispatchAssignListForManagerDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDispatchAssignsForManager(response: HttpResponseBase): Observable<PagedResultDtoOfVehicleDispatchAssignListForManagerDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfVehicleDispatchAssignListForManagerDto.fromJS(resultData200) : new PagedResultDtoOfVehicleDispatchAssignListForManagerDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfVehicleDispatchAssignListForManagerDto>(<any>null);
    }

    /**
     * 移动应用-物流公司-操作车辆调度指派
     * @param input (optional) 
     * @return Success
     */
    editVehicleDispatchAssignsForManager(input: EditVehicleDispatchAssignForMangerInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDispatchAssign/EditVehicleDispatchAssignsForManagerAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processEditVehicleDispatchAssignsForManager(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processEditVehicleDispatchAssignsForManager(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processEditVehicleDispatchAssignsForManager(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class VehicleDriverArchiveServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 移动应用-物流公司-司机档案
     * @param driverIDNumber (optional) 司机身份证号
     * @param driverName (optional) 司机姓名
     * @param driverPhone (optional) 司机联系方式
     * @param vehicleCode (optional) 所属车辆编号
     * @param joiningDate (optional) 加入日期从
     * @param joiningDateTo (optional) 加入日期到
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getVehicleDriverArchivesForManagerByMobile(driverIDNumber: string | null | undefined, driverName: string | null | undefined, driverPhone: string | null | undefined, vehicleCode: string | null | undefined, joiningDate: moment.Moment | null | undefined, joiningDateTo: moment.Moment | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfVehicleDriverArchiveListForManagerDto> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverArchive/GetVehicleDriverArchivesForManagerByMobileAsync?";
        if (driverIDNumber !== undefined)
            url_ += "DriverIDNumber=" + encodeURIComponent("" + driverIDNumber) + "&"; 
        if (driverName !== undefined)
            url_ += "DriverName=" + encodeURIComponent("" + driverName) + "&"; 
        if (driverPhone !== undefined)
            url_ += "DriverPhone=" + encodeURIComponent("" + driverPhone) + "&"; 
        if (vehicleCode !== undefined)
            url_ += "VehicleCode=" + encodeURIComponent("" + vehicleCode) + "&"; 
        if (joiningDate !== undefined)
            url_ += "JoiningDate=" + encodeURIComponent(joiningDate ? "" + joiningDate.toJSON() : "") + "&"; 
        if (joiningDateTo !== undefined)
            url_ += "JoiningDateTo=" + encodeURIComponent(joiningDateTo ? "" + joiningDateTo.toJSON() : "") + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDriverArchivesForManagerByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDriverArchivesForManagerByMobile(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfVehicleDriverArchiveListForManagerDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfVehicleDriverArchiveListForManagerDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDriverArchivesForManagerByMobile(response: HttpResponseBase): Observable<PagedResultDtoOfVehicleDriverArchiveListForManagerDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfVehicleDriverArchiveListForManagerDto.fromJS(resultData200) : new PagedResultDtoOfVehicleDriverArchiveListForManagerDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfVehicleDriverArchiveListForManagerDto>(<any>null);
    }

    /**
     * 移动应用-物流公司-司机档案详情
     * @return Success
     */
    getVehicleDriverArchiveDetailForManagerByMobile(id: string): Observable<VehicleDriverArchiveDetailDto> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverArchive/GetVehicleDriverArchiveDetailForManagerByMobileAsync?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "Id=" + encodeURIComponent("" + id) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDriverArchiveDetailForManagerByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDriverArchiveDetailForManagerByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleDriverArchiveDetailDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleDriverArchiveDetailDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDriverArchiveDetailForManagerByMobile(response: HttpResponseBase): Observable<VehicleDriverArchiveDetailDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleDriverArchiveDetailDto.fromJS(resultData200) : new VehicleDriverArchiveDetailDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleDriverArchiveDetailDto>(<any>null);
    }

    /**
     * 移动应用-物流公司-司机解锁
     * @param input (optional) 
     * @return Success
     */
    returnVehicleDriverArchiveByMobile(input: GetVehicleDriverArchiveInputMobile | null | undefined): Observable<VehicleDriverArchiveOutputToMobile> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverArchive/ReturnVehicleDriverArchiveByMobile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processReturnVehicleDriverArchiveByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processReturnVehicleDriverArchiveByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleDriverArchiveOutputToMobile>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleDriverArchiveOutputToMobile>><any>_observableThrow(response_);
        }));
    }

    protected processReturnVehicleDriverArchiveByMobile(response: HttpResponseBase): Observable<VehicleDriverArchiveOutputToMobile> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleDriverArchiveOutputToMobile.fromJS(resultData200) : new VehicleDriverArchiveOutputToMobile();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleDriverArchiveOutputToMobile>(<any>null);
    }

    /**
     * 移动应用-物流公司-司机锁定
     * @param input (optional) 
     * @return Success
     */
    tempStopVehicleDriverArchiveByMobile(input: GetVehicleDriverArchiveInputMobile | null | undefined): Observable<VehicleDriverArchiveOutputToMobile> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverArchive/TempStopVehicleDriverArchiveByMobile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processTempStopVehicleDriverArchiveByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processTempStopVehicleDriverArchiveByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleDriverArchiveOutputToMobile>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleDriverArchiveOutputToMobile>><any>_observableThrow(response_);
        }));
    }

    protected processTempStopVehicleDriverArchiveByMobile(response: HttpResponseBase): Observable<VehicleDriverArchiveOutputToMobile> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleDriverArchiveOutputToMobile.fromJS(resultData200) : new VehicleDriverArchiveOutputToMobile();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleDriverArchiveOutputToMobile>(<any>null);
    }

    /**
     * 移动应用-车主司机-司机档案
     * @return Success
     */
    getVehicleDriverArchivesByMobile(): Observable<VehicleDriverArchiveListByMobileDto> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverArchive/GetVehicleDriverArchivesByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDriverArchivesByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDriverArchivesByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleDriverArchiveListByMobileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleDriverArchiveListByMobileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDriverArchivesByMobile(response: HttpResponseBase): Observable<VehicleDriverArchiveListByMobileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? VehicleDriverArchiveListByMobileDto.fromJS(resultData200) : new VehicleDriverArchiveListByMobileDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleDriverArchiveListByMobileDto>(<any>null);
    }

    /**
     * 移动应用-车主司机-司机证照状态
     * @return Success
     */
    getVehicleDriverArchivesStatusByMobile(): Observable<VehicleDriverBusinessStateListDto[]> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverArchive/GetVehicleDriverArchivesStatusByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDriverArchivesStatusByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDriverArchivesStatusByMobile(<any>response_);
                } catch (e) {
                    return <Observable<VehicleDriverBusinessStateListDto[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<VehicleDriverBusinessStateListDto[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDriverArchivesStatusByMobile(response: HttpResponseBase): Observable<VehicleDriverBusinessStateListDto[]> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200.push(VehicleDriverBusinessStateListDto.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<VehicleDriverBusinessStateListDto[]>(<any>null);
    }

    /**
     * 移动应用-车主司机-获取司机动态二维码
     * @return Success
     */
    getVehicleDriverArchivesCardByMobile(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverArchive/GetVehicleDriverArchivesCardByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDriverArchivesCardByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDriverArchivesCardByMobile(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDriverArchivesCardByMobile(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    /**
     * 移动应用-车主司机-获取司机动态二维码（图片）
     * @return Success
     */
    getVehicleDriverArchivesCardQRCodeImageByMobile(): Observable<string> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverArchive/GetVehicleDriverArchivesCardQRCodeImageByMobileAsync";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleDriverArchivesCardQRCodeImageByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleDriverArchivesCardQRCodeImageByMobile(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleDriverArchivesCardQRCodeImageByMobile(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

@Injectable()
export class VehicleDriverChangeServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 移动应用-物流公司-司机换车操作
     * @param input (optional) 
     * @return Success
     */
    changeVehicleDriverCar(input: ChangeDriverCarInput | null | undefined): Observable<void> {
        let url_ = this.baseUrl + "/api/services/app/VehicleDriverChange/ChangeVehicleDriverCarAsync";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeVehicleDriverCar(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeVehicleDriverCar(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangeVehicleDriverCar(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class VehicleRefuelServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    /**
     * 移动应用-车主司机-加油查询
     * @param refuelTime (optional) 加油时间从
     * @param refuelTimeTo (optional) 加油时间到
     * @param fillingStationName (optional) 加油站
     * @param sorting (optional) 
     * @param maxResultCount (optional) 
     * @param skipCount (optional) 
     * @return Success
     */
    getVehicleRefuelListByMobile(refuelTime: moment.Moment | null | undefined, refuelTimeTo: moment.Moment | null | undefined, fillingStationName: string | null | undefined, sorting: string | null | undefined, maxResultCount: number | null | undefined, skipCount: number | null | undefined): Observable<PagedResultDtoOfVehicleRefuelListByMobileDto> {
        let url_ = this.baseUrl + "/api/services/app/VehicleRefuel/GetVehicleRefuelListByMobileAsync?";
        if (refuelTime !== undefined)
            url_ += "RefuelTime=" + encodeURIComponent(refuelTime ? "" + refuelTime.toJSON() : "") + "&"; 
        if (refuelTimeTo !== undefined)
            url_ += "RefuelTimeTo=" + encodeURIComponent(refuelTimeTo ? "" + refuelTimeTo.toJSON() : "") + "&"; 
        if (fillingStationName !== undefined)
            url_ += "FillingStationName=" + encodeURIComponent("" + fillingStationName) + "&"; 
        if (sorting !== undefined)
            url_ += "Sorting=" + encodeURIComponent("" + sorting) + "&"; 
        if (maxResultCount !== undefined)
            url_ += "MaxResultCount=" + encodeURIComponent("" + maxResultCount) + "&"; 
        if (skipCount !== undefined)
            url_ += "SkipCount=" + encodeURIComponent("" + skipCount) + "&"; 
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVehicleRefuelListByMobile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVehicleRefuelListByMobile(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfVehicleRefuelListByMobileDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfVehicleRefuelListByMobileDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetVehicleRefuelListByMobile(response: HttpResponseBase): Observable<PagedResultDtoOfVehicleRefuelListByMobileDto> {
        const status = response.status;
        const responseBlob = 
            response instanceof HttpResponse ? response.body : 
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }};
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagedResultDtoOfVehicleRefuelListByMobileDto.fromJS(resultData200) : new PagedResultDtoOfVehicleRefuelListByMobileDto();
            return _observableOf(result200);
            }));
        } else if (status === 401) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status === 403) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("A server error occurred.", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfVehicleRefuelListByMobileDto>(<any>null);
    }
}

export class PagedResultDtoOfAcceptOrderQueueListDto implements IPagedResultDtoOfAcceptOrderQueueListDto {
    totalCount: number | undefined;
    items: AcceptOrderQueueListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfAcceptOrderQueueListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(AcceptOrderQueueListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAcceptOrderQueueListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfAcceptOrderQueueListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfAcceptOrderQueueListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfAcceptOrderQueueListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfAcceptOrderQueueListDto {
    totalCount: number | undefined;
    items: AcceptOrderQueueListDto[] | undefined;
}

export class AcceptOrderQueueListDto implements IAcceptOrderQueueListDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 司机身份证号 */
    driverIDCardNumber: string | undefined;
    /** 排队时间 */
    queueDateTime: moment.Moment | undefined;
    /** 排队状态（排队中 = 1,已派车 = 2,已取消 = 3,队列失效 = 4） */
    queueState: AcceptOrderQueueListDtoQueueState | undefined;
    /** 排队状态名称 */
    readonly queueStateText: string | undefined;
    /** 前边已排队车数(物流公司内部排队) */
    frontInnerQueueVehicleAmount: number | undefined;
    /** 前边已排队车数(所有物流公司联合排队) */
    frontTotalQueueVehicleAmount: number | undefined;
    /** 队列来源（1司机移动端，2物流公司代排） */
    queueSource: AcceptOrderQueueListDtoQueueSource | undefined;
    /** 队列来源名称 */
    readonly organizationTypeText: string | undefined;
    /** 队列变动时间 */
    queueChangeDateTime: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: IAcceptOrderQueueListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverIDCardNumber = data["driverIDCardNumber"];
            this.queueDateTime = data["queueDateTime"] ? moment(data["queueDateTime"].toString()) : <any>undefined;
            this.queueState = data["queueState"];
            (<any>this).queueStateText = data["queueStateText"];
            this.frontInnerQueueVehicleAmount = data["frontInnerQueueVehicleAmount"];
            this.frontTotalQueueVehicleAmount = data["frontTotalQueueVehicleAmount"];
            this.queueSource = data["queueSource"];
            (<any>this).organizationTypeText = data["organizationTypeText"];
            this.queueChangeDateTime = data["queueChangeDateTime"] ? moment(data["queueChangeDateTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AcceptOrderQueueListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AcceptOrderQueueListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverIDCardNumber"] = this.driverIDCardNumber;
        data["queueDateTime"] = this.queueDateTime ? this.queueDateTime.toISOString() : <any>undefined;
        data["queueState"] = this.queueState;
        data["queueStateText"] = this.queueStateText;
        data["frontInnerQueueVehicleAmount"] = this.frontInnerQueueVehicleAmount;
        data["frontTotalQueueVehicleAmount"] = this.frontTotalQueueVehicleAmount;
        data["queueSource"] = this.queueSource;
        data["organizationTypeText"] = this.organizationTypeText;
        data["queueChangeDateTime"] = this.queueChangeDateTime ? this.queueChangeDateTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): AcceptOrderQueueListDto {
        const json = this.toJSON();
        let result = new AcceptOrderQueueListDto();
        result.init(json);
        return result;
    }
}

export interface IAcceptOrderQueueListDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 司机身份证号 */
    driverIDCardNumber: string | undefined;
    /** 排队时间 */
    queueDateTime: moment.Moment | undefined;
    /** 排队状态（排队中 = 1,已派车 = 2,已取消 = 3,队列失效 = 4） */
    queueState: AcceptOrderQueueListDtoQueueState | undefined;
    /** 排队状态名称 */
    queueStateText: string | undefined;
    /** 前边已排队车数(物流公司内部排队) */
    frontInnerQueueVehicleAmount: number | undefined;
    /** 前边已排队车数(所有物流公司联合排队) */
    frontTotalQueueVehicleAmount: number | undefined;
    /** 队列来源（1司机移动端，2物流公司代排） */
    queueSource: AcceptOrderQueueListDtoQueueSource | undefined;
    /** 队列来源名称 */
    organizationTypeText: string | undefined;
    /** 队列变动时间 */
    queueChangeDateTime: moment.Moment | undefined;
    id: string | undefined;
}

export class AcceptOrderQueueEditDto implements IAcceptOrderQueueEditDto {
    id: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 司机身份证号 */
    driverIDCardNumber: string | undefined;

    constructor(data?: IAcceptOrderQueueEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverIDCardNumber = data["driverIDCardNumber"];
        }
    }

    static fromJS(data: any): AcceptOrderQueueEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new AcceptOrderQueueEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverIDCardNumber"] = this.driverIDCardNumber;
        return data; 
    }

    clone(): AcceptOrderQueueEditDto {
        const json = this.toJSON();
        let result = new AcceptOrderQueueEditDto();
        result.init(json);
        return result;
    }
}

export interface IAcceptOrderQueueEditDto {
    id: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 司机身份证号 */
    driverIDCardNumber: string | undefined;
}

export class EntityDtoOfGuid implements IEntityDtoOfGuid {
    id: string | undefined;

    constructor(data?: IEntityDtoOfGuid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfGuid {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfGuid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): EntityDtoOfGuid {
        const json = this.toJSON();
        let result = new EntityDtoOfGuid();
        result.init(json);
        return result;
    }
}

export interface IEntityDtoOfGuid {
    id: string | undefined;
}

export class PagedResultDtoOfAcceptOrderQueueListForManagerDto implements IPagedResultDtoOfAcceptOrderQueueListForManagerDto {
    totalCount: number | undefined;
    items: AcceptOrderQueueListForManagerDto[] | undefined;

    constructor(data?: IPagedResultDtoOfAcceptOrderQueueListForManagerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(AcceptOrderQueueListForManagerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAcceptOrderQueueListForManagerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfAcceptOrderQueueListForManagerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfAcceptOrderQueueListForManagerDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfAcceptOrderQueueListForManagerDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfAcceptOrderQueueListForManagerDto {
    totalCount: number | undefined;
    items: AcceptOrderQueueListForManagerDto[] | undefined;
}

export class AcceptOrderQueueListForManagerDto implements IAcceptOrderQueueListForManagerDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 司机身份证号 */
    driverIDCardNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 排队时间 */
    queueDateTime: moment.Moment | undefined;
    /** 排队状态（排队中 = 1,已派车 = 2,已取消 = 3,队列失效 = 4） */
    queueState: AcceptOrderQueueListForManagerDtoQueueState | undefined;
    /** 排队状态名称 */
    readonly queueStateText: string | undefined;

    constructor(data?: IAcceptOrderQueueListForManagerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverIDCardNumber = data["driverIDCardNumber"];
            this.driverName = data["driverName"];
            this.queueDateTime = data["queueDateTime"] ? moment(data["queueDateTime"].toString()) : <any>undefined;
            this.queueState = data["queueState"];
            (<any>this).queueStateText = data["queueStateText"];
        }
    }

    static fromJS(data: any): AcceptOrderQueueListForManagerDto {
        data = typeof data === 'object' ? data : {};
        let result = new AcceptOrderQueueListForManagerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverIDCardNumber"] = this.driverIDCardNumber;
        data["driverName"] = this.driverName;
        data["queueDateTime"] = this.queueDateTime ? this.queueDateTime.toISOString() : <any>undefined;
        data["queueState"] = this.queueState;
        data["queueStateText"] = this.queueStateText;
        return data; 
    }

    clone(): AcceptOrderQueueListForManagerDto {
        const json = this.toJSON();
        let result = new AcceptOrderQueueListForManagerDto();
        result.init(json);
        return result;
    }
}

export interface IAcceptOrderQueueListForManagerDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 司机身份证号 */
    driverIDCardNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 排队时间 */
    queueDateTime: moment.Moment | undefined;
    /** 排队状态（排队中 = 1,已派车 = 2,已取消 = 3,队列失效 = 4） */
    queueState: AcceptOrderQueueListForManagerDtoQueueState | undefined;
    /** 排队状态名称 */
    queueStateText: string | undefined;
}

export class GetAcceptOrderQueueByVehicleCodeInput implements IGetAcceptOrderQueueByVehicleCodeInput {
    /** 车辆编号 */
    vehicleCode: string;

    constructor(data?: IGetAcceptOrderQueueByVehicleCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
        }
    }

    static fromJS(data: any): GetAcceptOrderQueueByVehicleCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetAcceptOrderQueueByVehicleCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        return data; 
    }

    clone(): GetAcceptOrderQueueByVehicleCodeInput {
        const json = this.toJSON();
        let result = new GetAcceptOrderQueueByVehicleCodeInput();
        result.init(json);
        return result;
    }
}

export interface IGetAcceptOrderQueueByVehicleCodeInput {
    /** 车辆编号 */
    vehicleCode: string;
}

export class VehicleQueueAndOrderStatusListDto implements IVehicleQueueAndOrderStatusListDto {
    /** 是否存在当前排队 */
    nowOrderQueueState: boolean | undefined;
    /** 是否存在最新提货单 */
    nowDeliveryOrderState: boolean | undefined;
    /** 自动接单状态（1开启，2关闭） */
    autoAcceptOrderState: VehicleQueueAndOrderStatusListDtoAutoAcceptOrderState | undefined;
    /** 自动接单状态名称 */
    readonly autoAcceptOrderStateText: string | undefined;

    constructor(data?: IVehicleQueueAndOrderStatusListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.nowOrderQueueState = data["nowOrderQueueState"];
            this.nowDeliveryOrderState = data["nowDeliveryOrderState"];
            this.autoAcceptOrderState = data["autoAcceptOrderState"];
            (<any>this).autoAcceptOrderStateText = data["autoAcceptOrderStateText"];
        }
    }

    static fromJS(data: any): VehicleQueueAndOrderStatusListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleQueueAndOrderStatusListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nowOrderQueueState"] = this.nowOrderQueueState;
        data["nowDeliveryOrderState"] = this.nowDeliveryOrderState;
        data["autoAcceptOrderState"] = this.autoAcceptOrderState;
        data["autoAcceptOrderStateText"] = this.autoAcceptOrderStateText;
        return data; 
    }

    clone(): VehicleQueueAndOrderStatusListDto {
        const json = this.toJSON();
        let result = new VehicleQueueAndOrderStatusListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleQueueAndOrderStatusListDto {
    /** 是否存在当前排队 */
    nowOrderQueueState: boolean | undefined;
    /** 是否存在最新提货单 */
    nowDeliveryOrderState: boolean | undefined;
    /** 自动接单状态（1开启，2关闭） */
    autoAcceptOrderState: VehicleQueueAndOrderStatusListDtoAutoAcceptOrderState | undefined;
    /** 自动接单状态名称 */
    autoAcceptOrderStateText: string | undefined;
}

export class IsTenantAvailableInput implements IIsTenantAvailableInput {
    tenancyName: string;

    constructor(data?: IIsTenantAvailableInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
        }
    }

    static fromJS(data: any): IsTenantAvailableInput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        return data; 
    }

    clone(): IsTenantAvailableInput {
        const json = this.toJSON();
        let result = new IsTenantAvailableInput();
        result.init(json);
        return result;
    }
}

export interface IIsTenantAvailableInput {
    tenancyName: string;
}

export class IsTenantAvailableOutput implements IIsTenantAvailableOutput {
    state: IsTenantAvailableOutputState | undefined;
    tenantId: number | undefined;

    constructor(data?: IIsTenantAvailableOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.tenantId = data["tenantId"];
        }
    }

    static fromJS(data: any): IsTenantAvailableOutput {
        data = typeof data === 'object' ? data : {};
        let result = new IsTenantAvailableOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["tenantId"] = this.tenantId;
        return data; 
    }

    clone(): IsTenantAvailableOutput {
        const json = this.toJSON();
        let result = new IsTenantAvailableOutput();
        result.init(json);
        return result;
    }
}

export interface IIsTenantAvailableOutput {
    state: IsTenantAvailableOutputState | undefined;
    tenantId: number | undefined;
}

export class RegisterInput implements IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string | undefined;

    constructor(data?: IRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.password = data["password"];
            this.captchaResponse = data["captchaResponse"];
        }
    }

    static fromJS(data: any): RegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["password"] = this.password;
        data["captchaResponse"] = this.captchaResponse;
        return data; 
    }

    clone(): RegisterInput {
        const json = this.toJSON();
        let result = new RegisterInput();
        result.init(json);
        return result;
    }
}

export interface IRegisterInput {
    name: string;
    surname: string;
    userName: string;
    emailAddress: string;
    password: string;
    captchaResponse: string | undefined;
}

export class RegisterOutput implements IRegisterOutput {
    canLogin: boolean | undefined;

    constructor(data?: IRegisterOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.canLogin = data["canLogin"];
        }
    }

    static fromJS(data: any): RegisterOutput {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canLogin"] = this.canLogin;
        return data; 
    }

    clone(): RegisterOutput {
        const json = this.toJSON();
        let result = new RegisterOutput();
        result.init(json);
        return result;
    }
}

export interface IRegisterOutput {
    canLogin: boolean | undefined;
}

export class EntireUploadInput implements IEntireUploadInput {
    title: string | undefined;
    description: string | undefined;
    file: string | undefined;
    type: EntireUploadInputType | undefined;
    fileName: string | undefined;
    contentType: string | undefined;
    /** 业务主键 */
    natrualKeyId: string | undefined;
    /** 功能名，用于区分不同业务表 */
    functionName: string;
    /** 附件分类名（可选，提供对附件进一步分组的方法） */
    categoryName: string | undefined;
    /** 附件管理所需权限 */
    requiredManagePermissionName: string | undefined;
    /** 附件查看所需权限 */
    requiredViewPermissionName: string | undefined;

    constructor(data?: IEntireUploadInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.title = data["title"];
            this.description = data["description"];
            this.file = data["file"];
            this.type = data["type"];
            this.fileName = data["fileName"];
            this.contentType = data["contentType"];
            this.natrualKeyId = data["natrualKeyId"];
            this.functionName = data["functionName"];
            this.categoryName = data["categoryName"];
            this.requiredManagePermissionName = data["requiredManagePermissionName"];
            this.requiredViewPermissionName = data["requiredViewPermissionName"];
        }
    }

    static fromJS(data: any): EntireUploadInput {
        data = typeof data === 'object' ? data : {};
        let result = new EntireUploadInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["description"] = this.description;
        data["file"] = this.file;
        data["type"] = this.type;
        data["fileName"] = this.fileName;
        data["contentType"] = this.contentType;
        data["natrualKeyId"] = this.natrualKeyId;
        data["functionName"] = this.functionName;
        data["categoryName"] = this.categoryName;
        data["requiredManagePermissionName"] = this.requiredManagePermissionName;
        data["requiredViewPermissionName"] = this.requiredViewPermissionName;
        return data; 
    }

    clone(): EntireUploadInput {
        const json = this.toJSON();
        let result = new EntireUploadInput();
        result.init(json);
        return result;
    }
}

export interface IEntireUploadInput {
    title: string | undefined;
    description: string | undefined;
    file: string | undefined;
    type: EntireUploadInputType | undefined;
    fileName: string | undefined;
    contentType: string | undefined;
    /** 业务主键 */
    natrualKeyId: string | undefined;
    /** 功能名，用于区分不同业务表 */
    functionName: string;
    /** 附件分类名（可选，提供对附件进一步分组的方法） */
    categoryName: string | undefined;
    /** 附件管理所需权限 */
    requiredManagePermissionName: string | undefined;
    /** 附件查看所需权限 */
    requiredViewPermissionName: string | undefined;
}

export class UploadOutput implements IUploadOutput {
    attachmentId: string | undefined;

    constructor(data?: IUploadOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.attachmentId = data["attachmentId"];
        }
    }

    static fromJS(data: any): UploadOutput {
        data = typeof data === 'object' ? data : {};
        let result = new UploadOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attachmentId"] = this.attachmentId;
        return data; 
    }

    clone(): UploadOutput {
        const json = this.toJSON();
        let result = new UploadOutput();
        result.init(json);
        return result;
    }
}

export interface IUploadOutput {
    attachmentId: string | undefined;
}

export class DownloadInput implements IDownloadInput {
    id: string | undefined;
    isThumbnail: boolean | undefined;

    constructor(data?: IDownloadInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isThumbnail = data["isThumbnail"];
        }
    }

    static fromJS(data: any): DownloadInput {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isThumbnail"] = this.isThumbnail;
        return data; 
    }

    clone(): DownloadInput {
        const json = this.toJSON();
        let result = new DownloadInput();
        result.init(json);
        return result;
    }
}

export interface IDownloadInput {
    id: string | undefined;
    isThumbnail: boolean | undefined;
}

export class DownloadOutput implements IDownloadOutput {
    content: string | undefined;
    contentType: string | undefined;
    fileName: string | undefined;

    constructor(data?: IDownloadOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.content = data["content"];
            this.contentType = data["contentType"];
            this.fileName = data["fileName"];
        }
    }

    static fromJS(data: any): DownloadOutput {
        data = typeof data === 'object' ? data : {};
        let result = new DownloadOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["content"] = this.content;
        data["contentType"] = this.contentType;
        data["fileName"] = this.fileName;
        return data; 
    }

    clone(): DownloadOutput {
        const json = this.toJSON();
        let result = new DownloadOutput();
        result.init(json);
        return result;
    }
}

export interface IDownloadOutput {
    content: string | undefined;
    contentType: string | undefined;
    fileName: string | undefined;
}

export class BatchUpdateAttachmentInput implements IBatchUpdateAttachmentInput {
    /** 业务主键 */
    natrualKeyId: string | undefined;
    /** 功能名，用于区分不同业务表 */
    functionName: string;
    /** 附件分类名（可选，提供对附件进一步分组的方法） */
    categoryName: string | undefined;
    /** 附件管理所需权限 */
    requiredManagePermissionName: string | undefined;
    /** 附件查看所需权限 */
    requiredViewPermissionName: string | undefined;
    /** 关联的多个附件编号 */
    attachmentIds: string[];

    constructor(data?: IBatchUpdateAttachmentInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.attachmentIds = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.natrualKeyId = data["natrualKeyId"];
            this.functionName = data["functionName"];
            this.categoryName = data["categoryName"];
            this.requiredManagePermissionName = data["requiredManagePermissionName"];
            this.requiredViewPermissionName = data["requiredViewPermissionName"];
            if (data["attachmentIds"] && data["attachmentIds"].constructor === Array) {
                this.attachmentIds = [] as any;
                for (let item of data["attachmentIds"])
                    this.attachmentIds.push(item);
            }
        }
    }

    static fromJS(data: any): BatchUpdateAttachmentInput {
        data = typeof data === 'object' ? data : {};
        let result = new BatchUpdateAttachmentInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["natrualKeyId"] = this.natrualKeyId;
        data["functionName"] = this.functionName;
        data["categoryName"] = this.categoryName;
        data["requiredManagePermissionName"] = this.requiredManagePermissionName;
        data["requiredViewPermissionName"] = this.requiredViewPermissionName;
        if (this.attachmentIds && this.attachmentIds.constructor === Array) {
            data["attachmentIds"] = [];
            for (let item of this.attachmentIds)
                data["attachmentIds"].push(item);
        }
        return data; 
    }

    clone(): BatchUpdateAttachmentInput {
        const json = this.toJSON();
        let result = new BatchUpdateAttachmentInput();
        result.init(json);
        return result;
    }
}

export interface IBatchUpdateAttachmentInput {
    /** 业务主键 */
    natrualKeyId: string | undefined;
    /** 功能名，用于区分不同业务表 */
    functionName: string;
    /** 附件分类名（可选，提供对附件进一步分组的方法） */
    categoryName: string | undefined;
    /** 附件管理所需权限 */
    requiredManagePermissionName: string | undefined;
    /** 附件查看所需权限 */
    requiredViewPermissionName: string | undefined;
    /** 关联的多个附件编号 */
    attachmentIds: string[];
}

export class PagedResultDtoOfAttachmentListDto implements IPagedResultDtoOfAttachmentListDto {
    totalCount: number | undefined;
    items: AttachmentListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfAttachmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(AttachmentListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAttachmentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfAttachmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfAttachmentListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfAttachmentListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfAttachmentListDto {
    totalCount: number | undefined;
    items: AttachmentListDto[] | undefined;
}

export class AttachmentListDto implements IAttachmentListDto {
    categoryName: string | undefined;
    title: string | undefined;
    description: string | undefined;
    fileName: string | undefined;
    contentType: string | undefined;
    type: AttachmentListDtoType | undefined;
    size: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IAttachmentListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryName = data["categoryName"];
            this.title = data["title"];
            this.description = data["description"];
            this.fileName = data["fileName"];
            this.contentType = data["contentType"];
            this.type = data["type"];
            this.size = data["size"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AttachmentListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AttachmentListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryName"] = this.categoryName;
        data["title"] = this.title;
        data["description"] = this.description;
        data["fileName"] = this.fileName;
        data["contentType"] = this.contentType;
        data["type"] = this.type;
        data["size"] = this.size;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): AttachmentListDto {
        const json = this.toJSON();
        let result = new AttachmentListDto();
        result.init(json);
        return result;
    }
}

export interface IAttachmentListDto {
    categoryName: string | undefined;
    title: string | undefined;
    description: string | undefined;
    fileName: string | undefined;
    contentType: string | undefined;
    type: AttachmentListDtoType | undefined;
    size: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfAuditLogListDto implements IPagedResultDtoOfAuditLogListDto {
    totalCount: number | undefined;
    items: AuditLogListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(AuditLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfAuditLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfAuditLogListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfAuditLogListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfAuditLogListDto {
    totalCount: number | undefined;
    items: AuditLogListDto[] | undefined;
}

export class AuditLogListDto implements IAuditLogListDto {
    userId: number | undefined;
    userName: string | undefined;
    impersonatorTenantId: number | undefined;
    impersonatorUserId: number | undefined;
    serviceName: string | undefined;
    methodName: string | undefined;
    parameters: string | undefined;
    executionTime: moment.Moment | undefined;
    executionDuration: number | undefined;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    exception: string | undefined;
    customData: string | undefined;
    id: number | undefined;

    constructor(data?: IAuditLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.userName = data["userName"];
            this.impersonatorTenantId = data["impersonatorTenantId"];
            this.impersonatorUserId = data["impersonatorUserId"];
            this.serviceName = data["serviceName"];
            this.methodName = data["methodName"];
            this.parameters = data["parameters"];
            this.executionTime = data["executionTime"] ? moment(data["executionTime"].toString()) : <any>undefined;
            this.executionDuration = data["executionDuration"];
            this.clientIpAddress = data["clientIpAddress"];
            this.clientName = data["clientName"];
            this.browserInfo = data["browserInfo"];
            this.exception = data["exception"];
            this.customData = data["customData"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AuditLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuditLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["userName"] = this.userName;
        data["impersonatorTenantId"] = this.impersonatorTenantId;
        data["impersonatorUserId"] = this.impersonatorUserId;
        data["serviceName"] = this.serviceName;
        data["methodName"] = this.methodName;
        data["parameters"] = this.parameters;
        data["executionTime"] = this.executionTime ? this.executionTime.toISOString() : <any>undefined;
        data["executionDuration"] = this.executionDuration;
        data["clientIpAddress"] = this.clientIpAddress;
        data["clientName"] = this.clientName;
        data["browserInfo"] = this.browserInfo;
        data["exception"] = this.exception;
        data["customData"] = this.customData;
        data["id"] = this.id;
        return data; 
    }

    clone(): AuditLogListDto {
        const json = this.toJSON();
        let result = new AuditLogListDto();
        result.init(json);
        return result;
    }
}

export interface IAuditLogListDto {
    userId: number | undefined;
    userName: string | undefined;
    impersonatorTenantId: number | undefined;
    impersonatorUserId: number | undefined;
    serviceName: string | undefined;
    methodName: string | undefined;
    parameters: string | undefined;
    executionTime: moment.Moment | undefined;
    executionDuration: number | undefined;
    clientIpAddress: string | undefined;
    clientName: string | undefined;
    browserInfo: string | undefined;
    exception: string | undefined;
    customData: string | undefined;
    id: number | undefined;
}

export class FileDto implements IFileDto {
    fileName: string;
    fileType: string;
    fileToken: string;

    constructor(data?: IFileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileName = data["fileName"];
            this.fileType = data["fileType"];
            this.fileToken = data["fileToken"];
        }
    }

    static fromJS(data: any): FileDto {
        data = typeof data === 'object' ? data : {};
        let result = new FileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileName"] = this.fileName;
        data["fileType"] = this.fileType;
        data["fileToken"] = this.fileToken;
        return data; 
    }

    clone(): FileDto {
        const json = this.toJSON();
        let result = new FileDto();
        result.init(json);
        return result;
    }
}

export interface IFileDto {
    fileName: string;
    fileType: string;
    fileToken: string;
}

export class AutoAcceptOrderStateEditDto implements IAutoAcceptOrderStateEditDto {
    /** 自动接单状态（开启 = 1, 关闭 = 2） */
    state: AutoAcceptOrderStateEditDtoState | undefined;
    /** 自动接单状态名称 */
    readonly stateText: string | undefined;

    constructor(data?: IAutoAcceptOrderStateEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            (<any>this).stateText = data["stateText"];
        }
    }

    static fromJS(data: any): AutoAcceptOrderStateEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new AutoAcceptOrderStateEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["stateText"] = this.stateText;
        return data; 
    }

    clone(): AutoAcceptOrderStateEditDto {
        const json = this.toJSON();
        let result = new AutoAcceptOrderStateEditDto();
        result.init(json);
        return result;
    }
}

export interface IAutoAcceptOrderStateEditDto {
    /** 自动接单状态（开启 = 1, 关闭 = 2） */
    state: AutoAcceptOrderStateEditDtoState | undefined;
    /** 自动接单状态名称 */
    stateText: string | undefined;
}

export class ListResultDtoOfBMOrganizationUnitListDto implements IListResultDtoOfBMOrganizationUnitListDto {
    items: BMOrganizationUnitListDto[] | undefined;

    constructor(data?: IListResultDtoOfBMOrganizationUnitListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(BMOrganizationUnitListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfBMOrganizationUnitListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfBMOrganizationUnitListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfBMOrganizationUnitListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfBMOrganizationUnitListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfBMOrganizationUnitListDto {
    items: BMOrganizationUnitListDto[] | undefined;
}

export class BMOrganizationUnitListDto implements IBMOrganizationUnitListDto {
    code: string | undefined;
    displayName: string | undefined;
    parentId: number | undefined;
    order: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    organizationType: BMOrganizationUnitListDtoOrganizationType | undefined;
    children: BMOrganizationUnitListDto[] | undefined;
    id: number | undefined;

    constructor(data?: IBMOrganizationUnitListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.displayName = data["displayName"];
            this.parentId = data["parentId"];
            this.order = data["order"];
            this.isActive = data["isActive"];
            this.isApprove = data["isApprove"];
            this.organizationType = data["organizationType"];
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [] as any;
                for (let item of data["children"])
                    this.children.push(BMOrganizationUnitListDto.fromJS(item));
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BMOrganizationUnitListDto {
        data = typeof data === 'object' ? data : {};
        let result = new BMOrganizationUnitListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["displayName"] = this.displayName;
        data["parentId"] = this.parentId;
        data["order"] = this.order;
        data["isActive"] = this.isActive;
        data["isApprove"] = this.isApprove;
        data["organizationType"] = this.organizationType;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): BMOrganizationUnitListDto {
        const json = this.toJSON();
        let result = new BMOrganizationUnitListDto();
        result.init(json);
        return result;
    }
}

export interface IBMOrganizationUnitListDto {
    code: string | undefined;
    displayName: string | undefined;
    parentId: number | undefined;
    order: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    organizationType: BMOrganizationUnitListDtoOrganizationType | undefined;
    children: BMOrganizationUnitListDto[] | undefined;
    id: number | undefined;
}

export class GetBMOrganizationUnitForEditOutput implements IGetBMOrganizationUnitForEditOutput {
    organizationUnit: BMOrganizationUnitEditDto | undefined;

    constructor(data?: IGetBMOrganizationUnitForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnit = data["organizationUnit"] ? BMOrganizationUnitEditDto.fromJS(data["organizationUnit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetBMOrganizationUnitForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetBMOrganizationUnitForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnit"] = this.organizationUnit ? this.organizationUnit.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetBMOrganizationUnitForEditOutput {
        const json = this.toJSON();
        let result = new GetBMOrganizationUnitForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetBMOrganizationUnitForEditOutput {
    organizationUnit: BMOrganizationUnitEditDto | undefined;
}

export class BMOrganizationUnitEditDto implements IBMOrganizationUnitEditDto {
    id: number | undefined;
    ouCode: string;
    displayName: string;
    parentId: number | undefined;
    parentName: string | undefined;
    fullName: string | undefined;
    order: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    organizationType: BMOrganizationUnitEditDtoOrganizationType | undefined;
    area: string | undefined;
    remark: string | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    bmouFunctionals: BMOUFunctionalEditDto[] | undefined;

    constructor(data?: IBMOrganizationUnitEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ouCode = data["ouCode"];
            this.displayName = data["displayName"];
            this.parentId = data["parentId"];
            this.parentName = data["parentName"];
            this.fullName = data["fullName"];
            this.order = data["order"];
            this.isActive = data["isActive"];
            this.isApprove = data["isApprove"];
            this.organizationType = data["organizationType"];
            this.area = data["area"];
            this.remark = data["remark"];
            this.creatorUserName = data["creatorUserName"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            if (data["bmouFunctionals"] && data["bmouFunctionals"].constructor === Array) {
                this.bmouFunctionals = [] as any;
                for (let item of data["bmouFunctionals"])
                    this.bmouFunctionals.push(BMOUFunctionalEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BMOrganizationUnitEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new BMOrganizationUnitEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ouCode"] = this.ouCode;
        data["displayName"] = this.displayName;
        data["parentId"] = this.parentId;
        data["parentName"] = this.parentName;
        data["fullName"] = this.fullName;
        data["order"] = this.order;
        data["isActive"] = this.isActive;
        data["isApprove"] = this.isApprove;
        data["organizationType"] = this.organizationType;
        data["area"] = this.area;
        data["remark"] = this.remark;
        data["creatorUserName"] = this.creatorUserName;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        if (this.bmouFunctionals && this.bmouFunctionals.constructor === Array) {
            data["bmouFunctionals"] = [];
            for (let item of this.bmouFunctionals)
                data["bmouFunctionals"].push(item.toJSON());
        }
        return data; 
    }

    clone(): BMOrganizationUnitEditDto {
        const json = this.toJSON();
        let result = new BMOrganizationUnitEditDto();
        result.init(json);
        return result;
    }
}

export interface IBMOrganizationUnitEditDto {
    id: number | undefined;
    ouCode: string;
    displayName: string;
    parentId: number | undefined;
    parentName: string | undefined;
    fullName: string | undefined;
    order: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    organizationType: BMOrganizationUnitEditDtoOrganizationType | undefined;
    area: string | undefined;
    remark: string | undefined;
    creatorUserName: string | undefined;
    creationTime: moment.Moment | undefined;
    bmouFunctionals: BMOUFunctionalEditDto[] | undefined;
}

export class BMOUFunctionalEditDto implements IBMOUFunctionalEditDto {
    ouId: number | undefined;
    functional: BMOUFunctionalEditDtoFunctional | undefined;
    checked: boolean | undefined;
    order: number | undefined;

    constructor(data?: IBMOUFunctionalEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ouId = data["ouId"];
            this.functional = data["functional"];
            this.checked = data["checked"];
            this.order = data["order"];
        }
    }

    static fromJS(data: any): BMOUFunctionalEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new BMOUFunctionalEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ouId"] = this.ouId;
        data["functional"] = this.functional;
        data["checked"] = this.checked;
        data["order"] = this.order;
        return data; 
    }

    clone(): BMOUFunctionalEditDto {
        const json = this.toJSON();
        let result = new BMOUFunctionalEditDto();
        result.init(json);
        return result;
    }
}

export interface IBMOUFunctionalEditDto {
    ouId: number | undefined;
    functional: BMOUFunctionalEditDtoFunctional | undefined;
    checked: boolean | undefined;
    order: number | undefined;
}

export class GetBMOrganizationUnitForMoveOutput implements IGetBMOrganizationUnitForMoveOutput {
    organizationUnit: BMOrganizationUnitMoveDto | undefined;

    constructor(data?: IGetBMOrganizationUnitForMoveOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnit = data["organizationUnit"] ? BMOrganizationUnitMoveDto.fromJS(data["organizationUnit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetBMOrganizationUnitForMoveOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetBMOrganizationUnitForMoveOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnit"] = this.organizationUnit ? this.organizationUnit.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetBMOrganizationUnitForMoveOutput {
        const json = this.toJSON();
        let result = new GetBMOrganizationUnitForMoveOutput();
        result.init(json);
        return result;
    }
}

export interface IGetBMOrganizationUnitForMoveOutput {
    organizationUnit: BMOrganizationUnitMoveDto | undefined;
}

export class BMOrganizationUnitMoveDto implements IBMOrganizationUnitMoveDto {
    id: number | undefined;
    ouCode: string;
    displayName: string;
    parentId: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    parentName: string | undefined;

    constructor(data?: IBMOrganizationUnitMoveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ouCode = data["ouCode"];
            this.displayName = data["displayName"];
            this.parentId = data["parentId"];
            this.isActive = data["isActive"];
            this.isApprove = data["isApprove"];
            this.parentName = data["parentName"];
        }
    }

    static fromJS(data: any): BMOrganizationUnitMoveDto {
        data = typeof data === 'object' ? data : {};
        let result = new BMOrganizationUnitMoveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ouCode"] = this.ouCode;
        data["displayName"] = this.displayName;
        data["parentId"] = this.parentId;
        data["isActive"] = this.isActive;
        data["isApprove"] = this.isApprove;
        data["parentName"] = this.parentName;
        return data; 
    }

    clone(): BMOrganizationUnitMoveDto {
        const json = this.toJSON();
        let result = new BMOrganizationUnitMoveDto();
        result.init(json);
        return result;
    }
}

export interface IBMOrganizationUnitMoveDto {
    id: number | undefined;
    ouCode: string;
    displayName: string;
    parentId: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    parentName: string | undefined;
}

export class UpdateBMOrganizationUnitForExeChangeInput implements IUpdateBMOrganizationUnitForExeChangeInput {
    changeData: ExeChangeDto[] | undefined;

    constructor(data?: IUpdateBMOrganizationUnitForExeChangeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["changeData"] && data["changeData"].constructor === Array) {
                this.changeData = [] as any;
                for (let item of data["changeData"])
                    this.changeData.push(ExeChangeDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateBMOrganizationUnitForExeChangeInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBMOrganizationUnitForExeChangeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.changeData && this.changeData.constructor === Array) {
            data["changeData"] = [];
            for (let item of this.changeData)
                data["changeData"].push(item.toJSON());
        }
        return data; 
    }

    clone(): UpdateBMOrganizationUnitForExeChangeInput {
        const json = this.toJSON();
        let result = new UpdateBMOrganizationUnitForExeChangeInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateBMOrganizationUnitForExeChangeInput {
    changeData: ExeChangeDto[] | undefined;
}

export class ExeChangeDto implements IExeChangeDto {
    id: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    position: string | undefined;

    constructor(data?: IExeChangeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isActive = data["isActive"];
            this.isApprove = data["isApprove"];
            this.position = data["position"];
        }
    }

    static fromJS(data: any): ExeChangeDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExeChangeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isActive"] = this.isActive;
        data["isApprove"] = this.isApprove;
        data["position"] = this.position;
        return data; 
    }

    clone(): ExeChangeDto {
        const json = this.toJSON();
        let result = new ExeChangeDto();
        result.init(json);
        return result;
    }
}

export interface IExeChangeDto {
    id: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    position: string | undefined;
}

export class CreateBMOrganizationUnitInput implements ICreateBMOrganizationUnitInput {
    organizationUnit: BMOrganizationUnitCreateInputDto | undefined;
    bmouFunctionals: BmouFunctionals[] | undefined;

    constructor(data?: ICreateBMOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnit = data["organizationUnit"] ? BMOrganizationUnitCreateInputDto.fromJS(data["organizationUnit"]) : <any>undefined;
            if (data["bmouFunctionals"] && data["bmouFunctionals"].constructor === Array) {
                this.bmouFunctionals = [] as any;
                for (let item of data["bmouFunctionals"])
                    this.bmouFunctionals.push(item);
            }
        }
    }

    static fromJS(data: any): CreateBMOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBMOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnit"] = this.organizationUnit ? this.organizationUnit.toJSON() : <any>undefined;
        if (this.bmouFunctionals && this.bmouFunctionals.constructor === Array) {
            data["bmouFunctionals"] = [];
            for (let item of this.bmouFunctionals)
                data["bmouFunctionals"].push(item);
        }
        return data; 
    }

    clone(): CreateBMOrganizationUnitInput {
        const json = this.toJSON();
        let result = new CreateBMOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface ICreateBMOrganizationUnitInput {
    organizationUnit: BMOrganizationUnitCreateInputDto | undefined;
    bmouFunctionals: BmouFunctionals[] | undefined;
}

export class BMOrganizationUnitCreateInputDto implements IBMOrganizationUnitCreateInputDto {
    ouCode: string;
    displayName: string;
    parentId: number | undefined;
    fullName: string | undefined;
    order: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    organizationType: BMOrganizationUnitCreateInputDtoOrganizationType | undefined;
    area: string | undefined;
    remark: string | undefined;

    constructor(data?: IBMOrganizationUnitCreateInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.ouCode = data["ouCode"];
            this.displayName = data["displayName"];
            this.parentId = data["parentId"];
            this.fullName = data["fullName"];
            this.order = data["order"];
            this.isActive = data["isActive"];
            this.isApprove = data["isApprove"];
            this.organizationType = data["organizationType"];
            this.area = data["area"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): BMOrganizationUnitCreateInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new BMOrganizationUnitCreateInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ouCode"] = this.ouCode;
        data["displayName"] = this.displayName;
        data["parentId"] = this.parentId;
        data["fullName"] = this.fullName;
        data["order"] = this.order;
        data["isActive"] = this.isActive;
        data["isApprove"] = this.isApprove;
        data["organizationType"] = this.organizationType;
        data["area"] = this.area;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): BMOrganizationUnitCreateInputDto {
        const json = this.toJSON();
        let result = new BMOrganizationUnitCreateInputDto();
        result.init(json);
        return result;
    }
}

export interface IBMOrganizationUnitCreateInputDto {
    ouCode: string;
    displayName: string;
    parentId: number | undefined;
    fullName: string | undefined;
    order: number | undefined;
    isActive: boolean | undefined;
    isApprove: boolean | undefined;
    organizationType: BMOrganizationUnitCreateInputDtoOrganizationType | undefined;
    area: string | undefined;
    remark: string | undefined;
}

export class UpdateBMOrganizationUnitInput implements IUpdateBMOrganizationUnitInput {
    organizationUnit: BMOrganizationUnitEditInputDto | undefined;
    bmouFunctionals: BmouFunctionals2[] | undefined;

    constructor(data?: IUpdateBMOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnit = data["organizationUnit"] ? BMOrganizationUnitEditInputDto.fromJS(data["organizationUnit"]) : <any>undefined;
            if (data["bmouFunctionals"] && data["bmouFunctionals"].constructor === Array) {
                this.bmouFunctionals = [] as any;
                for (let item of data["bmouFunctionals"])
                    this.bmouFunctionals.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateBMOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBMOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnit"] = this.organizationUnit ? this.organizationUnit.toJSON() : <any>undefined;
        if (this.bmouFunctionals && this.bmouFunctionals.constructor === Array) {
            data["bmouFunctionals"] = [];
            for (let item of this.bmouFunctionals)
                data["bmouFunctionals"].push(item);
        }
        return data; 
    }

    clone(): UpdateBMOrganizationUnitInput {
        const json = this.toJSON();
        let result = new UpdateBMOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateBMOrganizationUnitInput {
    organizationUnit: BMOrganizationUnitEditInputDto | undefined;
    bmouFunctionals: BmouFunctionals2[] | undefined;
}

export class BMOrganizationUnitEditInputDto implements IBMOrganizationUnitEditInputDto {
    id: number | undefined;
    ouCode: string;
    displayName: string;
    parentId: number | undefined;
    fullName: string | undefined;
    order: number | undefined;
    organizationType: BMOrganizationUnitEditInputDtoOrganizationType | undefined;
    area: string | undefined;
    remark: string | undefined;

    constructor(data?: IBMOrganizationUnitEditInputDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.ouCode = data["ouCode"];
            this.displayName = data["displayName"];
            this.parentId = data["parentId"];
            this.fullName = data["fullName"];
            this.order = data["order"];
            this.organizationType = data["organizationType"];
            this.area = data["area"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): BMOrganizationUnitEditInputDto {
        data = typeof data === 'object' ? data : {};
        let result = new BMOrganizationUnitEditInputDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ouCode"] = this.ouCode;
        data["displayName"] = this.displayName;
        data["parentId"] = this.parentId;
        data["fullName"] = this.fullName;
        data["order"] = this.order;
        data["organizationType"] = this.organizationType;
        data["area"] = this.area;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): BMOrganizationUnitEditInputDto {
        const json = this.toJSON();
        let result = new BMOrganizationUnitEditInputDto();
        result.init(json);
        return result;
    }
}

export interface IBMOrganizationUnitEditInputDto {
    id: number | undefined;
    ouCode: string;
    displayName: string;
    parentId: number | undefined;
    fullName: string | undefined;
    order: number | undefined;
    organizationType: BMOrganizationUnitEditInputDtoOrganizationType | undefined;
    area: string | undefined;
    remark: string | undefined;
}

export class MoveBMOrganizationUnitInput implements IMoveBMOrganizationUnitInput {
    organizationUnit: BMOrganizationUnitMoveDto | undefined;

    constructor(data?: IMoveBMOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnit = data["organizationUnit"] ? BMOrganizationUnitMoveDto.fromJS(data["organizationUnit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MoveBMOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new MoveBMOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnit"] = this.organizationUnit ? this.organizationUnit.toJSON() : <any>undefined;
        return data; 
    }

    clone(): MoveBMOrganizationUnitInput {
        const json = this.toJSON();
        let result = new MoveBMOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IMoveBMOrganizationUnitInput {
    organizationUnit: BMOrganizationUnitMoveDto | undefined;
}

export class BMOrganizationUnitIdInput implements IBMOrganizationUnitIdInput {
    id: number | undefined;

    constructor(data?: IBMOrganizationUnitIdInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): BMOrganizationUnitIdInput {
        data = typeof data === 'object' ? data : {};
        let result = new BMOrganizationUnitIdInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): BMOrganizationUnitIdInput {
        const json = this.toJSON();
        let result = new BMOrganizationUnitIdInput();
        result.init(json);
        return result;
    }
}

export interface IBMOrganizationUnitIdInput {
    id: number | undefined;
}

export class ListResultDtoOfCacheDto implements IListResultDtoOfCacheDto {
    items: CacheDto[] | undefined;

    constructor(data?: IListResultDtoOfCacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(CacheDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCacheDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfCacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfCacheDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfCacheDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfCacheDto {
    items: CacheDto[] | undefined;
}

export class CacheDto implements ICacheDto {
    name: string | undefined;

    constructor(data?: ICacheDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
        }
    }

    static fromJS(data: any): CacheDto {
        data = typeof data === 'object' ? data : {};
        let result = new CacheDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }

    clone(): CacheDto {
        const json = this.toJSON();
        let result = new CacheDto();
        result.init(json);
        return result;
    }
}

export interface ICacheDto {
    name: string | undefined;
}

export class EntityDtoOfString implements IEntityDtoOfString {
    id: string | undefined;

    constructor(data?: IEntityDtoOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): EntityDtoOfString {
        data = typeof data === 'object' ? data : {};
        let result = new EntityDtoOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): EntityDtoOfString {
        const json = this.toJSON();
        let result = new EntityDtoOfString();
        result.init(json);
        return result;
    }
}

export interface IEntityDtoOfString {
    id: string | undefined;
}

export class PagedResultDtoOfCapitalFlowBillListDto implements IPagedResultDtoOfCapitalFlowBillListDto {
    totalCount: number | undefined;
    items: CapitalFlowBillListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCapitalFlowBillListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(CapitalFlowBillListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCapitalFlowBillListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCapitalFlowBillListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfCapitalFlowBillListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfCapitalFlowBillListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfCapitalFlowBillListDto {
    totalCount: number | undefined;
    items: CapitalFlowBillListDto[] | undefined;
}

export class CapitalFlowBillListDto implements ICapitalFlowBillListDto {
    messageReferenceNumber: string | undefined;
    documentName: string | undefined;
    documentVersionNumber: string | undefined;
    senderCode: string | undefined;
    recipientCode: string | undefined;
    messageSendingDateTime: moment.Moment | undefined;
    messageFunctionCode: string | undefined;
    documentNumber: string | undefined;
    carrier: string | undefined;
    vehicleNumber: string | undefined;
    licensePlateTypeCode: string | undefined;
    licensePlateTypeCodeText: string | undefined;
    uploadCount: number | undefined;
    message: string | undefined;
    uploadStarus: CapitalFlowBillListDtoUploadStarus | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ICapitalFlowBillListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.messageReferenceNumber = data["messageReferenceNumber"];
            this.documentName = data["documentName"];
            this.documentVersionNumber = data["documentVersionNumber"];
            this.senderCode = data["senderCode"];
            this.recipientCode = data["recipientCode"];
            this.messageSendingDateTime = data["messageSendingDateTime"] ? moment(data["messageSendingDateTime"].toString()) : <any>undefined;
            this.messageFunctionCode = data["messageFunctionCode"];
            this.documentNumber = data["documentNumber"];
            this.carrier = data["carrier"];
            this.vehicleNumber = data["vehicleNumber"];
            this.licensePlateTypeCode = data["licensePlateTypeCode"];
            this.licensePlateTypeCodeText = data["licensePlateTypeCodeText"];
            this.uploadCount = data["uploadCount"];
            this.message = data["message"];
            this.uploadStarus = data["uploadStarus"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CapitalFlowBillListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CapitalFlowBillListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageReferenceNumber"] = this.messageReferenceNumber;
        data["documentName"] = this.documentName;
        data["documentVersionNumber"] = this.documentVersionNumber;
        data["senderCode"] = this.senderCode;
        data["recipientCode"] = this.recipientCode;
        data["messageSendingDateTime"] = this.messageSendingDateTime ? this.messageSendingDateTime.toISOString() : <any>undefined;
        data["messageFunctionCode"] = this.messageFunctionCode;
        data["documentNumber"] = this.documentNumber;
        data["carrier"] = this.carrier;
        data["vehicleNumber"] = this.vehicleNumber;
        data["licensePlateTypeCode"] = this.licensePlateTypeCode;
        data["licensePlateTypeCodeText"] = this.licensePlateTypeCodeText;
        data["uploadCount"] = this.uploadCount;
        data["message"] = this.message;
        data["uploadStarus"] = this.uploadStarus;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): CapitalFlowBillListDto {
        const json = this.toJSON();
        let result = new CapitalFlowBillListDto();
        result.init(json);
        return result;
    }
}

export interface ICapitalFlowBillListDto {
    messageReferenceNumber: string | undefined;
    documentName: string | undefined;
    documentVersionNumber: string | undefined;
    senderCode: string | undefined;
    recipientCode: string | undefined;
    messageSendingDateTime: moment.Moment | undefined;
    messageFunctionCode: string | undefined;
    documentNumber: string | undefined;
    carrier: string | undefined;
    vehicleNumber: string | undefined;
    licensePlateTypeCode: string | undefined;
    licensePlateTypeCodeText: string | undefined;
    uploadCount: number | undefined;
    message: string | undefined;
    uploadStarus: CapitalFlowBillListDtoUploadStarus | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetCapitalFlowBillForEditOutput implements IGetCapitalFlowBillForEditOutput {
    capitalFlowBill: CapitalFlowBillEditDto | undefined;
    capitalFlowShippingNotes: CapitalFlowShippingNoteEditDto[] | undefined;
    capitalFlowFinancials: CapitalFlowFinancialDto[] | undefined;

    constructor(data?: IGetCapitalFlowBillForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.capitalFlowBill = data["capitalFlowBill"] ? CapitalFlowBillEditDto.fromJS(data["capitalFlowBill"]) : <any>undefined;
            if (data["capitalFlowShippingNotes"] && data["capitalFlowShippingNotes"].constructor === Array) {
                this.capitalFlowShippingNotes = [] as any;
                for (let item of data["capitalFlowShippingNotes"])
                    this.capitalFlowShippingNotes.push(CapitalFlowShippingNoteEditDto.fromJS(item));
            }
            if (data["capitalFlowFinancials"] && data["capitalFlowFinancials"].constructor === Array) {
                this.capitalFlowFinancials = [] as any;
                for (let item of data["capitalFlowFinancials"])
                    this.capitalFlowFinancials.push(CapitalFlowFinancialDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCapitalFlowBillForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCapitalFlowBillForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["capitalFlowBill"] = this.capitalFlowBill ? this.capitalFlowBill.toJSON() : <any>undefined;
        if (this.capitalFlowShippingNotes && this.capitalFlowShippingNotes.constructor === Array) {
            data["capitalFlowShippingNotes"] = [];
            for (let item of this.capitalFlowShippingNotes)
                data["capitalFlowShippingNotes"].push(item.toJSON());
        }
        if (this.capitalFlowFinancials && this.capitalFlowFinancials.constructor === Array) {
            data["capitalFlowFinancials"] = [];
            for (let item of this.capitalFlowFinancials)
                data["capitalFlowFinancials"].push(item.toJSON());
        }
        return data; 
    }

    clone(): GetCapitalFlowBillForEditOutput {
        const json = this.toJSON();
        let result = new GetCapitalFlowBillForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCapitalFlowBillForEditOutput {
    capitalFlowBill: CapitalFlowBillEditDto | undefined;
    capitalFlowShippingNotes: CapitalFlowShippingNoteEditDto[] | undefined;
    capitalFlowFinancials: CapitalFlowFinancialDto[] | undefined;
}

export class CapitalFlowBillEditDto implements ICapitalFlowBillEditDto {
    id: string | undefined;
    documentNumber: string;
    carrier: string;
    vehicleNumber: string;
    licensePlateTypeCode: string;

    constructor(data?: ICapitalFlowBillEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.documentNumber = data["documentNumber"];
            this.carrier = data["carrier"];
            this.vehicleNumber = data["vehicleNumber"];
            this.licensePlateTypeCode = data["licensePlateTypeCode"];
        }
    }

    static fromJS(data: any): CapitalFlowBillEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CapitalFlowBillEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["documentNumber"] = this.documentNumber;
        data["carrier"] = this.carrier;
        data["vehicleNumber"] = this.vehicleNumber;
        data["licensePlateTypeCode"] = this.licensePlateTypeCode;
        return data; 
    }

    clone(): CapitalFlowBillEditDto {
        const json = this.toJSON();
        let result = new CapitalFlowBillEditDto();
        result.init(json);
        return result;
    }
}

export interface ICapitalFlowBillEditDto {
    id: string | undefined;
    documentNumber: string;
    carrier: string;
    vehicleNumber: string;
    licensePlateTypeCode: string;
}

export class CapitalFlowShippingNoteEditDto implements ICapitalFlowShippingNoteEditDto {
    shippingNoteNumber: string | undefined;
    totalMonetaryAmount: number | undefined;
    remark: string | undefined;

    constructor(data?: ICapitalFlowShippingNoteEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shippingNoteNumber = data["shippingNoteNumber"];
            this.totalMonetaryAmount = data["totalMonetaryAmount"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): CapitalFlowShippingNoteEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CapitalFlowShippingNoteEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingNoteNumber"] = this.shippingNoteNumber;
        data["totalMonetaryAmount"] = this.totalMonetaryAmount;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): CapitalFlowShippingNoteEditDto {
        const json = this.toJSON();
        let result = new CapitalFlowShippingNoteEditDto();
        result.init(json);
        return result;
    }
}

export interface ICapitalFlowShippingNoteEditDto {
    shippingNoteNumber: string | undefined;
    totalMonetaryAmount: number | undefined;
    remark: string | undefined;
}

export class CapitalFlowFinancialDto implements ICapitalFlowFinancialDto {
    paymentMeansCode: string;
    paymentMeansCodeText: string | undefined;
    bankCode: string | undefined;
    bankCodeText: string | undefined;
    sequenceCode: string;
    monetaryAmount: number;
    dateTime: moment.Moment;

    constructor(data?: ICapitalFlowFinancialDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.paymentMeansCode = data["paymentMeansCode"];
            this.paymentMeansCodeText = data["paymentMeansCodeText"];
            this.bankCode = data["bankCode"];
            this.bankCodeText = data["bankCodeText"];
            this.sequenceCode = data["sequenceCode"];
            this.monetaryAmount = data["monetaryAmount"];
            this.dateTime = data["dateTime"] ? moment(data["dateTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CapitalFlowFinancialDto {
        data = typeof data === 'object' ? data : {};
        let result = new CapitalFlowFinancialDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["paymentMeansCode"] = this.paymentMeansCode;
        data["paymentMeansCodeText"] = this.paymentMeansCodeText;
        data["bankCode"] = this.bankCode;
        data["bankCodeText"] = this.bankCodeText;
        data["sequenceCode"] = this.sequenceCode;
        data["monetaryAmount"] = this.monetaryAmount;
        data["dateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): CapitalFlowFinancialDto {
        const json = this.toJSON();
        let result = new CapitalFlowFinancialDto();
        result.init(json);
        return result;
    }
}

export interface ICapitalFlowFinancialDto {
    paymentMeansCode: string;
    paymentMeansCodeText: string | undefined;
    bankCode: string | undefined;
    bankCodeText: string | undefined;
    sequenceCode: string;
    monetaryAmount: number;
    dateTime: moment.Moment;
}

export class CreateCapitalFlowBillFromElectronicInput implements ICreateCapitalFlowBillFromElectronicInput {
    capitalFlowBill: CapitalFlowBillUnitEditDto | undefined;
    shippingNoteNumbers: string[] | undefined;

    constructor(data?: ICreateCapitalFlowBillFromElectronicInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.capitalFlowBill = data["capitalFlowBill"] ? CapitalFlowBillUnitEditDto.fromJS(data["capitalFlowBill"]) : <any>undefined;
            if (data["shippingNoteNumbers"] && data["shippingNoteNumbers"].constructor === Array) {
                this.shippingNoteNumbers = [] as any;
                for (let item of data["shippingNoteNumbers"])
                    this.shippingNoteNumbers.push(item);
            }
        }
    }

    static fromJS(data: any): CreateCapitalFlowBillFromElectronicInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCapitalFlowBillFromElectronicInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["capitalFlowBill"] = this.capitalFlowBill ? this.capitalFlowBill.toJSON() : <any>undefined;
        if (this.shippingNoteNumbers && this.shippingNoteNumbers.constructor === Array) {
            data["shippingNoteNumbers"] = [];
            for (let item of this.shippingNoteNumbers)
                data["shippingNoteNumbers"].push(item);
        }
        return data; 
    }

    clone(): CreateCapitalFlowBillFromElectronicInput {
        const json = this.toJSON();
        let result = new CreateCapitalFlowBillFromElectronicInput();
        result.init(json);
        return result;
    }
}

export interface ICreateCapitalFlowBillFromElectronicInput {
    capitalFlowBill: CapitalFlowBillUnitEditDto | undefined;
    shippingNoteNumbers: string[] | undefined;
}

export class CapitalFlowBillUnitEditDto implements ICapitalFlowBillUnitEditDto {
    carrier: string;
    vehicleNumber: string;
    licensePlateTypeCode: string;

    constructor(data?: ICapitalFlowBillUnitEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.carrier = data["carrier"];
            this.vehicleNumber = data["vehicleNumber"];
            this.licensePlateTypeCode = data["licensePlateTypeCode"];
        }
    }

    static fromJS(data: any): CapitalFlowBillUnitEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CapitalFlowBillUnitEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carrier"] = this.carrier;
        data["vehicleNumber"] = this.vehicleNumber;
        data["licensePlateTypeCode"] = this.licensePlateTypeCode;
        return data; 
    }

    clone(): CapitalFlowBillUnitEditDto {
        const json = this.toJSON();
        let result = new CapitalFlowBillUnitEditDto();
        result.init(json);
        return result;
    }
}

export interface ICapitalFlowBillUnitEditDto {
    carrier: string;
    vehicleNumber: string;
    licensePlateTypeCode: string;
}

export class CreateOrEditCapitalFlowBillInput implements ICreateOrEditCapitalFlowBillInput {
    capitalFlowBill: CapitalFlowBillEditDto | undefined;
    capitalFlowShippingNotes: CapitalFlowShippingNoteDto[] | undefined;
    capitalFlowFinancials: CapitalFlowFinancialDto[] | undefined;

    constructor(data?: ICreateOrEditCapitalFlowBillInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.capitalFlowBill = data["capitalFlowBill"] ? CapitalFlowBillEditDto.fromJS(data["capitalFlowBill"]) : <any>undefined;
            if (data["capitalFlowShippingNotes"] && data["capitalFlowShippingNotes"].constructor === Array) {
                this.capitalFlowShippingNotes = [] as any;
                for (let item of data["capitalFlowShippingNotes"])
                    this.capitalFlowShippingNotes.push(CapitalFlowShippingNoteDto.fromJS(item));
            }
            if (data["capitalFlowFinancials"] && data["capitalFlowFinancials"].constructor === Array) {
                this.capitalFlowFinancials = [] as any;
                for (let item of data["capitalFlowFinancials"])
                    this.capitalFlowFinancials.push(CapitalFlowFinancialDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrEditCapitalFlowBillInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditCapitalFlowBillInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["capitalFlowBill"] = this.capitalFlowBill ? this.capitalFlowBill.toJSON() : <any>undefined;
        if (this.capitalFlowShippingNotes && this.capitalFlowShippingNotes.constructor === Array) {
            data["capitalFlowShippingNotes"] = [];
            for (let item of this.capitalFlowShippingNotes)
                data["capitalFlowShippingNotes"].push(item.toJSON());
        }
        if (this.capitalFlowFinancials && this.capitalFlowFinancials.constructor === Array) {
            data["capitalFlowFinancials"] = [];
            for (let item of this.capitalFlowFinancials)
                data["capitalFlowFinancials"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateOrEditCapitalFlowBillInput {
        const json = this.toJSON();
        let result = new CreateOrEditCapitalFlowBillInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditCapitalFlowBillInput {
    capitalFlowBill: CapitalFlowBillEditDto | undefined;
    capitalFlowShippingNotes: CapitalFlowShippingNoteDto[] | undefined;
    capitalFlowFinancials: CapitalFlowFinancialDto[] | undefined;
}

export class CapitalFlowShippingNoteDto implements ICapitalFlowShippingNoteDto {
    shippingNoteNumber: string;
    remark: string | undefined;

    constructor(data?: ICapitalFlowShippingNoteDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.shippingNoteNumber = data["shippingNoteNumber"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): CapitalFlowShippingNoteDto {
        data = typeof data === 'object' ? data : {};
        let result = new CapitalFlowShippingNoteDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["shippingNoteNumber"] = this.shippingNoteNumber;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): CapitalFlowShippingNoteDto {
        const json = this.toJSON();
        let result = new CapitalFlowShippingNoteDto();
        result.init(json);
        return result;
    }
}

export interface ICapitalFlowShippingNoteDto {
    shippingNoteNumber: string;
    remark: string | undefined;
}

export class SendCapitalFlowBillInput implements ISendCapitalFlowBillInput {
    capitalFlowBillIds: string[] | undefined;

    constructor(data?: ISendCapitalFlowBillInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["capitalFlowBillIds"] && data["capitalFlowBillIds"].constructor === Array) {
                this.capitalFlowBillIds = [] as any;
                for (let item of data["capitalFlowBillIds"])
                    this.capitalFlowBillIds.push(item);
            }
        }
    }

    static fromJS(data: any): SendCapitalFlowBillInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendCapitalFlowBillInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.capitalFlowBillIds && this.capitalFlowBillIds.constructor === Array) {
            data["capitalFlowBillIds"] = [];
            for (let item of this.capitalFlowBillIds)
                data["capitalFlowBillIds"].push(item);
        }
        return data; 
    }

    clone(): SendCapitalFlowBillInput {
        const json = this.toJSON();
        let result = new SendCapitalFlowBillInput();
        result.init(json);
        return result;
    }
}

export interface ISendCapitalFlowBillInput {
    capitalFlowBillIds: string[] | undefined;
}

export class TrackBrokerCountsListDto implements ITrackBrokerCountsListDto {
    uploadElectronicWayBillCount: number | undefined;
    uploadCapitalFlowBillCount: number | undefined;
    uploadErrorElectronicWayBillCount: number | undefined;
    uploadErrorCapitalFlowBillCount: number | undefined;

    constructor(data?: ITrackBrokerCountsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.uploadElectronicWayBillCount = data["uploadElectronicWayBillCount"];
            this.uploadCapitalFlowBillCount = data["uploadCapitalFlowBillCount"];
            this.uploadErrorElectronicWayBillCount = data["uploadErrorElectronicWayBillCount"];
            this.uploadErrorCapitalFlowBillCount = data["uploadErrorCapitalFlowBillCount"];
        }
    }

    static fromJS(data: any): TrackBrokerCountsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrackBrokerCountsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["uploadElectronicWayBillCount"] = this.uploadElectronicWayBillCount;
        data["uploadCapitalFlowBillCount"] = this.uploadCapitalFlowBillCount;
        data["uploadErrorElectronicWayBillCount"] = this.uploadErrorElectronicWayBillCount;
        data["uploadErrorCapitalFlowBillCount"] = this.uploadErrorCapitalFlowBillCount;
        return data; 
    }

    clone(): TrackBrokerCountsListDto {
        const json = this.toJSON();
        let result = new TrackBrokerCountsListDto();
        result.init(json);
        return result;
    }
}

export interface ITrackBrokerCountsListDto {
    uploadElectronicWayBillCount: number | undefined;
    uploadCapitalFlowBillCount: number | undefined;
    uploadErrorElectronicWayBillCount: number | undefined;
    uploadErrorCapitalFlowBillCount: number | undefined;
}

export class PagedResultDtoOfCapitalFlowBillLogListDto implements IPagedResultDtoOfCapitalFlowBillLogListDto {
    totalCount: number | undefined;
    items: CapitalFlowBillLogListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCapitalFlowBillLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(CapitalFlowBillLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCapitalFlowBillLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCapitalFlowBillLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfCapitalFlowBillLogListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfCapitalFlowBillLogListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfCapitalFlowBillLogListDto {
    totalCount: number | undefined;
    items: CapitalFlowBillLogListDto[] | undefined;
}

export class CapitalFlowBillLogListDto implements ICapitalFlowBillLogListDto {
    messageReferenceNumber: string | undefined;
    documentName: string | undefined;
    documentVersionNumber: string | undefined;
    senderCode: string | undefined;
    recipientCode: string | undefined;
    messageSendingDateTime: moment.Moment | undefined;
    messageFunctionCode: string | undefined;
    documentNumber: string | undefined;
    carrier: string | undefined;
    vehicleNumber: string | undefined;
    licensePlateTypeCode: string | undefined;
    licensePlateTypeCodeText: string | undefined;
    uploadCount: number | undefined;
    uploadStarus: CapitalFlowBillLogListDtoUploadStarus | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ICapitalFlowBillLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.messageReferenceNumber = data["messageReferenceNumber"];
            this.documentName = data["documentName"];
            this.documentVersionNumber = data["documentVersionNumber"];
            this.senderCode = data["senderCode"];
            this.recipientCode = data["recipientCode"];
            this.messageSendingDateTime = data["messageSendingDateTime"] ? moment(data["messageSendingDateTime"].toString()) : <any>undefined;
            this.messageFunctionCode = data["messageFunctionCode"];
            this.documentNumber = data["documentNumber"];
            this.carrier = data["carrier"];
            this.vehicleNumber = data["vehicleNumber"];
            this.licensePlateTypeCode = data["licensePlateTypeCode"];
            this.licensePlateTypeCodeText = data["licensePlateTypeCodeText"];
            this.uploadCount = data["uploadCount"];
            this.uploadStarus = data["uploadStarus"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CapitalFlowBillLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CapitalFlowBillLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageReferenceNumber"] = this.messageReferenceNumber;
        data["documentName"] = this.documentName;
        data["documentVersionNumber"] = this.documentVersionNumber;
        data["senderCode"] = this.senderCode;
        data["recipientCode"] = this.recipientCode;
        data["messageSendingDateTime"] = this.messageSendingDateTime ? this.messageSendingDateTime.toISOString() : <any>undefined;
        data["messageFunctionCode"] = this.messageFunctionCode;
        data["documentNumber"] = this.documentNumber;
        data["carrier"] = this.carrier;
        data["vehicleNumber"] = this.vehicleNumber;
        data["licensePlateTypeCode"] = this.licensePlateTypeCode;
        data["licensePlateTypeCodeText"] = this.licensePlateTypeCodeText;
        data["uploadCount"] = this.uploadCount;
        data["uploadStarus"] = this.uploadStarus;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): CapitalFlowBillLogListDto {
        const json = this.toJSON();
        let result = new CapitalFlowBillLogListDto();
        result.init(json);
        return result;
    }
}

export interface ICapitalFlowBillLogListDto {
    messageReferenceNumber: string | undefined;
    documentName: string | undefined;
    documentVersionNumber: string | undefined;
    senderCode: string | undefined;
    recipientCode: string | undefined;
    messageSendingDateTime: moment.Moment | undefined;
    messageFunctionCode: string | undefined;
    documentNumber: string | undefined;
    carrier: string | undefined;
    vehicleNumber: string | undefined;
    licensePlateTypeCode: string | undefined;
    licensePlateTypeCodeText: string | undefined;
    uploadCount: number | undefined;
    uploadStarus: CapitalFlowBillLogListDtoUploadStarus | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class ListResultDtoOfSysCodeTypeListDto implements IListResultDtoOfSysCodeTypeListDto {
    items: SysCodeTypeListDto[] | undefined;

    constructor(data?: IListResultDtoOfSysCodeTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SysCodeTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSysCodeTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfSysCodeTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfSysCodeTypeListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfSysCodeTypeListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfSysCodeTypeListDto {
    items: SysCodeTypeListDto[] | undefined;
}

export class SysCodeTypeListDto implements ISysCodeTypeListDto {
    value: string | undefined;
    text: string | undefined;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    children: SysCodeTypeListDto[] | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ISysCodeTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.text = data["text"];
            this.description = data["description"];
            this.order = data["order"];
            this.parentId = data["parentId"];
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [] as any;
                for (let item of data["children"])
                    this.children.push(SysCodeTypeListDto.fromJS(item));
            }
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SysCodeTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SysCodeTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        data["description"] = this.description;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): SysCodeTypeListDto {
        const json = this.toJSON();
        let result = new SysCodeTypeListDto();
        result.init(json);
        return result;
    }
}

export interface ISysCodeTypeListDto {
    value: string | undefined;
    text: string | undefined;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    children: SysCodeTypeListDto[] | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfSysCodeListDto implements IPagedResultDtoOfSysCodeListDto {
    totalCount: number | undefined;
    items: SysCodeListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSysCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SysCodeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSysCodeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSysCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSysCodeListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSysCodeListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSysCodeListDto {
    totalCount: number | undefined;
    items: SysCodeListDto[] | undefined;
}

export class SysCodeListDto implements ISysCodeListDto {
    value: string | undefined;
    text: string | undefined;
    parentId: number | undefined;
    order: number | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    description: string | undefined;
    codeTypeId: number | undefined;
    codeTypeValue: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ISysCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.text = data["text"];
            this.parentId = data["parentId"];
            this.order = data["order"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.description = data["description"];
            this.codeTypeId = data["codeTypeId"];
            this.codeTypeValue = data["codeTypeValue"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SysCodeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SysCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        data["parentId"] = this.parentId;
        data["order"] = this.order;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["description"] = this.description;
        data["codeTypeId"] = this.codeTypeId;
        data["codeTypeValue"] = this.codeTypeValue;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): SysCodeListDto {
        const json = this.toJSON();
        let result = new SysCodeListDto();
        result.init(json);
        return result;
    }
}

export interface ISysCodeListDto {
    value: string | undefined;
    text: string | undefined;
    parentId: number | undefined;
    order: number | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    description: string | undefined;
    codeTypeId: number | undefined;
    codeTypeValue: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class GetSysCodeTypeForEditOutput implements IGetSysCodeTypeForEditOutput {
    sysCodeType: SysCodeTypeEditDto | undefined;

    constructor(data?: IGetSysCodeTypeForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sysCodeType = data["sysCodeType"] ? SysCodeTypeEditDto.fromJS(data["sysCodeType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSysCodeTypeForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetSysCodeTypeForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysCodeType"] = this.sysCodeType ? this.sysCodeType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetSysCodeTypeForEditOutput {
        const json = this.toJSON();
        let result = new GetSysCodeTypeForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetSysCodeTypeForEditOutput {
    sysCodeType: SysCodeTypeEditDto | undefined;
}

export class SysCodeTypeEditDto implements ISysCodeTypeEditDto {
    id: number | undefined;
    value: string;
    text: string;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    parent: SysCodeTypeListDto | undefined;

    constructor(data?: ISysCodeTypeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.text = data["text"];
            this.description = data["description"];
            this.order = data["order"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? SysCodeTypeListDto.fromJS(data["parent"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysCodeTypeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SysCodeTypeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["text"] = this.text;
        data["description"] = this.description;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        return data; 
    }

    clone(): SysCodeTypeEditDto {
        const json = this.toJSON();
        let result = new SysCodeTypeEditDto();
        result.init(json);
        return result;
    }
}

export interface ISysCodeTypeEditDto {
    id: number | undefined;
    value: string;
    text: string;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    parent: SysCodeTypeListDto | undefined;
}

export class GetSysCodeForEditOutput implements IGetSysCodeForEditOutput {
    sysCode: SysCodeEditDto | undefined;

    constructor(data?: IGetSysCodeForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sysCode = data["sysCode"] ? SysCodeEditDto.fromJS(data["sysCode"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSysCodeForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetSysCodeForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysCode"] = this.sysCode ? this.sysCode.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetSysCodeForEditOutput {
        const json = this.toJSON();
        let result = new GetSysCodeForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetSysCodeForEditOutput {
    sysCode: SysCodeEditDto | undefined;
}

export class SysCodeEditDto implements ISysCodeEditDto {
    id: number | undefined;
    value: string;
    text: string;
    parentId: number | undefined;
    order: number | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    description: string | undefined;
    codeTypeId: number | undefined;
    codeType: SysCodeTypeListDto | undefined;

    constructor(data?: ISysCodeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.text = data["text"];
            this.parentId = data["parentId"];
            this.order = data["order"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.description = data["description"];
            this.codeTypeId = data["codeTypeId"];
            this.codeType = data["codeType"] ? SysCodeTypeListDto.fromJS(data["codeType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SysCodeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SysCodeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["text"] = this.text;
        data["parentId"] = this.parentId;
        data["order"] = this.order;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["description"] = this.description;
        data["codeTypeId"] = this.codeTypeId;
        data["codeType"] = this.codeType ? this.codeType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): SysCodeEditDto {
        const json = this.toJSON();
        let result = new SysCodeEditDto();
        result.init(json);
        return result;
    }
}

export interface ISysCodeEditDto {
    id: number | undefined;
    value: string;
    text: string;
    parentId: number | undefined;
    order: number | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    description: string | undefined;
    codeTypeId: number | undefined;
    codeType: SysCodeTypeListDto | undefined;
}

export class CreateOrUpdateSysCodeTypeInput implements ICreateOrUpdateSysCodeTypeInput {
    sysCodeType: SysCodeTypeEditDto | undefined;

    constructor(data?: ICreateOrUpdateSysCodeTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sysCodeType = data["sysCodeType"] ? SysCodeTypeEditDto.fromJS(data["sysCodeType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateSysCodeTypeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateSysCodeTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysCodeType"] = this.sysCodeType ? this.sysCodeType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateSysCodeTypeInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateSysCodeTypeInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateSysCodeTypeInput {
    sysCodeType: SysCodeTypeEditDto | undefined;
}

export class CreateOrUpdateSysCodeInput implements ICreateOrUpdateSysCodeInput {
    sysCode: SysCodeEditForSaveDto | undefined;

    constructor(data?: ICreateOrUpdateSysCodeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.sysCode = data["sysCode"] ? SysCodeEditForSaveDto.fromJS(data["sysCode"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateSysCodeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateSysCodeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sysCode"] = this.sysCode ? this.sysCode.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateSysCodeInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateSysCodeInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateSysCodeInput {
    sysCode: SysCodeEditForSaveDto | undefined;
}

export class SysCodeEditForSaveDto implements ISysCodeEditForSaveDto {
    id: number | undefined;
    value: string;
    text: string;
    parentId: number | undefined;
    order: number | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    description: string | undefined;
    codeTypeId: number | undefined;

    constructor(data?: ISysCodeEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.text = data["text"];
            this.parentId = data["parentId"];
            this.order = data["order"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.description = data["description"];
            this.codeTypeId = data["codeTypeId"];
        }
    }

    static fromJS(data: any): SysCodeEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new SysCodeEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["text"] = this.text;
        data["parentId"] = this.parentId;
        data["order"] = this.order;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["description"] = this.description;
        data["codeTypeId"] = this.codeTypeId;
        return data; 
    }

    clone(): SysCodeEditForSaveDto {
        const json = this.toJSON();
        let result = new SysCodeEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface ISysCodeEditForSaveDto {
    id: number | undefined;
    value: string;
    text: string;
    parentId: number | undefined;
    order: number | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    description: string | undefined;
    codeTypeId: number | undefined;
}

export class SelectListItem implements ISelectListItem {
    value: string | undefined;
    text: string | undefined;
    selected: boolean | undefined;

    constructor(data?: ISelectListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.text = data["text"];
            this.selected = data["selected"];
        }
    }

    static fromJS(data: any): SelectListItem {
        data = typeof data === 'object' ? data : {};
        let result = new SelectListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        data["selected"] = this.selected;
        return data; 
    }

    clone(): SelectListItem {
        const json = this.toJSON();
        let result = new SelectListItem();
        result.init(json);
        return result;
    }
}

export interface ISelectListItem {
    value: string | undefined;
    text: string | undefined;
    selected: boolean | undefined;
}

export class ChangeUiThemeInput implements IChangeUiThemeInput {
    theme: string;

    constructor(data?: IChangeUiThemeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.theme = data["theme"];
        }
    }

    static fromJS(data: any): ChangeUiThemeInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUiThemeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["theme"] = this.theme;
        return data; 
    }

    clone(): ChangeUiThemeInput {
        const json = this.toJSON();
        let result = new ChangeUiThemeInput();
        result.init(json);
        return result;
    }
}

export interface IChangeUiThemeInput {
    theme: string;
}

export class AppSettingEditDto implements IAppSettingEditDto {
    exchangeHub: ExchangeHubTenantSettingEditDto | undefined;
    objectStorage: ObjectStorageEditDto | undefined;

    constructor(data?: IAppSettingEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.exchangeHub = data["exchangeHub"] ? ExchangeHubTenantSettingEditDto.fromJS(data["exchangeHub"]) : <any>undefined;
            this.objectStorage = data["objectStorage"] ? ObjectStorageEditDto.fromJS(data["objectStorage"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AppSettingEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new AppSettingEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exchangeHub"] = this.exchangeHub ? this.exchangeHub.toJSON() : <any>undefined;
        data["objectStorage"] = this.objectStorage ? this.objectStorage.toJSON() : <any>undefined;
        return data; 
    }

    clone(): AppSettingEditDto {
        const json = this.toJSON();
        let result = new AppSettingEditDto();
        result.init(json);
        return result;
    }
}

export interface IAppSettingEditDto {
    exchangeHub: ExchangeHubTenantSettingEditDto | undefined;
    objectStorage: ObjectStorageEditDto | undefined;
}

export class ExchangeHubTenantSettingEditDto implements IExchangeHubTenantSettingEditDto {
    /** 基地址 */
    baseUrl: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 密码 */
    password: string | undefined;
    accessTokenExpires: string | undefined;

    constructor(data?: IExchangeHubTenantSettingEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.baseUrl = data["baseUrl"];
            this.userName = data["userName"];
            this.password = data["password"];
            this.accessTokenExpires = data["accessTokenExpires"];
        }
    }

    static fromJS(data: any): ExchangeHubTenantSettingEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ExchangeHubTenantSettingEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["baseUrl"] = this.baseUrl;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["accessTokenExpires"] = this.accessTokenExpires;
        return data; 
    }

    clone(): ExchangeHubTenantSettingEditDto {
        const json = this.toJSON();
        let result = new ExchangeHubTenantSettingEditDto();
        result.init(json);
        return result;
    }
}

export interface IExchangeHubTenantSettingEditDto {
    /** 基地址 */
    baseUrl: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 密码 */
    password: string | undefined;
    accessTokenExpires: string | undefined;
}

export class ObjectStorageEditDto implements IObjectStorageEditDto {
    /** 基地址 */
    baseUrl: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 密码 */
    password: string | undefined;

    constructor(data?: IObjectStorageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.baseUrl = data["baseUrl"];
            this.userName = data["userName"];
            this.password = data["password"];
        }
    }

    static fromJS(data: any): ObjectStorageEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectStorageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["baseUrl"] = this.baseUrl;
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data; 
    }

    clone(): ObjectStorageEditDto {
        const json = this.toJSON();
        let result = new ObjectStorageEditDto();
        result.init(json);
        return result;
    }
}

export interface IObjectStorageEditDto {
    /** 基地址 */
    baseUrl: string | undefined;
    /** 用户名 */
    userName: string | undefined;
    /** 密码 */
    password: string | undefined;
}

export class TenantSettingEditDto implements ITenantSettingEditDto {
    trackBroker: TrackBrokerEditDto | undefined;
    personalize: PersonalizeEditDto | undefined;

    constructor(data?: ITenantSettingEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.trackBroker = data["trackBroker"] ? TrackBrokerEditDto.fromJS(data["trackBroker"]) : <any>undefined;
            this.personalize = data["personalize"] ? PersonalizeEditDto.fromJS(data["personalize"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TenantSettingEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantSettingEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["trackBroker"] = this.trackBroker ? this.trackBroker.toJSON() : <any>undefined;
        data["personalize"] = this.personalize ? this.personalize.toJSON() : <any>undefined;
        return data; 
    }

    clone(): TenantSettingEditDto {
        const json = this.toJSON();
        let result = new TenantSettingEditDto();
        result.init(json);
        return result;
    }
}

export interface ITenantSettingEditDto {
    trackBroker: TrackBrokerEditDto | undefined;
    personalize: PersonalizeEditDto | undefined;
}

export class TrackBrokerEditDto implements ITrackBrokerEditDto {
    capitalFlowBillDocumentName: string;
    electronicWayBillDocumentName: string;
    documentVersionNumber: string;
    senderCode: string;
    recipientCode: string;
    messageFunctionCode: string;

    constructor(data?: ITrackBrokerEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.capitalFlowBillDocumentName = data["capitalFlowBillDocumentName"];
            this.electronicWayBillDocumentName = data["electronicWayBillDocumentName"];
            this.documentVersionNumber = data["documentVersionNumber"];
            this.senderCode = data["senderCode"];
            this.recipientCode = data["recipientCode"];
            this.messageFunctionCode = data["messageFunctionCode"];
        }
    }

    static fromJS(data: any): TrackBrokerEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TrackBrokerEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["capitalFlowBillDocumentName"] = this.capitalFlowBillDocumentName;
        data["electronicWayBillDocumentName"] = this.electronicWayBillDocumentName;
        data["documentVersionNumber"] = this.documentVersionNumber;
        data["senderCode"] = this.senderCode;
        data["recipientCode"] = this.recipientCode;
        data["messageFunctionCode"] = this.messageFunctionCode;
        return data; 
    }

    clone(): TrackBrokerEditDto {
        const json = this.toJSON();
        let result = new TrackBrokerEditDto();
        result.init(json);
        return result;
    }
}

export interface ITrackBrokerEditDto {
    capitalFlowBillDocumentName: string;
    electronicWayBillDocumentName: string;
    documentVersionNumber: string;
    senderCode: string;
    recipientCode: string;
    messageFunctionCode: string;
}

export class PersonalizeEditDto implements IPersonalizeEditDto {
    logoImages: string;
    applicationTitle: string;
    isDefault: boolean | undefined;

    constructor(data?: IPersonalizeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.logoImages = data["logoImages"];
            this.applicationTitle = data["applicationTitle"];
            this.isDefault = data["isDefault"];
        }
    }

    static fromJS(data: any): PersonalizeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonalizeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logoImages"] = this.logoImages;
        data["applicationTitle"] = this.applicationTitle;
        data["isDefault"] = this.isDefault;
        return data; 
    }

    clone(): PersonalizeEditDto {
        const json = this.toJSON();
        let result = new PersonalizeEditDto();
        result.init(json);
        return result;
    }
}

export interface IPersonalizeEditDto {
    logoImages: string;
    applicationTitle: string;
    isDefault: boolean | undefined;
}

export class ImageOutputDtos implements IImageOutputDtos {
    /** 文件类型
image/file/video */
    contentType: string | undefined;
    size: number | undefined;
    /** 文件名称，包含扩展名 */
    fileName: string | undefined;
    /** 二进制流 */
    bytes: string | undefined;

    constructor(data?: IImageOutputDtos) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentType = data["contentType"];
            this.size = data["size"];
            this.fileName = data["fileName"];
            this.bytes = data["bytes"];
        }
    }

    static fromJS(data: any): ImageOutputDtos {
        data = typeof data === 'object' ? data : {};
        let result = new ImageOutputDtos();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentType"] = this.contentType;
        data["size"] = this.size;
        data["fileName"] = this.fileName;
        data["bytes"] = this.bytes;
        return data; 
    }

    clone(): ImageOutputDtos {
        const json = this.toJSON();
        let result = new ImageOutputDtos();
        result.init(json);
        return result;
    }
}

export interface IImageOutputDtos {
    /** 文件类型
image/file/video */
    contentType: string | undefined;
    size: number | undefined;
    /** 文件名称，包含扩展名 */
    fileName: string | undefined;
    /** 二进制流 */
    bytes: string | undefined;
}

export class PersonalizeImageEditDto implements IPersonalizeImageEditDto {
    logoImages: string;
    applicationTitle: string;
    image: ImageDtos | undefined;

    constructor(data?: IPersonalizeImageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.logoImages = data["logoImages"];
            this.applicationTitle = data["applicationTitle"];
            this.image = data["image"] ? ImageDtos.fromJS(data["image"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersonalizeImageEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PersonalizeImageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["logoImages"] = this.logoImages;
        data["applicationTitle"] = this.applicationTitle;
        data["image"] = this.image ? this.image.toJSON() : <any>undefined;
        return data; 
    }

    clone(): PersonalizeImageEditDto {
        const json = this.toJSON();
        let result = new PersonalizeImageEditDto();
        result.init(json);
        return result;
    }
}

export interface IPersonalizeImageEditDto {
    logoImages: string;
    applicationTitle: string;
    image: ImageDtos | undefined;
}

export class ImageDtos implements IImageDtos {
    /** 文件类型
image/file/video */
    contentType: string | undefined;
    size: number | undefined;
    /** 文件名称，包含扩展名 */
    fileName: string;
    /** 二进制流 */
    bytes: string;

    constructor(data?: IImageDtos) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.contentType = data["contentType"];
            this.size = data["size"];
            this.fileName = data["fileName"];
            this.bytes = data["bytes"];
        }
    }

    static fromJS(data: any): ImageDtos {
        data = typeof data === 'object' ? data : {};
        let result = new ImageDtos();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["contentType"] = this.contentType;
        data["size"] = this.size;
        data["fileName"] = this.fileName;
        data["bytes"] = this.bytes;
        return data; 
    }

    clone(): ImageDtos {
        const json = this.toJSON();
        let result = new ImageDtos();
        result.init(json);
        return result;
    }
}

export interface IImageDtos {
    /** 文件类型
image/file/video */
    contentType: string | undefined;
    size: number | undefined;
    /** 文件名称，包含扩展名 */
    fileName: string;
    /** 二进制流 */
    bytes: string;
}

export class DataConvertInput implements IDataConvertInput {
    /** 公司（对应客户） */
    company: string | undefined;
    /** 工厂（卸地） */
    factory: string | undefined;
    /** 货物类型（对应货类） */
    coalClassify: string | undefined;
    cargoCategoryText: string | undefined;
    /** 煤种编号（对应物品） */
    coalCode: string | undefined;
    /** 供应商号（对应装地） */
    supplierNumber: string | undefined;

    constructor(data?: IDataConvertInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.company = data["company"];
            this.factory = data["factory"];
            this.coalClassify = data["coalClassify"];
            this.cargoCategoryText = data["cargoCategoryText"];
            this.coalCode = data["coalCode"];
            this.supplierNumber = data["supplierNumber"];
        }
    }

    static fromJS(data: any): DataConvertInput {
        data = typeof data === 'object' ? data : {};
        let result = new DataConvertInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["company"] = this.company;
        data["factory"] = this.factory;
        data["coalClassify"] = this.coalClassify;
        data["cargoCategoryText"] = this.cargoCategoryText;
        data["coalCode"] = this.coalCode;
        data["supplierNumber"] = this.supplierNumber;
        return data; 
    }

    clone(): DataConvertInput {
        const json = this.toJSON();
        let result = new DataConvertInput();
        result.init(json);
        return result;
    }
}

export interface IDataConvertInput {
    /** 公司（对应客户） */
    company: string | undefined;
    /** 工厂（卸地） */
    factory: string | undefined;
    /** 货物类型（对应货类） */
    coalClassify: string | undefined;
    cargoCategoryText: string | undefined;
    /** 煤种编号（对应物品） */
    coalCode: string | undefined;
    /** 供应商号（对应装地） */
    supplierNumber: string | undefined;
}

export class DataConvertOutput implements IDataConvertOutput {
    /** 客户 */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;

    constructor(data?: IDataConvertOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
            this.shipper = data["shipper"];
            this.receiver = data["receiver"];
            this.loadPlaceId = data["loadPlaceId"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.cargoCategory = data["cargoCategory"];
            this.cargoVarietyId = data["cargoVarietyId"];
        }
    }

    static fromJS(data: any): DataConvertOutput {
        data = typeof data === 'object' ? data : {};
        let result = new DataConvertOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        data["shipper"] = this.shipper;
        data["receiver"] = this.receiver;
        data["loadPlaceId"] = this.loadPlaceId;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["cargoCategory"] = this.cargoCategory;
        data["cargoVarietyId"] = this.cargoVarietyId;
        return data; 
    }

    clone(): DataConvertOutput {
        const json = this.toJSON();
        let result = new DataConvertOutput();
        result.init(json);
        return result;
    }
}

export interface IDataConvertOutput {
    /** 客户 */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
}

export class MESTransportInput implements IMESTransportInput {
    systemName: string | undefined;
    detail: string | undefined;
    transportCode: string | undefined;

    constructor(data?: IMESTransportInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.systemName = data["systemName"];
            this.detail = data["detail"];
            this.transportCode = data["transportCode"];
        }
    }

    static fromJS(data: any): MESTransportInput {
        data = typeof data === 'object' ? data : {};
        let result = new MESTransportInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["systemName"] = this.systemName;
        data["detail"] = this.detail;
        data["transportCode"] = this.transportCode;
        return data; 
    }

    clone(): MESTransportInput {
        const json = this.toJSON();
        let result = new MESTransportInput();
        result.init(json);
        return result;
    }
}

export interface IMESTransportInput {
    systemName: string | undefined;
    detail: string | undefined;
    transportCode: string | undefined;
}

export class PagedResultDtoOfCustomerListDto implements IPagedResultDtoOfCustomerListDto {
    totalCount: number | undefined;
    items: CustomerListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCustomerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(CustomerListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCustomerListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCustomerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfCustomerListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfCustomerListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfCustomerListDto {
    totalCount: number | undefined;
    items: CustomerListDto[] | undefined;
}

export class CustomerListDto implements ICustomerListDto {
    code: string | undefined;
    name: string | undefined;
    type: string | undefined;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    /** 是否同时为供应商 */
    isDefault: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    description: string | undefined;
    organizationUnitName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ICustomerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.type = data["type"];
            this.isInner = data["isInner"];
            this.isDefault = data["isDefault"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.taxRegistrationNumber = data["taxRegistrationNumber"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.unifiedSocialCreditCode = data["unifiedSocialCreditCode"];
            this.organizationCodeCertificate = data["organizationCodeCertificate"];
            this.businessLicence = data["businessLicence"];
            this.taxpayerIdentityNumber = data["taxpayerIdentityNumber"];
            this.bankAccount = data["bankAccount"];
            this.legalPerson = data["legalPerson"];
            this.legalResidentIdentity = data["legalResidentIdentity"];
            this.isEnable = data["isEnable"];
            this.description = data["description"];
            this.organizationUnitName = data["organizationUnitName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CustomerListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["isInner"] = this.isInner;
        data["isDefault"] = this.isDefault;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["taxRegistrationNumber"] = this.taxRegistrationNumber;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["unifiedSocialCreditCode"] = this.unifiedSocialCreditCode;
        data["organizationCodeCertificate"] = this.organizationCodeCertificate;
        data["businessLicence"] = this.businessLicence;
        data["taxpayerIdentityNumber"] = this.taxpayerIdentityNumber;
        data["bankAccount"] = this.bankAccount;
        data["legalPerson"] = this.legalPerson;
        data["legalResidentIdentity"] = this.legalResidentIdentity;
        data["isEnable"] = this.isEnable;
        data["description"] = this.description;
        data["organizationUnitName"] = this.organizationUnitName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): CustomerListDto {
        const json = this.toJSON();
        let result = new CustomerListDto();
        result.init(json);
        return result;
    }
}

export interface ICustomerListDto {
    code: string | undefined;
    name: string | undefined;
    type: string | undefined;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    /** 是否同时为供应商 */
    isDefault: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    description: string | undefined;
    organizationUnitName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class ListResultDtoOfCustomerListDto implements IListResultDtoOfCustomerListDto {
    items: CustomerListDto[] | undefined;

    constructor(data?: IListResultDtoOfCustomerListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(CustomerListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfCustomerListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfCustomerListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfCustomerListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfCustomerListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfCustomerListDto {
    items: CustomerListDto[] | undefined;
}

export class GetCustomerForEditOutput implements IGetCustomerForEditOutput {
    customer: CustomerEditDto | undefined;

    constructor(data?: IGetCustomerForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customer = data["customer"] ? CustomerEditDto.fromJS(data["customer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCustomerForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCustomerForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetCustomerForEditOutput {
        const json = this.toJSON();
        let result = new GetCustomerForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCustomerForEditOutput {
    customer: CustomerEditDto | undefined;
}

export class CustomerEditDto implements ICustomerEditDto {
    id: number | undefined;
    organizationUnitId: number | undefined;
    code: string;
    name: string;
    type: string;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    /** 是否同时为供应商 */
    isDefault: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 备注 */
    description: string | undefined;

    constructor(data?: ICustomerEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.code = data["code"];
            this.name = data["name"];
            this.type = data["type"];
            this.isInner = data["isInner"];
            this.isDefault = data["isDefault"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.taxRegistrationNumber = data["taxRegistrationNumber"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.unifiedSocialCreditCode = data["unifiedSocialCreditCode"];
            this.organizationCodeCertificate = data["organizationCodeCertificate"];
            this.businessLicence = data["businessLicence"];
            this.taxpayerIdentityNumber = data["taxpayerIdentityNumber"];
            this.bankAccount = data["bankAccount"];
            this.legalPerson = data["legalPerson"];
            this.legalResidentIdentity = data["legalResidentIdentity"];
            this.isEnable = data["isEnable"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): CustomerEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["isInner"] = this.isInner;
        data["isDefault"] = this.isDefault;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["taxRegistrationNumber"] = this.taxRegistrationNumber;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["unifiedSocialCreditCode"] = this.unifiedSocialCreditCode;
        data["organizationCodeCertificate"] = this.organizationCodeCertificate;
        data["businessLicence"] = this.businessLicence;
        data["taxpayerIdentityNumber"] = this.taxpayerIdentityNumber;
        data["bankAccount"] = this.bankAccount;
        data["legalPerson"] = this.legalPerson;
        data["legalResidentIdentity"] = this.legalResidentIdentity;
        data["isEnable"] = this.isEnable;
        data["description"] = this.description;
        return data; 
    }

    clone(): CustomerEditDto {
        const json = this.toJSON();
        let result = new CustomerEditDto();
        result.init(json);
        return result;
    }
}

export interface ICustomerEditDto {
    id: number | undefined;
    organizationUnitId: number | undefined;
    code: string;
    name: string;
    type: string;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    /** 是否同时为供应商 */
    isDefault: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 备注 */
    description: string | undefined;
}

export class CreateOrEditCustomerInput implements ICreateOrEditCustomerInput {
    customer: CustomerEditDto | undefined;

    constructor(data?: ICreateOrEditCustomerInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customer = data["customer"] ? CustomerEditDto.fromJS(data["customer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditCustomerInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditCustomerInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customer"] = this.customer ? this.customer.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditCustomerInput {
        const json = this.toJSON();
        let result = new CreateOrEditCustomerInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditCustomerInput {
    customer: CustomerEditDto | undefined;
}

export class GetCustomerForEditByIdOutput implements IGetCustomerForEditByIdOutput {
    customerId: number | undefined;

    constructor(data?: IGetCustomerForEditByIdOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"];
        }
    }

    static fromJS(data: any): GetCustomerForEditByIdOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCustomerForEditByIdOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId;
        return data; 
    }

    clone(): GetCustomerForEditByIdOutput {
        const json = this.toJSON();
        let result = new GetCustomerForEditByIdOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCustomerForEditByIdOutput {
    customerId: number | undefined;
}

export class CreateCustomerFromExcelInput implements ICreateCustomerFromExcelInput {
    fileContent: string | undefined;

    constructor(data?: ICreateCustomerFromExcelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileContent = data["fileContent"];
        }
    }

    static fromJS(data: any): CreateCustomerFromExcelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCustomerFromExcelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileContent"] = this.fileContent;
        return data; 
    }

    clone(): CreateCustomerFromExcelInput {
        const json = this.toJSON();
        let result = new CreateCustomerFromExcelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateCustomerFromExcelInput {
    fileContent: string | undefined;
}

export class CustomerImportingReturnDto implements ICustomerImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;

    constructor(data?: ICustomerImportingReturnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): CustomerImportingReturnDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerImportingReturnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): CustomerImportingReturnDto {
        const json = this.toJSON();
        let result = new CustomerImportingReturnDto();
        result.init(json);
        return result;
    }
}

export interface ICustomerImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;
}

export class PagedResultDtoOfCustomerDispatchingVehicleGroupListDto implements IPagedResultDtoOfCustomerDispatchingVehicleGroupListDto {
    totalCount: number | undefined;
    items: CustomerDispatchingVehicleGroupListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCustomerDispatchingVehicleGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(CustomerDispatchingVehicleGroupListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCustomerDispatchingVehicleGroupListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCustomerDispatchingVehicleGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfCustomerDispatchingVehicleGroupListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfCustomerDispatchingVehicleGroupListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfCustomerDispatchingVehicleGroupListDto {
    totalCount: number | undefined;
    items: CustomerDispatchingVehicleGroupListDto[] | undefined;
}

export class CustomerDispatchingVehicleGroupListDto implements ICustomerDispatchingVehicleGroupListDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 业务单位名称 */
    organizationUnitName: string | undefined;
    /** 客户(收货人) */
    customerId: number | undefined;
    /** 客户名称 */
    customerName: string | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 派车分组文本 */
    groupText: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 是否上传资料 */
    isUpLoad: boolean | undefined;
    id: string | undefined;

    constructor(data?: ICustomerDispatchingVehicleGroupListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.customerId = data["customerId"];
            this.customerName = data["customerName"];
            this.group = data["group"];
            this.groupText = data["groupText"];
            this.remark = data["remark"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.isUpLoad = data["isUpLoad"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CustomerDispatchingVehicleGroupListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDispatchingVehicleGroupListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["group"] = this.group;
        data["groupText"] = this.groupText;
        data["remark"] = this.remark;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["isUpLoad"] = this.isUpLoad;
        data["id"] = this.id;
        return data; 
    }

    clone(): CustomerDispatchingVehicleGroupListDto {
        const json = this.toJSON();
        let result = new CustomerDispatchingVehicleGroupListDto();
        result.init(json);
        return result;
    }
}

export interface ICustomerDispatchingVehicleGroupListDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 业务单位名称 */
    organizationUnitName: string | undefined;
    /** 客户(收货人) */
    customerId: number | undefined;
    /** 客户名称 */
    customerName: string | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 派车分组文本 */
    groupText: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 是否上传资料 */
    isUpLoad: boolean | undefined;
    id: string | undefined;
}

export class CustomerDispatchingVehicleGroupEditDto implements ICustomerDispatchingVehicleGroupEditDto {
    id: string | undefined;
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 客户(收货人) */
    customerId: number | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    /** 是否上传资料 */
    isUpLoad: boolean | undefined;

    constructor(data?: ICustomerDispatchingVehicleGroupEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.customerId = data["customerId"];
            this.group = data["group"];
            this.remark = data["remark"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.isUpLoad = data["isUpLoad"];
        }
    }

    static fromJS(data: any): CustomerDispatchingVehicleGroupEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerDispatchingVehicleGroupEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerId"] = this.customerId;
        data["group"] = this.group;
        data["remark"] = this.remark;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["isUpLoad"] = this.isUpLoad;
        return data; 
    }

    clone(): CustomerDispatchingVehicleGroupEditDto {
        const json = this.toJSON();
        let result = new CustomerDispatchingVehicleGroupEditDto();
        result.init(json);
        return result;
    }
}

export interface ICustomerDispatchingVehicleGroupEditDto {
    id: string | undefined;
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 客户(收货人) */
    customerId: number | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    /** 是否上传资料 */
    isUpLoad: boolean | undefined;
}

export class PagedResultDtoOfCustomerThirdPartyListDto implements IPagedResultDtoOfCustomerThirdPartyListDto {
    totalCount: number | undefined;
    items: CustomerThirdPartyListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfCustomerThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(CustomerThirdPartyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfCustomerThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfCustomerThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfCustomerThirdPartyListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfCustomerThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfCustomerThirdPartyListDto {
    totalCount: number | undefined;
    items: CustomerThirdPartyListDto[] | undefined;
}

export class CustomerThirdPartyListDto implements ICustomerThirdPartyListDto {
    thirdPartyCode: string | undefined;
    /** 客户号 */
    customerId: number | undefined;
    customerName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ICustomerThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartyCode = data["thirdPartyCode"];
            this.customerId = data["customerId"];
            this.customerName = data["customerName"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): CustomerThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): CustomerThirdPartyListDto {
        const json = this.toJSON();
        let result = new CustomerThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface ICustomerThirdPartyListDto {
    thirdPartyCode: string | undefined;
    /** 客户号 */
    customerId: number | undefined;
    customerName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CustomerThirdPartyEditDto implements ICustomerThirdPartyEditDto {
    id: string | undefined;
    /** 第三方组织机构号 */
    thirdPartyCode: string;
    /** 客户号 */
    customerId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;

    constructor(data?: ICustomerThirdPartyEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.customerId = data["customerId"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
        }
    }

    static fromJS(data: any): CustomerThirdPartyEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new CustomerThirdPartyEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["customerId"] = this.customerId;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        return data; 
    }

    clone(): CustomerThirdPartyEditDto {
        const json = this.toJSON();
        let result = new CustomerThirdPartyEditDto();
        result.init(json);
        return result;
    }
}

export interface ICustomerThirdPartyEditDto {
    id: string | undefined;
    /** 第三方组织机构号 */
    thirdPartyCode: string;
    /** 客户号 */
    customerId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;
}

export class PagedResultDtoOfTransContractRecordListDto implements IPagedResultDtoOfTransContractRecordListDto {
    totalCount: number | undefined;
    items: TransContractRecordListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransContractRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransContractRecordListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransContractRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransContractRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransContractRecordListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransContractRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransContractRecordListDto {
    totalCount: number | undefined;
    items: TransContractRecordListDto[] | undefined;
}

export class TransContractRecordListDto implements ITransContractRecordListDto {
    /** 业务单位 */
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    customerIdName: string | undefined;
    shipper: number | undefined;
    shipperName: string | undefined;
    receiver: number | undefined;
    receiverName: string | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    customerServiceOfficerName: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 合同号/备案号 */
    documentNumber: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 合同状态（数据字典维护） */
    recordStatus: string | undefined;
    recordStatusText: string | undefined;
    statusRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    type: string | undefined;
    typeText: string | undefined;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    /** 是否为个人客户 */
    isPersonal: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITransContractRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.orgUnitName = data["orgUnitName"];
            this.customerId = data["customerId"];
            this.customerIdName = data["customerIdName"];
            this.shipper = data["shipper"];
            this.shipperName = data["shipperName"];
            this.receiver = data["receiver"];
            this.receiverName = data["receiverName"];
            this.customerServiceOfficer = data["customerServiceOfficer"];
            this.customerServiceOfficerName = data["customerServiceOfficerName"];
            this.useQualifications = data["useQualifications"];
            this.useQualificationsText = data["useQualificationsText"];
            this.documentNumber = data["documentNumber"];
            this.recordDate = data["recordDate"] ? moment(data["recordDate"].toString()) : <any>undefined;
            this.recordStatus = data["recordStatus"];
            this.recordStatusText = data["recordStatusText"];
            this.statusRemark = data["statusRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.type = data["type"];
            this.typeText = data["typeText"];
            this.isInner = data["isInner"];
            this.isPersonal = data["isPersonal"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.remark = data["remark"];
            this.beRecorder = data["beRecorder"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransContractRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["orgUnitName"] = this.orgUnitName;
        data["customerId"] = this.customerId;
        data["customerIdName"] = this.customerIdName;
        data["shipper"] = this.shipper;
        data["shipperName"] = this.shipperName;
        data["receiver"] = this.receiver;
        data["receiverName"] = this.receiverName;
        data["customerServiceOfficer"] = this.customerServiceOfficer;
        data["customerServiceOfficerName"] = this.customerServiceOfficerName;
        data["useQualifications"] = this.useQualifications;
        data["useQualificationsText"] = this.useQualificationsText;
        data["documentNumber"] = this.documentNumber;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["recordStatus"] = this.recordStatus;
        data["recordStatusText"] = this.recordStatusText;
        data["statusRemark"] = this.statusRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["typeText"] = this.typeText;
        data["isInner"] = this.isInner;
        data["isPersonal"] = this.isPersonal;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["remark"] = this.remark;
        data["beRecorder"] = this.beRecorder;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransContractRecordListDto {
        const json = this.toJSON();
        let result = new TransContractRecordListDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractRecordListDto {
    /** 业务单位 */
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    customerIdName: string | undefined;
    shipper: number | undefined;
    shipperName: string | undefined;
    receiver: number | undefined;
    receiverName: string | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    customerServiceOfficerName: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 合同号/备案号 */
    documentNumber: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 合同状态（数据字典维护） */
    recordStatus: string | undefined;
    recordStatusText: string | undefined;
    statusRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    type: string | undefined;
    typeText: string | undefined;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    /** 是否为个人客户 */
    isPersonal: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfTransContractRecordForMoreListDto implements IPagedResultDtoOfTransContractRecordForMoreListDto {
    totalCount: number | undefined;
    items: TransContractRecordForMoreListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransContractRecordForMoreListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransContractRecordForMoreListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransContractRecordForMoreListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransContractRecordForMoreListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransContractRecordForMoreListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransContractRecordForMoreListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransContractRecordForMoreListDto {
    totalCount: number | undefined;
    items: TransContractRecordForMoreListDto[] | undefined;
}

export class TransContractRecordForMoreListDto implements ITransContractRecordForMoreListDto {
    id: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    customerIdName: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 合同号/备案号 */
    documentNumber: string | undefined;
    /** 业务单位名称 */
    orgUnitName: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 合同状态（数据字典维护） */
    recordStatus: string | undefined;
    recordStatusText: string | undefined;
    /** 是否从备案参考 */
    isFromPrior: boolean | undefined;
    headerId: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    unloadPlaceTypeText: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    cargoText: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 集团开票税率 */
    groupTaxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    customerPricingMethodText: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    weightStandardText: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    accountPeriodText: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    customWeightStandardText: string | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    transportTypeText: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    taskAreaText: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    transportDistanceText: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    tonRemoveEndModeText: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    expenseRemoveEndModeText: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    cutTonModeText: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;

    constructor(data?: ITransContractRecordForMoreListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.customerId = data["customerId"];
            this.customerIdName = data["customerIdName"];
            this.useQualifications = data["useQualifications"];
            this.useQualificationsText = data["useQualificationsText"];
            this.documentNumber = data["documentNumber"];
            this.orgUnitName = data["orgUnitName"];
            this.recordDate = data["recordDate"] ? moment(data["recordDate"].toString()) : <any>undefined;
            this.recordStatus = data["recordStatus"];
            this.recordStatusText = data["recordStatusText"];
            this.isFromPrior = data["isFromPrior"];
            this.headerId = data["headerId"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceIdName = data["loadPlaceIdName"];
            this.loadPlaceType = data["loadPlaceType"];
            this.loadPlaceTypeText = data["loadPlaceTypeText"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.unloadPlaceType = data["unloadPlaceType"];
            this.unloadPlaceTypeText = data["unloadPlaceTypeText"];
            this.cargo = data["cargo"];
            this.cargoText = data["cargoText"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.cargoVarietyIdName = data["cargoVarietyIdName"];
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.customerIdPrice = data["customerIdPrice"];
            this.singleTruckPrice = data["singleTruckPrice"];
            this.taxRate = data["taxRate"];
            this.groupTaxRate = data["groupTaxRate"];
            this.isHaveTax = data["isHaveTax"];
            this.isBelongMy = data["isBelongMy"];
            this.estimatedStartDate = data["estimatedStartDate"] ? moment(data["estimatedStartDate"].toString()) : <any>undefined;
            this.customerPricingMethod = data["customerPricingMethod"];
            this.customerPricingMethodText = data["customerPricingMethodText"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxReceiptTypeText = data["taxReceiptTypeText"];
            this.weightStandard = data["weightStandard"];
            this.weightStandardText = data["weightStandardText"];
            this.accountPeriod = data["accountPeriod"];
            this.accountPeriodText = data["accountPeriodText"];
            this.customWeightStandard = data["customWeightStandard"];
            this.customWeightStandardText = data["customWeightStandardText"];
            this.transportType = data["transportType"];
            this.transportTypeText = data["transportTypeText"];
            this.taskArea = data["taskArea"];
            this.taskAreaText = data["taskAreaText"];
            this.transportDistance = data["transportDistance"];
            this.transportDistanceText = data["transportDistanceText"];
            this.shipName = data["shipName"];
            this.tonRemoveEndMode = data["tonRemoveEndMode"];
            this.tonRemoveEndModeText = data["tonRemoveEndModeText"];
            this.expenseRemoveEndMode = data["expenseRemoveEndMode"];
            this.expenseRemoveEndModeText = data["expenseRemoveEndModeText"];
            this.cutTonMode = data["cutTonMode"];
            this.cutTonModeText = data["cutTonModeText"];
            this.fixedCutTon = data["fixedCutTon"];
            this.lossRangeTon = data["lossRangeTon"];
            this.lossDeductionPrice = data["lossDeductionPrice"];
            this.remark = data["remark"];
            this.creatorUserId = data["creatorUserId"];
            this.beRecorder = data["beRecorder"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TransContractRecordForMoreListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractRecordForMoreListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerId"] = this.customerId;
        data["customerIdName"] = this.customerIdName;
        data["useQualifications"] = this.useQualifications;
        data["useQualificationsText"] = this.useQualificationsText;
        data["documentNumber"] = this.documentNumber;
        data["orgUnitName"] = this.orgUnitName;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["recordStatus"] = this.recordStatus;
        data["recordStatusText"] = this.recordStatusText;
        data["isFromPrior"] = this.isFromPrior;
        data["headerId"] = this.headerId;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceIdName"] = this.loadPlaceIdName;
        data["loadPlaceType"] = this.loadPlaceType;
        data["loadPlaceTypeText"] = this.loadPlaceTypeText;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["unloadPlaceType"] = this.unloadPlaceType;
        data["unloadPlaceTypeText"] = this.unloadPlaceTypeText;
        data["cargo"] = this.cargo;
        data["cargoText"] = this.cargoText;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["cargoVarietyIdName"] = this.cargoVarietyIdName;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["customerIdPrice"] = this.customerIdPrice;
        data["singleTruckPrice"] = this.singleTruckPrice;
        data["taxRate"] = this.taxRate;
        data["groupTaxRate"] = this.groupTaxRate;
        data["isHaveTax"] = this.isHaveTax;
        data["isBelongMy"] = this.isBelongMy;
        data["estimatedStartDate"] = this.estimatedStartDate ? this.estimatedStartDate.toISOString() : <any>undefined;
        data["customerPricingMethod"] = this.customerPricingMethod;
        data["customerPricingMethodText"] = this.customerPricingMethodText;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxReceiptTypeText"] = this.taxReceiptTypeText;
        data["weightStandard"] = this.weightStandard;
        data["weightStandardText"] = this.weightStandardText;
        data["accountPeriod"] = this.accountPeriod;
        data["accountPeriodText"] = this.accountPeriodText;
        data["customWeightStandard"] = this.customWeightStandard;
        data["customWeightStandardText"] = this.customWeightStandardText;
        data["transportType"] = this.transportType;
        data["transportTypeText"] = this.transportTypeText;
        data["taskArea"] = this.taskArea;
        data["taskAreaText"] = this.taskAreaText;
        data["transportDistance"] = this.transportDistance;
        data["transportDistanceText"] = this.transportDistanceText;
        data["shipName"] = this.shipName;
        data["tonRemoveEndMode"] = this.tonRemoveEndMode;
        data["tonRemoveEndModeText"] = this.tonRemoveEndModeText;
        data["expenseRemoveEndMode"] = this.expenseRemoveEndMode;
        data["expenseRemoveEndModeText"] = this.expenseRemoveEndModeText;
        data["cutTonMode"] = this.cutTonMode;
        data["cutTonModeText"] = this.cutTonModeText;
        data["fixedCutTon"] = this.fixedCutTon;
        data["lossRangeTon"] = this.lossRangeTon;
        data["lossDeductionPrice"] = this.lossDeductionPrice;
        data["remark"] = this.remark;
        data["creatorUserId"] = this.creatorUserId;
        data["beRecorder"] = this.beRecorder;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): TransContractRecordForMoreListDto {
        const json = this.toJSON();
        let result = new TransContractRecordForMoreListDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractRecordForMoreListDto {
    id: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    customerIdName: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 合同号/备案号 */
    documentNumber: string | undefined;
    /** 业务单位名称 */
    orgUnitName: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 合同状态（数据字典维护） */
    recordStatus: string | undefined;
    recordStatusText: string | undefined;
    /** 是否从备案参考 */
    isFromPrior: boolean | undefined;
    headerId: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    unloadPlaceTypeText: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    cargoText: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 集团开票税率 */
    groupTaxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    customerPricingMethodText: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    weightStandardText: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    accountPeriodText: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    customWeightStandardText: string | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    transportTypeText: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    taskAreaText: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    transportDistanceText: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    tonRemoveEndModeText: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    expenseRemoveEndModeText: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    cutTonModeText: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
}

export class TransContractRecordEditDto implements ITransContractRecordEditDto {
    /** Id 主键 */
    id: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    /** 合同号/备案号 */
    documentNumber: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 合同状态（数据字典维护） */
    recordStatus: string | undefined;
    /** 合同审核说明 */
    statusRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    type: string | undefined;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    /** 是否为个人客户 */
    isPersonal: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    /** 备注 */
    remark: string | undefined;
    transContractRecordItem: TransContractRecordItemEditDto[] | undefined;

    constructor(data?: ITransContractRecordEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.customerId = data["customerId"];
            this.shipper = data["shipper"];
            this.receiver = data["receiver"];
            this.useQualifications = data["useQualifications"];
            this.documentNumber = data["documentNumber"];
            this.recordDate = data["recordDate"] ? moment(data["recordDate"].toString()) : <any>undefined;
            this.recordStatus = data["recordStatus"];
            this.statusRemark = data["statusRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.type = data["type"];
            this.isInner = data["isInner"];
            this.isPersonal = data["isPersonal"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.customerServiceOfficer = data["customerServiceOfficer"];
            this.remark = data["remark"];
            if (data["transContractRecordItem"] && data["transContractRecordItem"].constructor === Array) {
                this.transContractRecordItem = [] as any;
                for (let item of data["transContractRecordItem"])
                    this.transContractRecordItem.push(TransContractRecordItemEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransContractRecordEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractRecordEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerId"] = this.customerId;
        data["shipper"] = this.shipper;
        data["receiver"] = this.receiver;
        data["useQualifications"] = this.useQualifications;
        data["documentNumber"] = this.documentNumber;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["recordStatus"] = this.recordStatus;
        data["statusRemark"] = this.statusRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["isInner"] = this.isInner;
        data["isPersonal"] = this.isPersonal;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["customerServiceOfficer"] = this.customerServiceOfficer;
        data["remark"] = this.remark;
        if (this.transContractRecordItem && this.transContractRecordItem.constructor === Array) {
            data["transContractRecordItem"] = [];
            for (let item of this.transContractRecordItem)
                data["transContractRecordItem"].push(item.toJSON());
        }
        return data; 
    }

    clone(): TransContractRecordEditDto {
        const json = this.toJSON();
        let result = new TransContractRecordEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractRecordEditDto {
    /** Id 主键 */
    id: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    /** 合同号/备案号 */
    documentNumber: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 合同状态（数据字典维护） */
    recordStatus: string | undefined;
    /** 合同审核说明 */
    statusRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    type: string | undefined;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    /** 是否为个人客户 */
    isPersonal: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    /** 备注 */
    remark: string | undefined;
    transContractRecordItem: TransContractRecordItemEditDto[] | undefined;
}

export class TransContractRecordItemEditDto implements ITransContractRecordItemEditDto {
    /** Id 主键 */
    id: string | undefined;
    headerId: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadingPlaceText: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 集团开票税率 */
    groupTaxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 单车记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ITransContractRecordItemEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.headerId = data["headerId"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadingPlaceText = data["loadingPlaceText"];
            this.loadPlaceType = data["loadPlaceType"];
            this.loadPlaceTypeText = data["loadPlaceTypeText"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceType = data["unloadPlaceType"];
            this.cargo = data["cargo"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.customerIdPrice = data["customerIdPrice"];
            this.singleTruckPrice = data["singleTruckPrice"];
            this.taxRate = data["taxRate"];
            this.groupTaxRate = data["groupTaxRate"];
            this.isHaveTax = data["isHaveTax"];
            this.isBelongMy = data["isBelongMy"];
            this.estimatedStartDate = data["estimatedStartDate"] ? moment(data["estimatedStartDate"].toString()) : <any>undefined;
            this.customerPricingMethod = data["customerPricingMethod"];
            this.payedMode = data["payedMode"];
            this.taxReceiptType = data["taxReceiptType"];
            this.weightStandard = data["weightStandard"];
            this.accountPeriod = data["accountPeriod"];
            this.customWeightStandard = data["customWeightStandard"];
            this.transportType = data["transportType"];
            this.taskArea = data["taskArea"];
            this.transportDistance = data["transportDistance"];
            this.shipName = data["shipName"];
            this.tonRemoveEndMode = data["tonRemoveEndMode"];
            this.expenseRemoveEndMode = data["expenseRemoveEndMode"];
            this.cutTonMode = data["cutTonMode"];
            this.fixedCutTon = data["fixedCutTon"];
            this.lossRangeTon = data["lossRangeTon"];
            this.lossDeductionPrice = data["lossDeductionPrice"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): TransContractRecordItemEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractRecordItemEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["headerId"] = this.headerId;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadingPlaceText"] = this.loadingPlaceText;
        data["loadPlaceType"] = this.loadPlaceType;
        data["loadPlaceTypeText"] = this.loadPlaceTypeText;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceType"] = this.unloadPlaceType;
        data["cargo"] = this.cargo;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["customerIdPrice"] = this.customerIdPrice;
        data["singleTruckPrice"] = this.singleTruckPrice;
        data["taxRate"] = this.taxRate;
        data["groupTaxRate"] = this.groupTaxRate;
        data["isHaveTax"] = this.isHaveTax;
        data["isBelongMy"] = this.isBelongMy;
        data["estimatedStartDate"] = this.estimatedStartDate ? this.estimatedStartDate.toISOString() : <any>undefined;
        data["customerPricingMethod"] = this.customerPricingMethod;
        data["payedMode"] = this.payedMode;
        data["taxReceiptType"] = this.taxReceiptType;
        data["weightStandard"] = this.weightStandard;
        data["accountPeriod"] = this.accountPeriod;
        data["customWeightStandard"] = this.customWeightStandard;
        data["transportType"] = this.transportType;
        data["taskArea"] = this.taskArea;
        data["transportDistance"] = this.transportDistance;
        data["shipName"] = this.shipName;
        data["tonRemoveEndMode"] = this.tonRemoveEndMode;
        data["expenseRemoveEndMode"] = this.expenseRemoveEndMode;
        data["cutTonMode"] = this.cutTonMode;
        data["fixedCutTon"] = this.fixedCutTon;
        data["lossRangeTon"] = this.lossRangeTon;
        data["lossDeductionPrice"] = this.lossDeductionPrice;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): TransContractRecordItemEditDto {
        const json = this.toJSON();
        let result = new TransContractRecordItemEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractRecordItemEditDto {
    /** Id 主键 */
    id: string | undefined;
    headerId: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadingPlaceText: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 集团开票税率 */
    groupTaxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 单车记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class TransContractEditDto implements ITransContractEditDto {
    transContractRecord: TransContractRecordEditDto | undefined;
    transContractRecordItem: TransContractRecordItemEditDto[] | undefined;

    constructor(data?: ITransContractEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transContractRecord = data["transContractRecord"] ? TransContractRecordEditDto.fromJS(data["transContractRecord"]) : <any>undefined;
            if (data["transContractRecordItem"] && data["transContractRecordItem"].constructor === Array) {
                this.transContractRecordItem = [] as any;
                for (let item of data["transContractRecordItem"])
                    this.transContractRecordItem.push(TransContractRecordItemEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransContractEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transContractRecord"] = this.transContractRecord ? this.transContractRecord.toJSON() : <any>undefined;
        if (this.transContractRecordItem && this.transContractRecordItem.constructor === Array) {
            data["transContractRecordItem"] = [];
            for (let item of this.transContractRecordItem)
                data["transContractRecordItem"].push(item.toJSON());
        }
        return data; 
    }

    clone(): TransContractEditDto {
        const json = this.toJSON();
        let result = new TransContractEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractEditDto {
    transContractRecord: TransContractRecordEditDto | undefined;
    transContractRecordItem: TransContractRecordItemEditDto[] | undefined;
}

export class TransContractApprovalEditDto implements ITransContractApprovalEditDto {
    transContractRecord: TransContractRecordEditDto | undefined;

    constructor(data?: ITransContractApprovalEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transContractRecord = data["transContractRecord"] ? TransContractRecordEditDto.fromJS(data["transContractRecord"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TransContractApprovalEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractApprovalEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transContractRecord"] = this.transContractRecord ? this.transContractRecord.toJSON() : <any>undefined;
        return data; 
    }

    clone(): TransContractApprovalEditDto {
        const json = this.toJSON();
        let result = new TransContractApprovalEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractApprovalEditDto {
    transContractRecord: TransContractRecordEditDto | undefined;
}

export class PagedResultDtoOfTransContractRecordItemListDto implements IPagedResultDtoOfTransContractRecordItemListDto {
    totalCount: number | undefined;
    items: TransContractRecordItemListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransContractRecordItemListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransContractRecordItemListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransContractRecordItemListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransContractRecordItemListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransContractRecordItemListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransContractRecordItemListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransContractRecordItemListDto {
    totalCount: number | undefined;
    items: TransContractRecordItemListDto[] | undefined;
}

export class TransContractRecordItemListDto implements ITransContractRecordItemListDto {
    id: string | undefined;
    headerId: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    unloadPlaceTypeText: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    cargoText: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 集团开票税率 */
    groupTaxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    customerPricingMethodText: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string;
    payedModeText: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 单车记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    weightStandardText: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    accountPeriodText: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    customWeightStandardText: string | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    transportTypeText: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    taskAreaText: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    transportDistanceText: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    tonRemoveEndModeText: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    expenseRemoveEndModeText: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    cutTonModeText: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;

    constructor(data?: ITransContractRecordItemListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.headerId = data["headerId"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceIdName = data["loadPlaceIdName"];
            this.loadPlaceType = data["loadPlaceType"];
            this.loadPlaceTypeText = data["loadPlaceTypeText"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.unloadPlaceType = data["unloadPlaceType"];
            this.unloadPlaceTypeText = data["unloadPlaceTypeText"];
            this.cargo = data["cargo"];
            this.cargoText = data["cargoText"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.cargoVarietyIdName = data["cargoVarietyIdName"];
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.customerIdPrice = data["customerIdPrice"];
            this.singleTruckPrice = data["singleTruckPrice"];
            this.taxRate = data["taxRate"];
            this.groupTaxRate = data["groupTaxRate"];
            this.isHaveTax = data["isHaveTax"];
            this.isBelongMy = data["isBelongMy"];
            this.estimatedStartDate = data["estimatedStartDate"] ? moment(data["estimatedStartDate"].toString()) : <any>undefined;
            this.customerPricingMethod = data["customerPricingMethod"];
            this.customerPricingMethodText = data["customerPricingMethodText"];
            this.payedMode = data["payedMode"];
            this.payedModeText = data["payedModeText"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxReceiptTypeText = data["taxReceiptTypeText"];
            this.weightStandard = data["weightStandard"];
            this.weightStandardText = data["weightStandardText"];
            this.accountPeriod = data["accountPeriod"];
            this.accountPeriodText = data["accountPeriodText"];
            this.customWeightStandard = data["customWeightStandard"];
            this.customWeightStandardText = data["customWeightStandardText"];
            this.transportType = data["transportType"];
            this.transportTypeText = data["transportTypeText"];
            this.taskArea = data["taskArea"];
            this.taskAreaText = data["taskAreaText"];
            this.transportDistance = data["transportDistance"];
            this.transportDistanceText = data["transportDistanceText"];
            this.shipName = data["shipName"];
            this.tonRemoveEndMode = data["tonRemoveEndMode"];
            this.tonRemoveEndModeText = data["tonRemoveEndModeText"];
            this.expenseRemoveEndMode = data["expenseRemoveEndMode"];
            this.expenseRemoveEndModeText = data["expenseRemoveEndModeText"];
            this.cutTonMode = data["cutTonMode"];
            this.cutTonModeText = data["cutTonModeText"];
            this.fixedCutTon = data["fixedCutTon"];
            this.lossRangeTon = data["lossRangeTon"];
            this.lossDeductionPrice = data["lossDeductionPrice"];
            this.remark = data["remark"];
            this.creatorUserId = data["creatorUserId"];
            this.beRecorder = data["beRecorder"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): TransContractRecordItemListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractRecordItemListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["headerId"] = this.headerId;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceIdName"] = this.loadPlaceIdName;
        data["loadPlaceType"] = this.loadPlaceType;
        data["loadPlaceTypeText"] = this.loadPlaceTypeText;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["unloadPlaceType"] = this.unloadPlaceType;
        data["unloadPlaceTypeText"] = this.unloadPlaceTypeText;
        data["cargo"] = this.cargo;
        data["cargoText"] = this.cargoText;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["cargoVarietyIdName"] = this.cargoVarietyIdName;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["customerIdPrice"] = this.customerIdPrice;
        data["singleTruckPrice"] = this.singleTruckPrice;
        data["taxRate"] = this.taxRate;
        data["groupTaxRate"] = this.groupTaxRate;
        data["isHaveTax"] = this.isHaveTax;
        data["isBelongMy"] = this.isBelongMy;
        data["estimatedStartDate"] = this.estimatedStartDate ? this.estimatedStartDate.toISOString() : <any>undefined;
        data["customerPricingMethod"] = this.customerPricingMethod;
        data["customerPricingMethodText"] = this.customerPricingMethodText;
        data["payedMode"] = this.payedMode;
        data["payedModeText"] = this.payedModeText;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxReceiptTypeText"] = this.taxReceiptTypeText;
        data["weightStandard"] = this.weightStandard;
        data["weightStandardText"] = this.weightStandardText;
        data["accountPeriod"] = this.accountPeriod;
        data["accountPeriodText"] = this.accountPeriodText;
        data["customWeightStandard"] = this.customWeightStandard;
        data["customWeightStandardText"] = this.customWeightStandardText;
        data["transportType"] = this.transportType;
        data["transportTypeText"] = this.transportTypeText;
        data["taskArea"] = this.taskArea;
        data["taskAreaText"] = this.taskAreaText;
        data["transportDistance"] = this.transportDistance;
        data["transportDistanceText"] = this.transportDistanceText;
        data["shipName"] = this.shipName;
        data["tonRemoveEndMode"] = this.tonRemoveEndMode;
        data["tonRemoveEndModeText"] = this.tonRemoveEndModeText;
        data["expenseRemoveEndMode"] = this.expenseRemoveEndMode;
        data["expenseRemoveEndModeText"] = this.expenseRemoveEndModeText;
        data["cutTonMode"] = this.cutTonMode;
        data["cutTonModeText"] = this.cutTonModeText;
        data["fixedCutTon"] = this.fixedCutTon;
        data["lossRangeTon"] = this.lossRangeTon;
        data["lossDeductionPrice"] = this.lossDeductionPrice;
        data["remark"] = this.remark;
        data["creatorUserId"] = this.creatorUserId;
        data["beRecorder"] = this.beRecorder;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): TransContractRecordItemListDto {
        const json = this.toJSON();
        let result = new TransContractRecordItemListDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractRecordItemListDto {
    id: string | undefined;
    headerId: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    unloadPlaceTypeText: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    cargoText: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 集团开票税率 */
    groupTaxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    customerPricingMethodText: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string;
    payedModeText: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 单车记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    weightStandardText: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    accountPeriodText: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    customWeightStandardText: string | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    transportTypeText: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    taskAreaText: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    transportDistanceText: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    tonRemoveEndModeText: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    expenseRemoveEndModeText: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    cutTonModeText: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
}

export class UpdateCustomerTransContractRecordItemAttachInput implements IUpdateCustomerTransContractRecordItemAttachInput {
    itemId: string | undefined;
    transContractItemFeeTransProcesss: TransContractItemFeeTransProcessEditDto[] | undefined;

    constructor(data?: IUpdateCustomerTransContractRecordItemAttachInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemId = data["itemId"];
            if (data["transContractItemFeeTransProcesss"] && data["transContractItemFeeTransProcesss"].constructor === Array) {
                this.transContractItemFeeTransProcesss = [] as any;
                for (let item of data["transContractItemFeeTransProcesss"])
                    this.transContractItemFeeTransProcesss.push(TransContractItemFeeTransProcessEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateCustomerTransContractRecordItemAttachInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomerTransContractRecordItemAttachInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId;
        if (this.transContractItemFeeTransProcesss && this.transContractItemFeeTransProcesss.constructor === Array) {
            data["transContractItemFeeTransProcesss"] = [];
            for (let item of this.transContractItemFeeTransProcesss)
                data["transContractItemFeeTransProcesss"].push(item.toJSON());
        }
        return data; 
    }

    clone(): UpdateCustomerTransContractRecordItemAttachInput {
        const json = this.toJSON();
        let result = new UpdateCustomerTransContractRecordItemAttachInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateCustomerTransContractRecordItemAttachInput {
    itemId: string | undefined;
    transContractItemFeeTransProcesss: TransContractItemFeeTransProcessEditDto[] | undefined;
}

export class TransContractItemFeeTransProcessEditDto implements ITransContractItemFeeTransProcessEditDto {
    /** Id 主键 */
    id: string | undefined;
    itemId: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    /** 费用核算方式（车数、吨数、固定额） */
    expenseStandard: string | undefined;
    /** 费用核算比例/单价 */
    expenseRate: number | undefined;
    /** 费用承担方（部门费用、单车费用(不需要选择付款方)） */
    expenseUndertaker: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleType: string | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ITransContractItemFeeTransProcessEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.itemId = data["itemId"];
            this.expenseOccurType = data["expenseOccurType"];
            this.expenseItem = data["expenseItem"];
            this.expenseStandard = data["expenseStandard"];
            this.expenseRate = data["expenseRate"];
            this.expenseUndertaker = data["expenseUndertaker"];
            this.vehicleBusinessType = data["vehicleBusinessType"];
            this.vehicleType = data["vehicleType"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): TransContractItemFeeTransProcessEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractItemFeeTransProcessEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["itemId"] = this.itemId;
        data["expenseOccurType"] = this.expenseOccurType;
        data["expenseItem"] = this.expenseItem;
        data["expenseStandard"] = this.expenseStandard;
        data["expenseRate"] = this.expenseRate;
        data["expenseUndertaker"] = this.expenseUndertaker;
        data["vehicleBusinessType"] = this.vehicleBusinessType;
        data["vehicleType"] = this.vehicleType;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): TransContractItemFeeTransProcessEditDto {
        const json = this.toJSON();
        let result = new TransContractItemFeeTransProcessEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractItemFeeTransProcessEditDto {
    /** Id 主键 */
    id: string | undefined;
    itemId: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    /** 费用核算方式（车数、吨数、固定额） */
    expenseStandard: string | undefined;
    /** 费用核算比例/单价 */
    expenseRate: number | undefined;
    /** 费用承担方（部门费用、单车费用(不需要选择付款方)） */
    expenseUndertaker: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleType: string | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class PagedResultDtoOfTransContractItemFeeTransProcessListDto implements IPagedResultDtoOfTransContractItemFeeTransProcessListDto {
    totalCount: number | undefined;
    items: TransContractItemFeeTransProcessListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransContractItemFeeTransProcessListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransContractItemFeeTransProcessListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransContractItemFeeTransProcessListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransContractItemFeeTransProcessListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransContractItemFeeTransProcessListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransContractItemFeeTransProcessListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransContractItemFeeTransProcessListDto {
    totalCount: number | undefined;
    items: TransContractItemFeeTransProcessListDto[] | undefined;
}

export class TransContractItemFeeTransProcessListDto implements ITransContractItemFeeTransProcessListDto {
    itemId: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    expenseOccurTypeText: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    expenseItemText: string | undefined;
    /** 费用核算方式（车数、吨数、固定额） */
    expenseStandard: string | undefined;
    expenseStandardText: string | undefined;
    /** 费用核算比例/单价 */
    expenseRate: number | undefined;
    /** 费用承担方（部门费用、单车费用(不需要选择付款方)） */
    expenseUndertaker: string | undefined;
    expenseUndertakerText: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleBusinessTypeText: string | undefined;
    /** 车型 */
    vehicleType: string | undefined;
    vehicleTypeText: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: ITransContractItemFeeTransProcessListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemId = data["itemId"];
            this.expenseOccurType = data["expenseOccurType"];
            this.expenseOccurTypeText = data["expenseOccurTypeText"];
            this.expenseItem = data["expenseItem"];
            this.expenseItemText = data["expenseItemText"];
            this.expenseStandard = data["expenseStandard"];
            this.expenseStandardText = data["expenseStandardText"];
            this.expenseRate = data["expenseRate"];
            this.expenseUndertaker = data["expenseUndertaker"];
            this.expenseUndertakerText = data["expenseUndertakerText"];
            this.vehicleBusinessType = data["vehicleBusinessType"];
            this.vehicleBusinessTypeText = data["vehicleBusinessTypeText"];
            this.vehicleType = data["vehicleType"];
            this.vehicleTypeText = data["vehicleTypeText"];
            this.remark = data["remark"];
            this.creatorUserId = data["creatorUserId"];
            this.beRecorder = data["beRecorder"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransContractItemFeeTransProcessListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransContractItemFeeTransProcessListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemId"] = this.itemId;
        data["expenseOccurType"] = this.expenseOccurType;
        data["expenseOccurTypeText"] = this.expenseOccurTypeText;
        data["expenseItem"] = this.expenseItem;
        data["expenseItemText"] = this.expenseItemText;
        data["expenseStandard"] = this.expenseStandard;
        data["expenseStandardText"] = this.expenseStandardText;
        data["expenseRate"] = this.expenseRate;
        data["expenseUndertaker"] = this.expenseUndertaker;
        data["expenseUndertakerText"] = this.expenseUndertakerText;
        data["vehicleBusinessType"] = this.vehicleBusinessType;
        data["vehicleBusinessTypeText"] = this.vehicleBusinessTypeText;
        data["vehicleType"] = this.vehicleType;
        data["vehicleTypeText"] = this.vehicleTypeText;
        data["remark"] = this.remark;
        data["creatorUserId"] = this.creatorUserId;
        data["beRecorder"] = this.beRecorder;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransContractItemFeeTransProcessListDto {
        const json = this.toJSON();
        let result = new TransContractItemFeeTransProcessListDto();
        result.init(json);
        return result;
    }
}

export interface ITransContractItemFeeTransProcessListDto {
    itemId: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    expenseOccurTypeText: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    expenseItemText: string | undefined;
    /** 费用核算方式（车数、吨数、固定额） */
    expenseStandard: string | undefined;
    expenseStandardText: string | undefined;
    /** 费用核算比例/单价 */
    expenseRate: number | undefined;
    /** 费用承担方（部门费用、单车费用(不需要选择付款方)） */
    expenseUndertaker: string | undefined;
    expenseUndertakerText: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleBusinessTypeText: string | undefined;
    /** 车型 */
    vehicleType: string | undefined;
    vehicleTypeText: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfTransMainOrderRecordListDto implements IPagedResultDtoOfTransMainOrderRecordListDto {
    totalCount: number | undefined;
    items: TransMainOrderRecordListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransMainOrderRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransMainOrderRecordListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransMainOrderRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransMainOrderRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransMainOrderRecordListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransMainOrderRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransMainOrderRecordListDto {
    totalCount: number | undefined;
    items: TransMainOrderRecordListDto[] | undefined;
}

export class TransMainOrderRecordListDto implements ITransMainOrderRecordListDto {
    /** 业务单位 */
    organizationUnitId: number | undefined;
    organizationUnitIdName: string | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    shipper: number | undefined;
    shipperName: string | undefined;
    receiver: number | undefined;
    receiverName: string | undefined;
    customerIdName: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 订单日期 */
    recordDate: moment.Moment | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    orderStatus: string | undefined;
    orderStatusText: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    customerServiceOfficer: string | undefined;
    customerServiceOfficerName: string | undefined;
    /** 关联合同记录ID */
    transContractItemId: string | undefined;
    /** 是否从合同参考 */
    isFromPrior: boolean | undefined;
    /** 是否已创建单车订单 */
    isHaveNext: boolean | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    unloadPlaceTypeText: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    cargoText: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    transportTypeText: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    taskAreaText: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    transportDistanceText: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    customerPricingMethodText: string | undefined;
    /** 单车记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    weightStandardText: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    tonRemoveEndModeText: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    expenseRemoveEndModeText: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    payedModeText: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    accountPeriodText: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    customWeightStandardText: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    cutTonModeText: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: ITransMainOrderRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitIdName = data["organizationUnitIdName"];
            this.customerId = data["customerId"];
            this.shipper = data["shipper"];
            this.shipperName = data["shipperName"];
            this.receiver = data["receiver"];
            this.receiverName = data["receiverName"];
            this.customerIdName = data["customerIdName"];
            this.useQualifications = data["useQualifications"];
            this.useQualificationsText = data["useQualificationsText"];
            this.recordDate = data["recordDate"] ? moment(data["recordDate"].toString()) : <any>undefined;
            this.orderStatus = data["orderStatus"];
            this.orderStatusText = data["orderStatusText"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.customerServiceOfficer = data["customerServiceOfficer"];
            this.customerServiceOfficerName = data["customerServiceOfficerName"];
            this.transContractItemId = data["transContractItemId"];
            this.isFromPrior = data["isFromPrior"];
            this.isHaveNext = data["isHaveNext"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceIdName = data["loadPlaceIdName"];
            this.loadPlaceType = data["loadPlaceType"];
            this.loadPlaceTypeText = data["loadPlaceTypeText"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.unloadPlaceType = data["unloadPlaceType"];
            this.unloadPlaceTypeText = data["unloadPlaceTypeText"];
            this.cargo = data["cargo"];
            this.cargoText = data["cargoText"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.cargoVarietyIdName = data["cargoVarietyIdName"];
            this.estimatedStartDate = data["estimatedStartDate"] ? moment(data["estimatedStartDate"].toString()) : <any>undefined;
            this.isBelongMy = data["isBelongMy"];
            this.transportType = data["transportType"];
            this.transportTypeText = data["transportTypeText"];
            this.taskArea = data["taskArea"];
            this.taskAreaText = data["taskAreaText"];
            this.transportDistance = data["transportDistance"];
            this.transportDistanceText = data["transportDistanceText"];
            this.shipName = data["shipName"];
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.singleTruckPrice = data["singleTruckPrice"];
            this.customerIdPrice = data["customerIdPrice"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxReceiptTypeText = data["taxReceiptTypeText"];
            this.customerPricingMethod = data["customerPricingMethod"];
            this.customerPricingMethodText = data["customerPricingMethodText"];
            this.weightStandard = data["weightStandard"];
            this.weightStandardText = data["weightStandardText"];
            this.tonRemoveEndMode = data["tonRemoveEndMode"];
            this.tonRemoveEndModeText = data["tonRemoveEndModeText"];
            this.expenseRemoveEndMode = data["expenseRemoveEndMode"];
            this.expenseRemoveEndModeText = data["expenseRemoveEndModeText"];
            this.payedMode = data["payedMode"];
            this.payedModeText = data["payedModeText"];
            this.accountPeriod = data["accountPeriod"];
            this.accountPeriodText = data["accountPeriodText"];
            this.customWeightStandard = data["customWeightStandard"];
            this.customWeightStandardText = data["customWeightStandardText"];
            this.cutTonMode = data["cutTonMode"];
            this.cutTonModeText = data["cutTonModeText"];
            this.fixedCutTon = data["fixedCutTon"];
            this.lossRangeTon = data["lossRangeTon"];
            this.lossDeductionPrice = data["lossDeductionPrice"];
            this.remark = data["remark"];
            this.creatorUserId = data["creatorUserId"];
            this.beRecorder = data["beRecorder"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransMainOrderRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransMainOrderRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitIdName"] = this.organizationUnitIdName;
        data["customerId"] = this.customerId;
        data["shipper"] = this.shipper;
        data["shipperName"] = this.shipperName;
        data["receiver"] = this.receiver;
        data["receiverName"] = this.receiverName;
        data["customerIdName"] = this.customerIdName;
        data["useQualifications"] = this.useQualifications;
        data["useQualificationsText"] = this.useQualificationsText;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["orderStatus"] = this.orderStatus;
        data["orderStatusText"] = this.orderStatusText;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["customerServiceOfficer"] = this.customerServiceOfficer;
        data["customerServiceOfficerName"] = this.customerServiceOfficerName;
        data["transContractItemId"] = this.transContractItemId;
        data["isFromPrior"] = this.isFromPrior;
        data["isHaveNext"] = this.isHaveNext;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceIdName"] = this.loadPlaceIdName;
        data["loadPlaceType"] = this.loadPlaceType;
        data["loadPlaceTypeText"] = this.loadPlaceTypeText;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["unloadPlaceType"] = this.unloadPlaceType;
        data["unloadPlaceTypeText"] = this.unloadPlaceTypeText;
        data["cargo"] = this.cargo;
        data["cargoText"] = this.cargoText;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["cargoVarietyIdName"] = this.cargoVarietyIdName;
        data["estimatedStartDate"] = this.estimatedStartDate ? this.estimatedStartDate.toISOString() : <any>undefined;
        data["isBelongMy"] = this.isBelongMy;
        data["transportType"] = this.transportType;
        data["transportTypeText"] = this.transportTypeText;
        data["taskArea"] = this.taskArea;
        data["taskAreaText"] = this.taskAreaText;
        data["transportDistance"] = this.transportDistance;
        data["transportDistanceText"] = this.transportDistanceText;
        data["shipName"] = this.shipName;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["singleTruckPrice"] = this.singleTruckPrice;
        data["customerIdPrice"] = this.customerIdPrice;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxReceiptTypeText"] = this.taxReceiptTypeText;
        data["customerPricingMethod"] = this.customerPricingMethod;
        data["customerPricingMethodText"] = this.customerPricingMethodText;
        data["weightStandard"] = this.weightStandard;
        data["weightStandardText"] = this.weightStandardText;
        data["tonRemoveEndMode"] = this.tonRemoveEndMode;
        data["tonRemoveEndModeText"] = this.tonRemoveEndModeText;
        data["expenseRemoveEndMode"] = this.expenseRemoveEndMode;
        data["expenseRemoveEndModeText"] = this.expenseRemoveEndModeText;
        data["payedMode"] = this.payedMode;
        data["payedModeText"] = this.payedModeText;
        data["accountPeriod"] = this.accountPeriod;
        data["accountPeriodText"] = this.accountPeriodText;
        data["customWeightStandard"] = this.customWeightStandard;
        data["customWeightStandardText"] = this.customWeightStandardText;
        data["cutTonMode"] = this.cutTonMode;
        data["cutTonModeText"] = this.cutTonModeText;
        data["fixedCutTon"] = this.fixedCutTon;
        data["lossRangeTon"] = this.lossRangeTon;
        data["lossDeductionPrice"] = this.lossDeductionPrice;
        data["remark"] = this.remark;
        data["creatorUserId"] = this.creatorUserId;
        data["beRecorder"] = this.beRecorder;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransMainOrderRecordListDto {
        const json = this.toJSON();
        let result = new TransMainOrderRecordListDto();
        result.init(json);
        return result;
    }
}

export interface ITransMainOrderRecordListDto {
    /** 业务单位 */
    organizationUnitId: number | undefined;
    organizationUnitIdName: string | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    shipper: number | undefined;
    shipperName: string | undefined;
    receiver: number | undefined;
    receiverName: string | undefined;
    customerIdName: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 订单日期 */
    recordDate: moment.Moment | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    orderStatus: string | undefined;
    orderStatusText: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    customerServiceOfficer: string | undefined;
    customerServiceOfficerName: string | undefined;
    /** 关联合同记录ID */
    transContractItemId: string | undefined;
    /** 是否从合同参考 */
    isFromPrior: boolean | undefined;
    /** 是否已创建单车订单 */
    isHaveNext: boolean | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    unloadPlaceTypeText: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    cargoText: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    transportTypeText: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    taskAreaText: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    transportDistanceText: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    customerPricingMethodText: string | undefined;
    /** 单车记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    weightStandardText: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    tonRemoveEndModeText: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    expenseRemoveEndModeText: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    payedModeText: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    accountPeriodText: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    customWeightStandardText: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    cutTonModeText: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;
}

export class TransMainOrderRecordEditDto implements ITransMainOrderRecordEditDto {
    /** Id 主键 */
    id: string | undefined;
    /** 关联客户运输合同ID */
    transContractItemId: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    shipper: number | undefined;
    receiver: number | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    orderStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    customerServiceOfficer: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    /** 记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ITransMainOrderRecordEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.transContractItemId = data["transContractItemId"];
            this.organizationUnitId = data["organizationUnitId"];
            this.customerId = data["customerId"];
            this.shipper = data["shipper"];
            this.receiver = data["receiver"];
            this.useQualifications = data["useQualifications"];
            this.recordDate = data["recordDate"] ? moment(data["recordDate"].toString()) : <any>undefined;
            this.orderStatus = data["orderStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.customerServiceOfficer = data["customerServiceOfficer"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceType = data["loadPlaceType"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceType = data["unloadPlaceType"];
            this.cargo = data["cargo"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.estimatedStartDate = data["estimatedStartDate"] ? moment(data["estimatedStartDate"].toString()) : <any>undefined;
            this.isBelongMy = data["isBelongMy"];
            this.transportType = data["transportType"];
            this.taskArea = data["taskArea"];
            this.transportDistance = data["transportDistance"];
            this.shipName = data["shipName"];
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.singleTruckPrice = data["singleTruckPrice"];
            this.customerIdPrice = data["customerIdPrice"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.taxReceiptType = data["taxReceiptType"];
            this.customerPricingMethod = data["customerPricingMethod"];
            this.weightStandard = data["weightStandard"];
            this.tonRemoveEndMode = data["tonRemoveEndMode"];
            this.expenseRemoveEndMode = data["expenseRemoveEndMode"];
            this.payedMode = data["payedMode"];
            this.accountPeriod = data["accountPeriod"];
            this.customWeightStandard = data["customWeightStandard"];
            this.cutTonMode = data["cutTonMode"];
            this.fixedCutTon = data["fixedCutTon"];
            this.lossRangeTon = data["lossRangeTon"];
            this.lossDeductionPrice = data["lossDeductionPrice"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): TransMainOrderRecordEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransMainOrderRecordEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["transContractItemId"] = this.transContractItemId;
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerId"] = this.customerId;
        data["shipper"] = this.shipper;
        data["receiver"] = this.receiver;
        data["useQualifications"] = this.useQualifications;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["orderStatus"] = this.orderStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["customerServiceOfficer"] = this.customerServiceOfficer;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceType"] = this.loadPlaceType;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceType"] = this.unloadPlaceType;
        data["cargo"] = this.cargo;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["estimatedStartDate"] = this.estimatedStartDate ? this.estimatedStartDate.toISOString() : <any>undefined;
        data["isBelongMy"] = this.isBelongMy;
        data["transportType"] = this.transportType;
        data["taskArea"] = this.taskArea;
        data["transportDistance"] = this.transportDistance;
        data["shipName"] = this.shipName;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["singleTruckPrice"] = this.singleTruckPrice;
        data["customerIdPrice"] = this.customerIdPrice;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["taxReceiptType"] = this.taxReceiptType;
        data["customerPricingMethod"] = this.customerPricingMethod;
        data["weightStandard"] = this.weightStandard;
        data["tonRemoveEndMode"] = this.tonRemoveEndMode;
        data["expenseRemoveEndMode"] = this.expenseRemoveEndMode;
        data["payedMode"] = this.payedMode;
        data["accountPeriod"] = this.accountPeriod;
        data["customWeightStandard"] = this.customWeightStandard;
        data["cutTonMode"] = this.cutTonMode;
        data["fixedCutTon"] = this.fixedCutTon;
        data["lossRangeTon"] = this.lossRangeTon;
        data["lossDeductionPrice"] = this.lossDeductionPrice;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): TransMainOrderRecordEditDto {
        const json = this.toJSON();
        let result = new TransMainOrderRecordEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransMainOrderRecordEditDto {
    /** Id 主键 */
    id: string | undefined;
    /** 关联客户运输合同ID */
    transContractItemId: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 客户（合同客户或者第三方客户） */
    customerId: number | undefined;
    shipper: number | undefined;
    receiver: number | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    orderStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    customerServiceOfficer: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 单车预计运价 */
    singleTruckPrice: number | undefined;
    /** 货主运价 */
    customerIdPrice: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 货主计价方式（数据字典维护）按车数、按吨数等 */
    customerPricingMethod: string | undefined;
    /** 记重标准（装地净重、卸地净重、最小净重、其他） */
    weightStandard: string | undefined;
    /** 吨位抹零方式 来源:数据字典 */
    tonRemoveEndMode: string | undefined;
    /** 费用抹零方式 来源:数据字典 */
    expenseRemoveEndMode: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    /** 结算周期（单趟、按天、按周、随对随结、整单完活、其他） */
    accountPeriod: string | undefined;
    /** 客户记重标准（装地净重、卸地净重、最小净重、其他） */
    customWeightStandard: string | undefined;
    /** 路损扣吨方式 来源:数据字典 */
    cutTonMode: string | undefined;
    /** 固定扣吨额/比例(%) */
    fixedCutTon: number | undefined;
    /** 路损让吨范围 */
    lossRangeTon: number | undefined;
    /** 路损扣款单价 */
    lossDeductionPrice: number | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class TransMainOrderEditDto implements ITransMainOrderEditDto {
    transMainOrderRecord: TransMainOrderRecordEditDto | undefined;
    transMainOrderFeeTransProcesss: TransMainOrderFeeTransProcessEditDto[] | undefined;

    constructor(data?: ITransMainOrderEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transMainOrderRecord = data["transMainOrderRecord"] ? TransMainOrderRecordEditDto.fromJS(data["transMainOrderRecord"]) : <any>undefined;
            if (data["transMainOrderFeeTransProcesss"] && data["transMainOrderFeeTransProcesss"].constructor === Array) {
                this.transMainOrderFeeTransProcesss = [] as any;
                for (let item of data["transMainOrderFeeTransProcesss"])
                    this.transMainOrderFeeTransProcesss.push(TransMainOrderFeeTransProcessEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TransMainOrderEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransMainOrderEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transMainOrderRecord"] = this.transMainOrderRecord ? this.transMainOrderRecord.toJSON() : <any>undefined;
        if (this.transMainOrderFeeTransProcesss && this.transMainOrderFeeTransProcesss.constructor === Array) {
            data["transMainOrderFeeTransProcesss"] = [];
            for (let item of this.transMainOrderFeeTransProcesss)
                data["transMainOrderFeeTransProcesss"].push(item.toJSON());
        }
        return data; 
    }

    clone(): TransMainOrderEditDto {
        const json = this.toJSON();
        let result = new TransMainOrderEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransMainOrderEditDto {
    transMainOrderRecord: TransMainOrderRecordEditDto | undefined;
    transMainOrderFeeTransProcesss: TransMainOrderFeeTransProcessEditDto[] | undefined;
}

export class TransMainOrderFeeTransProcessEditDto implements ITransMainOrderFeeTransProcessEditDto {
    /** Id 主键 */
    id: string | undefined;
    headerId: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    /** 费用核算方式（车数、吨数、固定额） */
    expenseStandard: string | undefined;
    /** 费用核算比例/单价 */
    expenseRate: number | undefined;
    /** 费用承担方（部门费用、单车费用(不需要选择付款方)） */
    expenseUndertaker: string | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    /** 客户付款方式（数据字典维护） */
    payedMode: string | undefined;
    /** 单车结算方式（数据字典维护） */
    deductionType: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleType: string | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ITransMainOrderFeeTransProcessEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.headerId = data["headerId"];
            this.expenseOccurType = data["expenseOccurType"];
            this.expenseItem = data["expenseItem"];
            this.expenseStandard = data["expenseStandard"];
            this.expenseRate = data["expenseRate"];
            this.expenseUndertaker = data["expenseUndertaker"];
            this.customerId = data["customerId"];
            this.payedMode = data["payedMode"];
            this.deductionType = data["deductionType"];
            this.vehicleBusinessType = data["vehicleBusinessType"];
            this.vehicleType = data["vehicleType"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): TransMainOrderFeeTransProcessEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransMainOrderFeeTransProcessEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["headerId"] = this.headerId;
        data["expenseOccurType"] = this.expenseOccurType;
        data["expenseItem"] = this.expenseItem;
        data["expenseStandard"] = this.expenseStandard;
        data["expenseRate"] = this.expenseRate;
        data["expenseUndertaker"] = this.expenseUndertaker;
        data["customerId"] = this.customerId;
        data["payedMode"] = this.payedMode;
        data["deductionType"] = this.deductionType;
        data["vehicleBusinessType"] = this.vehicleBusinessType;
        data["vehicleType"] = this.vehicleType;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): TransMainOrderFeeTransProcessEditDto {
        const json = this.toJSON();
        let result = new TransMainOrderFeeTransProcessEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransMainOrderFeeTransProcessEditDto {
    /** Id 主键 */
    id: string | undefined;
    headerId: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    /** 费用核算方式（车数、吨数、固定额） */
    expenseStandard: string | undefined;
    /** 费用核算比例/单价 */
    expenseRate: number | undefined;
    /** 费用承担方（部门费用、单车费用(不需要选择付款方)） */
    expenseUndertaker: string | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    /** 客户付款方式（数据字典维护） */
    payedMode: string | undefined;
    /** 单车结算方式（数据字典维护） */
    deductionType: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleType: string | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class TransMainOrderApprovalEditDto implements ITransMainOrderApprovalEditDto {
    transMainOrderRecord: TransMainOrderRecordEditDto | undefined;

    constructor(data?: ITransMainOrderApprovalEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transMainOrderRecord = data["transMainOrderRecord"] ? TransMainOrderRecordEditDto.fromJS(data["transMainOrderRecord"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TransMainOrderApprovalEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransMainOrderApprovalEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transMainOrderRecord"] = this.transMainOrderRecord ? this.transMainOrderRecord.toJSON() : <any>undefined;
        return data; 
    }

    clone(): TransMainOrderApprovalEditDto {
        const json = this.toJSON();
        let result = new TransMainOrderApprovalEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransMainOrderApprovalEditDto {
    transMainOrderRecord: TransMainOrderRecordEditDto | undefined;
}

export class UpdateCustomerTransOrderRecordItemAttachInput implements IUpdateCustomerTransOrderRecordItemAttachInput {
    headerId: string | undefined;
    transMainOrderFeeTransProcesss: TransMainOrderFeeTransProcessEditDto[] | undefined;

    constructor(data?: IUpdateCustomerTransOrderRecordItemAttachInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.headerId = data["headerId"];
            if (data["transMainOrderFeeTransProcesss"] && data["transMainOrderFeeTransProcesss"].constructor === Array) {
                this.transMainOrderFeeTransProcesss = [] as any;
                for (let item of data["transMainOrderFeeTransProcesss"])
                    this.transMainOrderFeeTransProcesss.push(TransMainOrderFeeTransProcessEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateCustomerTransOrderRecordItemAttachInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCustomerTransOrderRecordItemAttachInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["headerId"] = this.headerId;
        if (this.transMainOrderFeeTransProcesss && this.transMainOrderFeeTransProcesss.constructor === Array) {
            data["transMainOrderFeeTransProcesss"] = [];
            for (let item of this.transMainOrderFeeTransProcesss)
                data["transMainOrderFeeTransProcesss"].push(item.toJSON());
        }
        return data; 
    }

    clone(): UpdateCustomerTransOrderRecordItemAttachInput {
        const json = this.toJSON();
        let result = new UpdateCustomerTransOrderRecordItemAttachInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateCustomerTransOrderRecordItemAttachInput {
    headerId: string | undefined;
    transMainOrderFeeTransProcesss: TransMainOrderFeeTransProcessEditDto[] | undefined;
}

export class PagedResultDtoOfTransMainOrderFeeTransProcessListDto implements IPagedResultDtoOfTransMainOrderFeeTransProcessListDto {
    totalCount: number | undefined;
    items: TransMainOrderFeeTransProcessListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransMainOrderFeeTransProcessListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransMainOrderFeeTransProcessListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransMainOrderFeeTransProcessListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransMainOrderFeeTransProcessListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransMainOrderFeeTransProcessListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransMainOrderFeeTransProcessListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransMainOrderFeeTransProcessListDto {
    totalCount: number | undefined;
    items: TransMainOrderFeeTransProcessListDto[] | undefined;
}

export class TransMainOrderFeeTransProcessListDto implements ITransMainOrderFeeTransProcessListDto {
    headerId: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    expenseOccurTypeText: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    expenseItemText: string | undefined;
    /** 费用核算方式（车数、吨数、固定额） */
    expenseStandard: string | undefined;
    expenseStandardText: string | undefined;
    /** 费用核算比例/单价 */
    expenseRate: number | undefined;
    /** 费用承担方（部门费用、单车费用(不需要选择付款方)） */
    expenseUndertaker: string | undefined;
    expenseUndertakerText: string | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    customerIdName: string | undefined;
    /** 客户付款方式（数据字典维护） */
    payedMode: string | undefined;
    payedModeName: string | undefined;
    /** 单车结算方式（数据字典维护） */
    deductionType: string | undefined;
    deductionTypeName: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleBusinessTypeText: string | undefined;
    vehicleType: string | undefined;
    vehicleTypeText: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: ITransMainOrderFeeTransProcessListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.headerId = data["headerId"];
            this.expenseOccurType = data["expenseOccurType"];
            this.expenseOccurTypeText = data["expenseOccurTypeText"];
            this.expenseItem = data["expenseItem"];
            this.expenseItemText = data["expenseItemText"];
            this.expenseStandard = data["expenseStandard"];
            this.expenseStandardText = data["expenseStandardText"];
            this.expenseRate = data["expenseRate"];
            this.expenseUndertaker = data["expenseUndertaker"];
            this.expenseUndertakerText = data["expenseUndertakerText"];
            this.customerId = data["customerId"];
            this.customerIdName = data["customerIdName"];
            this.payedMode = data["payedMode"];
            this.payedModeName = data["payedModeName"];
            this.deductionType = data["deductionType"];
            this.deductionTypeName = data["deductionTypeName"];
            this.vehicleBusinessType = data["vehicleBusinessType"];
            this.vehicleBusinessTypeText = data["vehicleBusinessTypeText"];
            this.vehicleType = data["vehicleType"];
            this.vehicleTypeText = data["vehicleTypeText"];
            this.remark = data["remark"];
            this.creatorUserId = data["creatorUserId"];
            this.beRecorder = data["beRecorder"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransMainOrderFeeTransProcessListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransMainOrderFeeTransProcessListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["headerId"] = this.headerId;
        data["expenseOccurType"] = this.expenseOccurType;
        data["expenseOccurTypeText"] = this.expenseOccurTypeText;
        data["expenseItem"] = this.expenseItem;
        data["expenseItemText"] = this.expenseItemText;
        data["expenseStandard"] = this.expenseStandard;
        data["expenseStandardText"] = this.expenseStandardText;
        data["expenseRate"] = this.expenseRate;
        data["expenseUndertaker"] = this.expenseUndertaker;
        data["expenseUndertakerText"] = this.expenseUndertakerText;
        data["customerId"] = this.customerId;
        data["customerIdName"] = this.customerIdName;
        data["payedMode"] = this.payedMode;
        data["payedModeName"] = this.payedModeName;
        data["deductionType"] = this.deductionType;
        data["deductionTypeName"] = this.deductionTypeName;
        data["vehicleBusinessType"] = this.vehicleBusinessType;
        data["vehicleBusinessTypeText"] = this.vehicleBusinessTypeText;
        data["vehicleType"] = this.vehicleType;
        data["vehicleTypeText"] = this.vehicleTypeText;
        data["remark"] = this.remark;
        data["creatorUserId"] = this.creatorUserId;
        data["beRecorder"] = this.beRecorder;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransMainOrderFeeTransProcessListDto {
        const json = this.toJSON();
        let result = new TransMainOrderFeeTransProcessListDto();
        result.init(json);
        return result;
    }
}

export interface ITransMainOrderFeeTransProcessListDto {
    headerId: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    expenseOccurTypeText: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    expenseItemText: string | undefined;
    /** 费用核算方式（车数、吨数、固定额） */
    expenseStandard: string | undefined;
    expenseStandardText: string | undefined;
    /** 费用核算比例/单价 */
    expenseRate: number | undefined;
    /** 费用承担方（部门费用、单车费用(不需要选择付款方)） */
    expenseUndertaker: string | undefined;
    expenseUndertakerText: string | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    customerIdName: string | undefined;
    /** 客户付款方式（数据字典维护） */
    payedMode: string | undefined;
    payedModeName: string | undefined;
    /** 单车结算方式（数据字典维护） */
    deductionType: string | undefined;
    deductionTypeName: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleBusinessTypeText: string | undefined;
    vehicleType: string | undefined;
    vehicleTypeText: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfDailySourcePlanRecordListDto implements IPagedResultDtoOfDailySourcePlanRecordListDto {
    totalCount: number | undefined;
    items: DailySourcePlanRecordListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDailySourcePlanRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(DailySourcePlanRecordListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDailySourcePlanRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDailySourcePlanRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfDailySourcePlanRecordListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfDailySourcePlanRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfDailySourcePlanRecordListDto {
    totalCount: number | undefined;
    items: DailySourcePlanRecordListDto[] | undefined;
}

export class DailySourcePlanRecordListDto implements IDailySourcePlanRecordListDto {
    /** 上级订单Id */
    singleVehicleTransOrderId: string | undefined;
    /** 计划来源 */
    planType: DailySourcePlanRecordListDtoPlanType | undefined;
    readonly planTypeText: string | undefined;
    /** 业务单位（组织树） */
    orgUnitId: number | undefined;
    organizationUnitIdName: string | undefined;
    /** 货源日期 */
    sourceDate: moment.Moment | undefined;
    /** 客户 */
    customerId: number | undefined;
    customerName: string | undefined;
    /** 发货人 */
    shipper: number | undefined;
    shipperName: string | undefined;
    /** 收货人 */
    receiver: number | undefined;
    receiverName: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    cargoCategoryText: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    recordStatus: string | undefined;
    recordStatusText: string | undefined;
    statusRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 派车计划编号 */
    code: string | undefined;
    /** 派车计划行项目号 */
    itemCode: number | undefined;
    isActive: boolean | undefined;
    id: string | undefined;

    constructor(data?: IDailySourcePlanRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.singleVehicleTransOrderId = data["singleVehicleTransOrderId"];
            this.planType = data["planType"];
            (<any>this).planTypeText = data["planTypeText"];
            this.orgUnitId = data["orgUnitId"];
            this.organizationUnitIdName = data["organizationUnitIdName"];
            this.sourceDate = data["sourceDate"] ? moment(data["sourceDate"].toString()) : <any>undefined;
            this.customerId = data["customerId"];
            this.customerName = data["customerName"];
            this.shipper = data["shipper"];
            this.shipperName = data["shipperName"];
            this.receiver = data["receiver"];
            this.receiverName = data["receiverName"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceIdName = data["loadPlaceIdName"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.cargoCategory = data["cargoCategory"];
            this.cargoCategoryText = data["cargoCategoryText"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.cargoVarietyIdName = data["cargoVarietyIdName"];
            this.recordStatus = data["recordStatus"];
            this.recordStatusText = data["recordStatusText"];
            this.statusRemark = data["statusRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.remark = data["remark"];
            this.code = data["code"];
            this.itemCode = data["itemCode"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DailySourcePlanRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new DailySourcePlanRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["singleVehicleTransOrderId"] = this.singleVehicleTransOrderId;
        data["planType"] = this.planType;
        data["planTypeText"] = this.planTypeText;
        data["orgUnitId"] = this.orgUnitId;
        data["organizationUnitIdName"] = this.organizationUnitIdName;
        data["sourceDate"] = this.sourceDate ? this.sourceDate.toISOString() : <any>undefined;
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["shipper"] = this.shipper;
        data["shipperName"] = this.shipperName;
        data["receiver"] = this.receiver;
        data["receiverName"] = this.receiverName;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceIdName"] = this.loadPlaceIdName;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["cargoCategory"] = this.cargoCategory;
        data["cargoCategoryText"] = this.cargoCategoryText;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["cargoVarietyIdName"] = this.cargoVarietyIdName;
        data["recordStatus"] = this.recordStatus;
        data["recordStatusText"] = this.recordStatusText;
        data["statusRemark"] = this.statusRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["remark"] = this.remark;
        data["code"] = this.code;
        data["itemCode"] = this.itemCode;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }

    clone(): DailySourcePlanRecordListDto {
        const json = this.toJSON();
        let result = new DailySourcePlanRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IDailySourcePlanRecordListDto {
    /** 上级订单Id */
    singleVehicleTransOrderId: string | undefined;
    /** 计划来源 */
    planType: DailySourcePlanRecordListDtoPlanType | undefined;
    planTypeText: string | undefined;
    /** 业务单位（组织树） */
    orgUnitId: number | undefined;
    organizationUnitIdName: string | undefined;
    /** 货源日期 */
    sourceDate: moment.Moment | undefined;
    /** 客户 */
    customerId: number | undefined;
    customerName: string | undefined;
    /** 发货人 */
    shipper: number | undefined;
    shipperName: string | undefined;
    /** 收货人 */
    receiver: number | undefined;
    receiverName: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    cargoCategoryText: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    recordStatus: string | undefined;
    recordStatusText: string | undefined;
    statusRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 派车计划编号 */
    code: string | undefined;
    /** 派车计划行项目号 */
    itemCode: number | undefined;
    isActive: boolean | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfDailySourcePlanRecordListByMobileDto implements IPagedResultDtoOfDailySourcePlanRecordListByMobileDto {
    totalCount: number | undefined;
    items: DailySourcePlanRecordListByMobileDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDailySourcePlanRecordListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(DailySourcePlanRecordListByMobileDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDailySourcePlanRecordListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDailySourcePlanRecordListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfDailySourcePlanRecordListByMobileDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfDailySourcePlanRecordListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfDailySourcePlanRecordListByMobileDto {
    totalCount: number | undefined;
    items: DailySourcePlanRecordListByMobileDto[] | undefined;
}

export class DailySourcePlanRecordListByMobileDto implements IDailySourcePlanRecordListByMobileDto {
    /** 上级订单Id */
    singleVehicleTransOrderId: string | undefined;
    /** 计划来源 */
    planType: DailySourcePlanRecordListByMobileDtoPlanType | undefined;
    /** 计划来源文本 */
    readonly planTypeText: string | undefined;
    /** 业务单位（组织树） */
    orgUnitId: number | undefined;
    /** 业务单位名称 */
    organizationUnitIdName: string | undefined;
    /** 货源日期 */
    sourceDate: moment.Moment | undefined;
    /** 客户 */
    customerId: number | undefined;
    /** 客户名称 */
    customerName: string | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 发货人名称 */
    shipperName: string | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 收货人名称 */
    receiverName: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装地名称 */
    loadPlaceIdName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地名称 */
    unloadPlaceIdName: string | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货类名称 */
    cargoCategoryText: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
    /** 货品名称 */
    cargoVarietyIdName: string | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    recordStatus: string | undefined;
    /** 订单状态名称 */
    recordStatusText: string | undefined;
    /** 审核说明 */
    statusRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核时间 */
    auditDate: moment.Moment | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    id: string | undefined;

    constructor(data?: IDailySourcePlanRecordListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.singleVehicleTransOrderId = data["singleVehicleTransOrderId"];
            this.planType = data["planType"];
            (<any>this).planTypeText = data["planTypeText"];
            this.orgUnitId = data["orgUnitId"];
            this.organizationUnitIdName = data["organizationUnitIdName"];
            this.sourceDate = data["sourceDate"] ? moment(data["sourceDate"].toString()) : <any>undefined;
            this.customerId = data["customerId"];
            this.customerName = data["customerName"];
            this.shipper = data["shipper"];
            this.shipperName = data["shipperName"];
            this.receiver = data["receiver"];
            this.receiverName = data["receiverName"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceIdName = data["loadPlaceIdName"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.cargoCategory = data["cargoCategory"];
            this.cargoCategoryText = data["cargoCategoryText"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.cargoVarietyIdName = data["cargoVarietyIdName"];
            this.recordStatus = data["recordStatus"];
            this.recordStatusText = data["recordStatusText"];
            this.statusRemark = data["statusRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.remark = data["remark"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DailySourcePlanRecordListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new DailySourcePlanRecordListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["singleVehicleTransOrderId"] = this.singleVehicleTransOrderId;
        data["planType"] = this.planType;
        data["planTypeText"] = this.planTypeText;
        data["orgUnitId"] = this.orgUnitId;
        data["organizationUnitIdName"] = this.organizationUnitIdName;
        data["sourceDate"] = this.sourceDate ? this.sourceDate.toISOString() : <any>undefined;
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["shipper"] = this.shipper;
        data["shipperName"] = this.shipperName;
        data["receiver"] = this.receiver;
        data["receiverName"] = this.receiverName;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceIdName"] = this.loadPlaceIdName;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["cargoCategory"] = this.cargoCategory;
        data["cargoCategoryText"] = this.cargoCategoryText;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["cargoVarietyIdName"] = this.cargoVarietyIdName;
        data["recordStatus"] = this.recordStatus;
        data["recordStatusText"] = this.recordStatusText;
        data["statusRemark"] = this.statusRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["remark"] = this.remark;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }

    clone(): DailySourcePlanRecordListByMobileDto {
        const json = this.toJSON();
        let result = new DailySourcePlanRecordListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IDailySourcePlanRecordListByMobileDto {
    /** 上级订单Id */
    singleVehicleTransOrderId: string | undefined;
    /** 计划来源 */
    planType: DailySourcePlanRecordListByMobileDtoPlanType | undefined;
    /** 计划来源文本 */
    planTypeText: string | undefined;
    /** 业务单位（组织树） */
    orgUnitId: number | undefined;
    /** 业务单位名称 */
    organizationUnitIdName: string | undefined;
    /** 货源日期 */
    sourceDate: moment.Moment | undefined;
    /** 客户 */
    customerId: number | undefined;
    /** 客户名称 */
    customerName: string | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 发货人名称 */
    shipperName: string | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 收货人名称 */
    receiverName: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装地名称 */
    loadPlaceIdName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地名称 */
    unloadPlaceIdName: string | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货类名称 */
    cargoCategoryText: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
    /** 货品名称 */
    cargoVarietyIdName: string | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    recordStatus: string | undefined;
    /** 订单状态名称 */
    recordStatusText: string | undefined;
    /** 审核说明 */
    statusRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核时间 */
    auditDate: moment.Moment | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    id: string | undefined;
}

export class DailySourcePlanRecordEditDto implements IDailySourcePlanRecordEditDto {
    /** Id 主键 */
    id: string | undefined;
    /** 上级订单Id */
    singleVehicleTransOrderId: string | undefined;
    /** 计划来源 */
    planType: DailySourcePlanRecordEditDtoPlanType | undefined;
    /** 业务单位（组织树） */
    orgUnitId: number | undefined;
    /** 货源日期 */
    sourceDate: moment.Moment | undefined;
    /** 客户 */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
    /** 审核状态 */
    recordStatus: string | undefined;
    /** 审核说明 */
    statusRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 派车计划编号 */
    code: string | undefined;
    /** 派车计划行项目号 */
    itemCode: number | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IDailySourcePlanRecordEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.singleVehicleTransOrderId = data["singleVehicleTransOrderId"];
            this.planType = data["planType"];
            this.orgUnitId = data["orgUnitId"];
            this.sourceDate = data["sourceDate"] ? moment(data["sourceDate"].toString()) : <any>undefined;
            this.customerId = data["customerId"];
            this.shipper = data["shipper"];
            this.receiver = data["receiver"];
            this.loadPlaceId = data["loadPlaceId"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.cargoCategory = data["cargoCategory"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.recordStatus = data["recordStatus"];
            this.statusRemark = data["statusRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.isActive = data["isActive"];
            this.code = data["code"];
            this.itemCode = data["itemCode"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): DailySourcePlanRecordEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new DailySourcePlanRecordEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["singleVehicleTransOrderId"] = this.singleVehicleTransOrderId;
        data["planType"] = this.planType;
        data["orgUnitId"] = this.orgUnitId;
        data["sourceDate"] = this.sourceDate ? this.sourceDate.toISOString() : <any>undefined;
        data["customerId"] = this.customerId;
        data["shipper"] = this.shipper;
        data["receiver"] = this.receiver;
        data["loadPlaceId"] = this.loadPlaceId;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["cargoCategory"] = this.cargoCategory;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["recordStatus"] = this.recordStatus;
        data["statusRemark"] = this.statusRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["isActive"] = this.isActive;
        data["code"] = this.code;
        data["itemCode"] = this.itemCode;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): DailySourcePlanRecordEditDto {
        const json = this.toJSON();
        let result = new DailySourcePlanRecordEditDto();
        result.init(json);
        return result;
    }
}

export interface IDailySourcePlanRecordEditDto {
    /** Id 主键 */
    id: string | undefined;
    /** 上级订单Id */
    singleVehicleTransOrderId: string | undefined;
    /** 计划来源 */
    planType: DailySourcePlanRecordEditDtoPlanType | undefined;
    /** 业务单位（组织树） */
    orgUnitId: number | undefined;
    /** 货源日期 */
    sourceDate: moment.Moment | undefined;
    /** 客户 */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
    /** 审核状态 */
    recordStatus: string | undefined;
    /** 审核说明 */
    statusRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 派车计划编号 */
    code: string | undefined;
    /** 派车计划行项目号 */
    itemCode: number | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class DailySourcePlanEditDto implements IDailySourcePlanEditDto {
    dailySourcePlanRecord: DailySourcePlanRecordEditDto | undefined;

    constructor(data?: IDailySourcePlanEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dailySourcePlanRecord = data["dailySourcePlanRecord"] ? DailySourcePlanRecordEditDto.fromJS(data["dailySourcePlanRecord"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DailySourcePlanEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new DailySourcePlanEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dailySourcePlanRecord"] = this.dailySourcePlanRecord ? this.dailySourcePlanRecord.toJSON() : <any>undefined;
        return data; 
    }

    clone(): DailySourcePlanEditDto {
        const json = this.toJSON();
        let result = new DailySourcePlanEditDto();
        result.init(json);
        return result;
    }
}

export interface IDailySourcePlanEditDto {
    dailySourcePlanRecord: DailySourcePlanRecordEditDto | undefined;
}

export class DailySourcePlanApprovalEditDto implements IDailySourcePlanApprovalEditDto {
    dailySourcePlanRecord: DailySourcePlanRecordEditDto | undefined;

    constructor(data?: IDailySourcePlanApprovalEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dailySourcePlanRecord = data["dailySourcePlanRecord"] ? DailySourcePlanRecordEditDto.fromJS(data["dailySourcePlanRecord"]) : <any>undefined;
        }
    }

    static fromJS(data: any): DailySourcePlanApprovalEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new DailySourcePlanApprovalEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dailySourcePlanRecord"] = this.dailySourcePlanRecord ? this.dailySourcePlanRecord.toJSON() : <any>undefined;
        return data; 
    }

    clone(): DailySourcePlanApprovalEditDto {
        const json = this.toJSON();
        let result = new DailySourcePlanApprovalEditDto();
        result.init(json);
        return result;
    }
}

export interface IDailySourcePlanApprovalEditDto {
    dailySourcePlanRecord: DailySourcePlanRecordEditDto | undefined;
}

export class PagedResultDtoOfDataRuleListDto implements IPagedResultDtoOfDataRuleListDto {
    totalCount: number | undefined;
    items: DataRuleListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDataRuleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(DataRuleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDataRuleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDataRuleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfDataRuleListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfDataRuleListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfDataRuleListDto {
    totalCount: number | undefined;
    items: DataRuleListDto[] | undefined;
}

export class DataRuleListDto implements IDataRuleListDto {
    name: string | undefined;
    description: string | undefined;
    permissionObjectType: DataRuleListDtoPermissionObjectType | undefined;
    creationTime: moment.Moment | undefined;
    filterDescription: string | undefined;
    /** 记录是否被选择，应用于选择数据规则的功能处 */
    isCheck: boolean | undefined;
    id: number | undefined;

    constructor(data?: IDataRuleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
            this.permissionObjectType = data["permissionObjectType"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.filterDescription = data["filterDescription"];
            this.isCheck = data["isCheck"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DataRuleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataRuleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["permissionObjectType"] = this.permissionObjectType;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["filterDescription"] = this.filterDescription;
        data["isCheck"] = this.isCheck;
        data["id"] = this.id;
        return data; 
    }

    clone(): DataRuleListDto {
        const json = this.toJSON();
        let result = new DataRuleListDto();
        result.init(json);
        return result;
    }
}

export interface IDataRuleListDto {
    name: string | undefined;
    description: string | undefined;
    permissionObjectType: DataRuleListDtoPermissionObjectType | undefined;
    creationTime: moment.Moment | undefined;
    filterDescription: string | undefined;
    /** 记录是否被选择，应用于选择数据规则的功能处 */
    isCheck: boolean | undefined;
    id: number | undefined;
}

export class GetDataRuleForEditOutput implements IGetDataRuleForEditOutput {
    dataRule: DataRuleEditDto | undefined;
    dataFilters: DataFilterListDto[] | undefined;

    constructor(data?: IGetDataRuleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dataRule = data["dataRule"] ? DataRuleEditDto.fromJS(data["dataRule"]) : <any>undefined;
            if (data["dataFilters"] && data["dataFilters"].constructor === Array) {
                this.dataFilters = [] as any;
                for (let item of data["dataFilters"])
                    this.dataFilters.push(DataFilterListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetDataRuleForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetDataRuleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataRule"] = this.dataRule ? this.dataRule.toJSON() : <any>undefined;
        if (this.dataFilters && this.dataFilters.constructor === Array) {
            data["dataFilters"] = [];
            for (let item of this.dataFilters)
                data["dataFilters"].push(item.toJSON());
        }
        return data; 
    }

    clone(): GetDataRuleForEditOutput {
        const json = this.toJSON();
        let result = new GetDataRuleForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetDataRuleForEditOutput {
    dataRule: DataRuleEditDto | undefined;
    dataFilters: DataFilterListDto[] | undefined;
}

export class DataRuleEditDto implements IDataRuleEditDto {
    name: string | undefined;
    description: string | undefined;
    permissionObjectType: DataRuleEditDtoPermissionObjectType | undefined;
    id: number | undefined;

    constructor(data?: IDataRuleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.description = data["description"];
            this.permissionObjectType = data["permissionObjectType"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DataRuleEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataRuleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["permissionObjectType"] = this.permissionObjectType;
        data["id"] = this.id;
        return data; 
    }

    clone(): DataRuleEditDto {
        const json = this.toJSON();
        let result = new DataRuleEditDto();
        result.init(json);
        return result;
    }
}

export interface IDataRuleEditDto {
    name: string | undefined;
    description: string | undefined;
    permissionObjectType: DataRuleEditDtoPermissionObjectType | undefined;
    id: number | undefined;
}

export class DataFilterListDto implements IDataFilterListDto {
    /** 字段关系操作符操作方式 */
    relationOperator: DataFilterListDtoRelationOperator | undefined;
    readonly relationOperatorName: string | undefined;
    /** 数据对象取值（根据规则中的数据对象类型及操作符的不同，可能为具体的值 或 数据对象Id或组织区域Id） */
    value: string | undefined;
    /** 当数据对象取值为非具体值时的描述 */
    valueText: string | undefined;
    /** 同一数据对象多个条件过滤间逻辑运算符 */
    logicOperator: DataFilterListDtoLogicOperator | undefined;
    readonly logicOperatorName: string | undefined;
    /** 排序 值为1的时候为第一个条件 */
    order: number | undefined;
    dataRuleId: number | undefined;
    id: number | undefined;

    constructor(data?: IDataFilterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.relationOperator = data["relationOperator"];
            (<any>this).relationOperatorName = data["relationOperatorName"];
            this.value = data["value"];
            this.valueText = data["valueText"];
            this.logicOperator = data["logicOperator"];
            (<any>this).logicOperatorName = data["logicOperatorName"];
            this.order = data["order"];
            this.dataRuleId = data["dataRuleId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DataFilterListDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataFilterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relationOperator"] = this.relationOperator;
        data["relationOperatorName"] = this.relationOperatorName;
        data["value"] = this.value;
        data["valueText"] = this.valueText;
        data["logicOperator"] = this.logicOperator;
        data["logicOperatorName"] = this.logicOperatorName;
        data["order"] = this.order;
        data["dataRuleId"] = this.dataRuleId;
        data["id"] = this.id;
        return data; 
    }

    clone(): DataFilterListDto {
        const json = this.toJSON();
        let result = new DataFilterListDto();
        result.init(json);
        return result;
    }
}

export interface IDataFilterListDto {
    /** 字段关系操作符操作方式 */
    relationOperator: DataFilterListDtoRelationOperator | undefined;
    relationOperatorName: string | undefined;
    /** 数据对象取值（根据规则中的数据对象类型及操作符的不同，可能为具体的值 或 数据对象Id或组织区域Id） */
    value: string | undefined;
    /** 当数据对象取值为非具体值时的描述 */
    valueText: string | undefined;
    /** 同一数据对象多个条件过滤间逻辑运算符 */
    logicOperator: DataFilterListDtoLogicOperator | undefined;
    logicOperatorName: string | undefined;
    /** 排序 值为1的时候为第一个条件 */
    order: number | undefined;
    dataRuleId: number | undefined;
    id: number | undefined;
}

export class CreateOrUpdateDataRuleInput implements ICreateOrUpdateDataRuleInput {
    dataRule: DataRuleEditDto | undefined;
    dataFilters: DataFilterEditDto[] | undefined;

    constructor(data?: ICreateOrUpdateDataRuleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dataRule = data["dataRule"] ? DataRuleEditDto.fromJS(data["dataRule"]) : <any>undefined;
            if (data["dataFilters"] && data["dataFilters"].constructor === Array) {
                this.dataFilters = [] as any;
                for (let item of data["dataFilters"])
                    this.dataFilters.push(DataFilterEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateDataRuleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateDataRuleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dataRule"] = this.dataRule ? this.dataRule.toJSON() : <any>undefined;
        if (this.dataFilters && this.dataFilters.constructor === Array) {
            data["dataFilters"] = [];
            for (let item of this.dataFilters)
                data["dataFilters"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateOrUpdateDataRuleInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateDataRuleInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateDataRuleInput {
    dataRule: DataRuleEditDto | undefined;
    dataFilters: DataFilterEditDto[] | undefined;
}

export class DataFilterEditDto implements IDataFilterEditDto {
    /** 字段关系操作符操作方式 */
    relationOperator: DataFilterEditDtoRelationOperator | undefined;
    /** 数据对象取值（根据规则中的数据对象类型不同，可能为具体的值 或 数据对象Id） */
    value: string | undefined;
    /** 同一数据对象多个条件过滤间逻辑运算符 */
    logicOperator: DataFilterEditDtoLogicOperator | undefined;
    /** 排序 值为1的时候为第一个条件 */
    order: number | undefined;
    dataRuleId: number | undefined;
    id: number | undefined;

    constructor(data?: IDataFilterEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.relationOperator = data["relationOperator"];
            this.value = data["value"];
            this.logicOperator = data["logicOperator"];
            this.order = data["order"];
            this.dataRuleId = data["dataRuleId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DataFilterEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new DataFilterEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["relationOperator"] = this.relationOperator;
        data["value"] = this.value;
        data["logicOperator"] = this.logicOperator;
        data["order"] = this.order;
        data["dataRuleId"] = this.dataRuleId;
        data["id"] = this.id;
        return data; 
    }

    clone(): DataFilterEditDto {
        const json = this.toJSON();
        let result = new DataFilterEditDto();
        result.init(json);
        return result;
    }
}

export interface IDataFilterEditDto {
    /** 字段关系操作符操作方式 */
    relationOperator: DataFilterEditDtoRelationOperator | undefined;
    /** 数据对象取值（根据规则中的数据对象类型不同，可能为具体的值 或 数据对象Id） */
    value: string | undefined;
    /** 同一数据对象多个条件过滤间逻辑运算符 */
    logicOperator: DataFilterEditDtoLogicOperator | undefined;
    /** 排序 值为1的时候为第一个条件 */
    order: number | undefined;
    dataRuleId: number | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfDeliveryOrderRecordListDto implements IPagedResultDtoOfDeliveryOrderRecordListDto {
    totalCount: number | undefined;
    items: DeliveryOrderRecordListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDeliveryOrderRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(DeliveryOrderRecordListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDeliveryOrderRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDeliveryOrderRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfDeliveryOrderRecordListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfDeliveryOrderRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfDeliveryOrderRecordListDto {
    totalCount: number | undefined;
    items: DeliveryOrderRecordListDto[] | undefined;
}

export class DeliveryOrderRecordListDto implements IDeliveryOrderRecordListDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 业务单位 */
    organizationUnitName: string | undefined;
    /** 提货单生成日期 */
    generateDate: moment.Moment | undefined;
    /** 托运客户 */
    consignmentCustomerId: number | undefined;
    /** 托运客户名 */
    consignmentCustomerName: string | undefined;
    /** 发货人 */
    consignorId: number | undefined;
    /** 发货人-文本 */
    consignorName: string | undefined;
    /** 收货人 */
    consigneeId: number | undefined;
    /** 收货人-文本 */
    consigneeName: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装地名 */
    loadPlaceName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地名 */
    unloadPlaceName: string | undefined;
    /** 货类 */
    goodsCategory: string | undefined;
    goodsCategoryText: string | undefined;
    /** 货物（物料） */
    goodsId: number | undefined;
    /** 货物名 */
    goodsName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 主车车牌号 */
    mainVehiclePlate: string | undefined;
    /** 提货单来源（mes,系统自建） */
    source: DeliveryOrderRecordListDtoSource | undefined;
    readonly sourceText: string | undefined;
    /** 提货单状态 */
    deliveryOrderState: DeliveryOrderRecordListDtoDeliveryOrderState | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 派车计划编号 */
    dailyPlanCode: string | undefined;
    /** 派车计划行项目号 */
    dailyPlanItemCode: number | undefined;
    /** 是否自备车辆 */
    isSelf: string | undefined;
    /** 随机码 */
    randomNumber: string | undefined;
    /** 运输供应商 */
    transSupplierNumber: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** MES煤种描述 */
    coalText: string | undefined;
    /** 提货单创建人 */
    generatePerson: string | undefined;
    /** IC卡号 */
    icNumber: string | undefined;
    /** RFID卡号 */
    rfidNumber: string | undefined;
    /** 采购订单编号 */
    purchaseOrderCode: string | undefined;
    /** 采购订单项目号 */
    purchaseOrderItemCode: number | undefined;
    /** 关联二次提煤单号 */
    deliveryOrderCodeWithSencond: string | undefined;
    /** 打印完成标识 */
    isPrint: string | undefined;
    /** 二维码信息 */
    barcode: string | undefined;
    /** 0-煤问题生成，1-IC卡生成，2-伊信云生成 */
    generateType: string | undefined;
    /** MES工厂名称 */
    werkName: string | undefined;
    /** MES供应商名称 */
    sunuName: string | undefined;
    /** MES运输供应商名称 */
    ysSunuName: string | undefined;
    /** 入库凭证号- */
    inStockNumber: string | undefined;
    /** -
            卸车凭证号 */
    unloadForInStockNumber: string | undefined;
    /** 毛重 */
    inStockGrossWeigh: number | undefined;
    /** 皮重 */
    inStockSkinWeigh: number | undefined;
    /** 出库毛重 */
    outInStockGrossWeigh: number | undefined;
    /** 净重 */
    inStockNetWeigh: number | undefined;
    /** 创建人 */
    inStockGeneratePerson: string | undefined;
    /** MES生成时间字符串 */
    inStockGenerateTime: string | undefined;
    /** 回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 运输净重 */
    transNetWeigh: number | undefined;
    /** 运价 */
    transPrice: number | undefined;
    /** 参考运费 */
    withTransFee: number | undefined;
    /** 运费 */
    transFee: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 损耗超标扣吨 */
    deductionTon: number | undefined;
    /** 损耗超标扣款 */
    deductionFee: number | undefined;
    /** 无车承运平台计算运费 */
    transFeeForElectronicWayBill: number | undefined;
    /** 超损耗范围 */
    deductionTonAres: number | undefined;
    /** 废煤标识 */
    wasteCoalMark: string | undefined;
    /** 称重时间 */
    weighDate: moment.Moment | undefined;
    /** 出库单号- */
    outStockNumber: string | undefined;
    /** -
            装车凭证号 */
    loadForOutStockNumber: string | undefined;
    /** 工厂 */
    outStockFactory: string | undefined;
    /** 库存地点 */
    outStockStockNumber: string | undefined;
    /** MES生成时间字符串 */
    outStockGenerateTime: string | undefined;
    /** 操作日期 */
    outStockGenerateDate: moment.Moment | undefined;
    /** 创建人 */
    outStockGeneratePerson: string | undefined;
    /** 客户号-MES */
    outStockCustomerCode: string | undefined;
    /** 毛重 */
    outStockGrossWeigh: number | undefined;
    /** 皮重 */
    outStockSkinWeigh: number | undefined;
    /** 净重 */
    outStockNetWeigh: number | undefined;
    /** 公司 */
    outStockCompany: string | undefined;
    id: string | undefined;

    constructor(data?: IDeliveryOrderRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.generateDate = data["generateDate"] ? moment(data["generateDate"].toString()) : <any>undefined;
            this.consignmentCustomerId = data["consignmentCustomerId"];
            this.consignmentCustomerName = data["consignmentCustomerName"];
            this.consignorId = data["consignorId"];
            this.consignorName = data["consignorName"];
            this.consigneeId = data["consigneeId"];
            this.consigneeName = data["consigneeName"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceName = data["loadPlaceName"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceName = data["unloadPlaceName"];
            this.goodsCategory = data["goodsCategory"];
            this.goodsCategoryText = data["goodsCategoryText"];
            this.goodsId = data["goodsId"];
            this.goodsName = data["goodsName"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.source = data["source"];
            (<any>this).sourceText = data["sourceText"];
            this.deliveryOrderState = data["deliveryOrderState"];
            this.deliveryOrderCode = data["deliveryOrderCode"];
            this.dailyPlanCode = data["dailyPlanCode"];
            this.dailyPlanItemCode = data["dailyPlanItemCode"];
            this.isSelf = data["isSelf"];
            this.randomNumber = data["randomNumber"];
            this.transSupplierNumber = data["transSupplierNumber"];
            this.remark = data["remark"];
            this.coalText = data["coalText"];
            this.generatePerson = data["generatePerson"];
            this.icNumber = data["icNumber"];
            this.rfidNumber = data["rfidNumber"];
            this.purchaseOrderCode = data["purchaseOrderCode"];
            this.purchaseOrderItemCode = data["purchaseOrderItemCode"];
            this.deliveryOrderCodeWithSencond = data["deliveryOrderCodeWithSencond"];
            this.isPrint = data["isPrint"];
            this.barcode = data["barcode"];
            this.generateType = data["generateType"];
            this.werkName = data["werkName"];
            this.sunuName = data["sunuName"];
            this.ysSunuName = data["ysSunuName"];
            this.inStockNumber = data["inStockNumber"];
            this.unloadForInStockNumber = data["unloadForInStockNumber"];
            this.inStockGrossWeigh = data["inStockGrossWeigh"];
            this.inStockSkinWeigh = data["inStockSkinWeigh"];
            this.outInStockGrossWeigh = data["outInStockGrossWeigh"];
            this.inStockNetWeigh = data["inStockNetWeigh"];
            this.inStockGeneratePerson = data["inStockGeneratePerson"];
            this.inStockGenerateTime = data["inStockGenerateTime"];
            this.skinbackDate = data["skinbackDate"] ? moment(data["skinbackDate"].toString()) : <any>undefined;
            this.transNetWeigh = data["transNetWeigh"];
            this.transPrice = data["transPrice"];
            this.withTransFee = data["withTransFee"];
            this.transFee = data["transFee"];
            this.reduceTransFee = data["reduceTransFee"];
            this.addTransFee = data["addTransFee"];
            this.deductionTon = data["deductionTon"];
            this.deductionFee = data["deductionFee"];
            this.transFeeForElectronicWayBill = data["transFeeForElectronicWayBill"];
            this.deductionTonAres = data["deductionTonAres"];
            this.wasteCoalMark = data["wasteCoalMark"];
            this.weighDate = data["weighDate"] ? moment(data["weighDate"].toString()) : <any>undefined;
            this.outStockNumber = data["outStockNumber"];
            this.loadForOutStockNumber = data["loadForOutStockNumber"];
            this.outStockFactory = data["outStockFactory"];
            this.outStockStockNumber = data["outStockStockNumber"];
            this.outStockGenerateTime = data["outStockGenerateTime"];
            this.outStockGenerateDate = data["outStockGenerateDate"] ? moment(data["outStockGenerateDate"].toString()) : <any>undefined;
            this.outStockGeneratePerson = data["outStockGeneratePerson"];
            this.outStockCustomerCode = data["outStockCustomerCode"];
            this.outStockGrossWeigh = data["outStockGrossWeigh"];
            this.outStockSkinWeigh = data["outStockSkinWeigh"];
            this.outStockNetWeigh = data["outStockNetWeigh"];
            this.outStockCompany = data["outStockCompany"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DeliveryOrderRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryOrderRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["generateDate"] = this.generateDate ? this.generateDate.toISOString() : <any>undefined;
        data["consignmentCustomerId"] = this.consignmentCustomerId;
        data["consignmentCustomerName"] = this.consignmentCustomerName;
        data["consignorId"] = this.consignorId;
        data["consignorName"] = this.consignorName;
        data["consigneeId"] = this.consigneeId;
        data["consigneeName"] = this.consigneeName;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceName"] = this.loadPlaceName;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceName"] = this.unloadPlaceName;
        data["goodsCategory"] = this.goodsCategory;
        data["goodsCategoryText"] = this.goodsCategoryText;
        data["goodsId"] = this.goodsId;
        data["goodsName"] = this.goodsName;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["source"] = this.source;
        data["sourceText"] = this.sourceText;
        data["deliveryOrderState"] = this.deliveryOrderState;
        data["deliveryOrderCode"] = this.deliveryOrderCode;
        data["dailyPlanCode"] = this.dailyPlanCode;
        data["dailyPlanItemCode"] = this.dailyPlanItemCode;
        data["isSelf"] = this.isSelf;
        data["randomNumber"] = this.randomNumber;
        data["transSupplierNumber"] = this.transSupplierNumber;
        data["remark"] = this.remark;
        data["coalText"] = this.coalText;
        data["generatePerson"] = this.generatePerson;
        data["icNumber"] = this.icNumber;
        data["rfidNumber"] = this.rfidNumber;
        data["purchaseOrderCode"] = this.purchaseOrderCode;
        data["purchaseOrderItemCode"] = this.purchaseOrderItemCode;
        data["deliveryOrderCodeWithSencond"] = this.deliveryOrderCodeWithSencond;
        data["isPrint"] = this.isPrint;
        data["barcode"] = this.barcode;
        data["generateType"] = this.generateType;
        data["werkName"] = this.werkName;
        data["sunuName"] = this.sunuName;
        data["ysSunuName"] = this.ysSunuName;
        data["inStockNumber"] = this.inStockNumber;
        data["unloadForInStockNumber"] = this.unloadForInStockNumber;
        data["inStockGrossWeigh"] = this.inStockGrossWeigh;
        data["inStockSkinWeigh"] = this.inStockSkinWeigh;
        data["outInStockGrossWeigh"] = this.outInStockGrossWeigh;
        data["inStockNetWeigh"] = this.inStockNetWeigh;
        data["inStockGeneratePerson"] = this.inStockGeneratePerson;
        data["inStockGenerateTime"] = this.inStockGenerateTime;
        data["skinbackDate"] = this.skinbackDate ? this.skinbackDate.toISOString() : <any>undefined;
        data["transNetWeigh"] = this.transNetWeigh;
        data["transPrice"] = this.transPrice;
        data["withTransFee"] = this.withTransFee;
        data["transFee"] = this.transFee;
        data["reduceTransFee"] = this.reduceTransFee;
        data["addTransFee"] = this.addTransFee;
        data["deductionTon"] = this.deductionTon;
        data["deductionFee"] = this.deductionFee;
        data["transFeeForElectronicWayBill"] = this.transFeeForElectronicWayBill;
        data["deductionTonAres"] = this.deductionTonAres;
        data["wasteCoalMark"] = this.wasteCoalMark;
        data["weighDate"] = this.weighDate ? this.weighDate.toISOString() : <any>undefined;
        data["outStockNumber"] = this.outStockNumber;
        data["loadForOutStockNumber"] = this.loadForOutStockNumber;
        data["outStockFactory"] = this.outStockFactory;
        data["outStockStockNumber"] = this.outStockStockNumber;
        data["outStockGenerateTime"] = this.outStockGenerateTime;
        data["outStockGenerateDate"] = this.outStockGenerateDate ? this.outStockGenerateDate.toISOString() : <any>undefined;
        data["outStockGeneratePerson"] = this.outStockGeneratePerson;
        data["outStockCustomerCode"] = this.outStockCustomerCode;
        data["outStockGrossWeigh"] = this.outStockGrossWeigh;
        data["outStockSkinWeigh"] = this.outStockSkinWeigh;
        data["outStockNetWeigh"] = this.outStockNetWeigh;
        data["outStockCompany"] = this.outStockCompany;
        data["id"] = this.id;
        return data; 
    }

    clone(): DeliveryOrderRecordListDto {
        const json = this.toJSON();
        let result = new DeliveryOrderRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IDeliveryOrderRecordListDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 业务单位 */
    organizationUnitName: string | undefined;
    /** 提货单生成日期 */
    generateDate: moment.Moment | undefined;
    /** 托运客户 */
    consignmentCustomerId: number | undefined;
    /** 托运客户名 */
    consignmentCustomerName: string | undefined;
    /** 发货人 */
    consignorId: number | undefined;
    /** 发货人-文本 */
    consignorName: string | undefined;
    /** 收货人 */
    consigneeId: number | undefined;
    /** 收货人-文本 */
    consigneeName: string | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装地名 */
    loadPlaceName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地名 */
    unloadPlaceName: string | undefined;
    /** 货类 */
    goodsCategory: string | undefined;
    goodsCategoryText: string | undefined;
    /** 货物（物料） */
    goodsId: number | undefined;
    /** 货物名 */
    goodsName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 主车车牌号 */
    mainVehiclePlate: string | undefined;
    /** 提货单来源（mes,系统自建） */
    source: DeliveryOrderRecordListDtoSource | undefined;
    sourceText: string | undefined;
    /** 提货单状态 */
    deliveryOrderState: DeliveryOrderRecordListDtoDeliveryOrderState | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 派车计划编号 */
    dailyPlanCode: string | undefined;
    /** 派车计划行项目号 */
    dailyPlanItemCode: number | undefined;
    /** 是否自备车辆 */
    isSelf: string | undefined;
    /** 随机码 */
    randomNumber: string | undefined;
    /** 运输供应商 */
    transSupplierNumber: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** MES煤种描述 */
    coalText: string | undefined;
    /** 提货单创建人 */
    generatePerson: string | undefined;
    /** IC卡号 */
    icNumber: string | undefined;
    /** RFID卡号 */
    rfidNumber: string | undefined;
    /** 采购订单编号 */
    purchaseOrderCode: string | undefined;
    /** 采购订单项目号 */
    purchaseOrderItemCode: number | undefined;
    /** 关联二次提煤单号 */
    deliveryOrderCodeWithSencond: string | undefined;
    /** 打印完成标识 */
    isPrint: string | undefined;
    /** 二维码信息 */
    barcode: string | undefined;
    /** 0-煤问题生成，1-IC卡生成，2-伊信云生成 */
    generateType: string | undefined;
    /** MES工厂名称 */
    werkName: string | undefined;
    /** MES供应商名称 */
    sunuName: string | undefined;
    /** MES运输供应商名称 */
    ysSunuName: string | undefined;
    /** 入库凭证号- */
    inStockNumber: string | undefined;
    /** -
            卸车凭证号 */
    unloadForInStockNumber: string | undefined;
    /** 毛重 */
    inStockGrossWeigh: number | undefined;
    /** 皮重 */
    inStockSkinWeigh: number | undefined;
    /** 出库毛重 */
    outInStockGrossWeigh: number | undefined;
    /** 净重 */
    inStockNetWeigh: number | undefined;
    /** 创建人 */
    inStockGeneratePerson: string | undefined;
    /** MES生成时间字符串 */
    inStockGenerateTime: string | undefined;
    /** 回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 运输净重 */
    transNetWeigh: number | undefined;
    /** 运价 */
    transPrice: number | undefined;
    /** 参考运费 */
    withTransFee: number | undefined;
    /** 运费 */
    transFee: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 损耗超标扣吨 */
    deductionTon: number | undefined;
    /** 损耗超标扣款 */
    deductionFee: number | undefined;
    /** 无车承运平台计算运费 */
    transFeeForElectronicWayBill: number | undefined;
    /** 超损耗范围 */
    deductionTonAres: number | undefined;
    /** 废煤标识 */
    wasteCoalMark: string | undefined;
    /** 称重时间 */
    weighDate: moment.Moment | undefined;
    /** 出库单号- */
    outStockNumber: string | undefined;
    /** -
            装车凭证号 */
    loadForOutStockNumber: string | undefined;
    /** 工厂 */
    outStockFactory: string | undefined;
    /** 库存地点 */
    outStockStockNumber: string | undefined;
    /** MES生成时间字符串 */
    outStockGenerateTime: string | undefined;
    /** 操作日期 */
    outStockGenerateDate: moment.Moment | undefined;
    /** 创建人 */
    outStockGeneratePerson: string | undefined;
    /** 客户号-MES */
    outStockCustomerCode: string | undefined;
    /** 毛重 */
    outStockGrossWeigh: number | undefined;
    /** 皮重 */
    outStockSkinWeigh: number | undefined;
    /** 净重 */
    outStockNetWeigh: number | undefined;
    /** 公司 */
    outStockCompany: string | undefined;
    id: string | undefined;
}

export class NowDeliveryOrderRecordListByMobileDto implements INowDeliveryOrderRecordListByMobileDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 提货单状态 */
    deliveryOrderState: NowDeliveryOrderRecordListByMobileDtoDeliveryOrderState | undefined;
    /** 提货单状态名称 */
    readonly deliveryOrderStateText: string | undefined;
    /** 提货单生成日期 */
    generateDate: moment.Moment | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装地名称 */
    loadPlaceName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地名称 */
    unloadPlaceName: string | undefined;
    /** 货物（物料） */
    goodsId: number | undefined;
    /** 货物名称 */
    goodsName: string | undefined;
    /** 派单方式（0-煤问题生成，1-IC卡生成，2-伊信云生成） */
    generateType: string | undefined;
    /** 二维码信息（只有派单方式为：2-物流服务平台派单的才显示二维码。） */
    barcode: string | undefined;

    constructor(data?: INowDeliveryOrderRecordListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.deliveryOrderCode = data["deliveryOrderCode"];
            this.deliveryOrderState = data["deliveryOrderState"];
            (<any>this).deliveryOrderStateText = data["deliveryOrderStateText"];
            this.generateDate = data["generateDate"] ? moment(data["generateDate"].toString()) : <any>undefined;
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceName = data["loadPlaceName"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceName = data["unloadPlaceName"];
            this.goodsId = data["goodsId"];
            this.goodsName = data["goodsName"];
            this.generateType = data["generateType"];
            this.barcode = data["barcode"];
        }
    }

    static fromJS(data: any): NowDeliveryOrderRecordListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new NowDeliveryOrderRecordListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["deliveryOrderCode"] = this.deliveryOrderCode;
        data["deliveryOrderState"] = this.deliveryOrderState;
        data["deliveryOrderStateText"] = this.deliveryOrderStateText;
        data["generateDate"] = this.generateDate ? this.generateDate.toISOString() : <any>undefined;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceName"] = this.loadPlaceName;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceName"] = this.unloadPlaceName;
        data["goodsId"] = this.goodsId;
        data["goodsName"] = this.goodsName;
        data["generateType"] = this.generateType;
        data["barcode"] = this.barcode;
        return data; 
    }

    clone(): NowDeliveryOrderRecordListByMobileDto {
        const json = this.toJSON();
        let result = new NowDeliveryOrderRecordListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface INowDeliveryOrderRecordListByMobileDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 提货单状态 */
    deliveryOrderState: NowDeliveryOrderRecordListByMobileDtoDeliveryOrderState | undefined;
    /** 提货单状态名称 */
    deliveryOrderStateText: string | undefined;
    /** 提货单生成日期 */
    generateDate: moment.Moment | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装地名称 */
    loadPlaceName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地名称 */
    unloadPlaceName: string | undefined;
    /** 货物（物料） */
    goodsId: number | undefined;
    /** 货物名称 */
    goodsName: string | undefined;
    /** 派单方式（0-煤问题生成，1-IC卡生成，2-伊信云生成） */
    generateType: string | undefined;
    /** 二维码信息（只有派单方式为：2-物流服务平台派单的才显示二维码。） */
    barcode: string | undefined;
}

export class PagedResultDtoOfDeliveryOrderRecordListByMobileDto implements IPagedResultDtoOfDeliveryOrderRecordListByMobileDto {
    totalCount: number | undefined;
    items: DeliveryOrderRecordListByMobileDto[] | undefined;

    constructor(data?: IPagedResultDtoOfDeliveryOrderRecordListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(DeliveryOrderRecordListByMobileDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfDeliveryOrderRecordListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfDeliveryOrderRecordListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfDeliveryOrderRecordListByMobileDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfDeliveryOrderRecordListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfDeliveryOrderRecordListByMobileDto {
    totalCount: number | undefined;
    items: DeliveryOrderRecordListByMobileDto[] | undefined;
}

export class DeliveryOrderRecordListByMobileDto implements IDeliveryOrderRecordListByMobileDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 提货单状态（未完成 =0,生成装车凭证 = 1,生成卸车凭证 = 2,生成入库凭证 = 3,作废 = 4,锁定 = 5） */
    deliveryOrderState: DeliveryOrderRecordListByMobileDtoDeliveryOrderState | undefined;
    /** 提货单状态名称 */
    readonly deliveryOrderStateText: string | undefined;
    /** 提货单生成日期 */
    generateDate: moment.Moment | undefined;
    /** 装地-提货点 */
    loadPlaceId: number | undefined;
    /** 装地名称 */
    loadPlaceName: string | undefined;
    /** 卸地-采购方 */
    unloadPlaceId: number | undefined;
    /** 卸地名称 */
    unloadPlaceName: string | undefined;
    /** 货物（物料） */
    goodsId: number | undefined;
    /** 货物名称 */
    goodsName: string | undefined;
    /** 提货点称重时间 */
    outStockGenerateDate: moment.Moment | undefined;
    /** 提货点净重 */
    outStockNetWeigh: number | undefined;
    /** 采购方回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 采购方称重时间 */
    weighDate: moment.Moment | undefined;
    /** 采购方毛重 */
    inStockGrossWeigh: number | undefined;
    /** 采购方净重 */
    inStockNetWeigh: number | undefined;
    id: string | undefined;

    constructor(data?: IDeliveryOrderRecordListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.deliveryOrderCode = data["deliveryOrderCode"];
            this.deliveryOrderState = data["deliveryOrderState"];
            (<any>this).deliveryOrderStateText = data["deliveryOrderStateText"];
            this.generateDate = data["generateDate"] ? moment(data["generateDate"].toString()) : <any>undefined;
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceName = data["loadPlaceName"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceName = data["unloadPlaceName"];
            this.goodsId = data["goodsId"];
            this.goodsName = data["goodsName"];
            this.outStockGenerateDate = data["outStockGenerateDate"] ? moment(data["outStockGenerateDate"].toString()) : <any>undefined;
            this.outStockNetWeigh = data["outStockNetWeigh"];
            this.skinbackDate = data["skinbackDate"] ? moment(data["skinbackDate"].toString()) : <any>undefined;
            this.weighDate = data["weighDate"] ? moment(data["weighDate"].toString()) : <any>undefined;
            this.inStockGrossWeigh = data["inStockGrossWeigh"];
            this.inStockNetWeigh = data["inStockNetWeigh"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): DeliveryOrderRecordListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new DeliveryOrderRecordListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["deliveryOrderCode"] = this.deliveryOrderCode;
        data["deliveryOrderState"] = this.deliveryOrderState;
        data["deliveryOrderStateText"] = this.deliveryOrderStateText;
        data["generateDate"] = this.generateDate ? this.generateDate.toISOString() : <any>undefined;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceName"] = this.loadPlaceName;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceName"] = this.unloadPlaceName;
        data["goodsId"] = this.goodsId;
        data["goodsName"] = this.goodsName;
        data["outStockGenerateDate"] = this.outStockGenerateDate ? this.outStockGenerateDate.toISOString() : <any>undefined;
        data["outStockNetWeigh"] = this.outStockNetWeigh;
        data["skinbackDate"] = this.skinbackDate ? this.skinbackDate.toISOString() : <any>undefined;
        data["weighDate"] = this.weighDate ? this.weighDate.toISOString() : <any>undefined;
        data["inStockGrossWeigh"] = this.inStockGrossWeigh;
        data["inStockNetWeigh"] = this.inStockNetWeigh;
        data["id"] = this.id;
        return data; 
    }

    clone(): DeliveryOrderRecordListByMobileDto {
        const json = this.toJSON();
        let result = new DeliveryOrderRecordListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IDeliveryOrderRecordListByMobileDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 提货单状态（未完成 =0,生成装车凭证 = 1,生成卸车凭证 = 2,生成入库凭证 = 3,作废 = 4,锁定 = 5） */
    deliveryOrderState: DeliveryOrderRecordListByMobileDtoDeliveryOrderState | undefined;
    /** 提货单状态名称 */
    deliveryOrderStateText: string | undefined;
    /** 提货单生成日期 */
    generateDate: moment.Moment | undefined;
    /** 装地-提货点 */
    loadPlaceId: number | undefined;
    /** 装地名称 */
    loadPlaceName: string | undefined;
    /** 卸地-采购方 */
    unloadPlaceId: number | undefined;
    /** 卸地名称 */
    unloadPlaceName: string | undefined;
    /** 货物（物料） */
    goodsId: number | undefined;
    /** 货物名称 */
    goodsName: string | undefined;
    /** 提货点称重时间 */
    outStockGenerateDate: moment.Moment | undefined;
    /** 提货点净重 */
    outStockNetWeigh: number | undefined;
    /** 采购方回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 采购方称重时间 */
    weighDate: moment.Moment | undefined;
    /** 采购方毛重 */
    inStockGrossWeigh: number | undefined;
    /** 采购方净重 */
    inStockNetWeigh: number | undefined;
    id: string | undefined;
}

export class GetElectronicWayBillInput implements IGetElectronicWayBillInput {
    filter: string | undefined;
    vehicleClassificationCode: string | undefined;
    beginDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
    uploadStarus: GetElectronicWayBillInputUploadStarus | undefined;
    checkStatus: GetElectronicWayBillInputCheckStatus | undefined;
    sorting: string | undefined;
    maxResultCount: number | undefined;
    skipCount: number | undefined;

    constructor(data?: IGetElectronicWayBillInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.filter = data["filter"];
            this.vehicleClassificationCode = data["vehicleClassificationCode"];
            this.beginDate = data["beginDate"] ? moment(data["beginDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.uploadStarus = data["uploadStarus"];
            this.checkStatus = data["checkStatus"];
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    }

    static fromJS(data: any): GetElectronicWayBillInput {
        data = typeof data === 'object' ? data : {};
        let result = new GetElectronicWayBillInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter;
        data["vehicleClassificationCode"] = this.vehicleClassificationCode;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["uploadStarus"] = this.uploadStarus;
        data["checkStatus"] = this.checkStatus;
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data; 
    }

    clone(): GetElectronicWayBillInput {
        const json = this.toJSON();
        let result = new GetElectronicWayBillInput();
        result.init(json);
        return result;
    }
}

export interface IGetElectronicWayBillInput {
    filter: string | undefined;
    vehicleClassificationCode: string | undefined;
    beginDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
    uploadStarus: GetElectronicWayBillInputUploadStarus | undefined;
    checkStatus: GetElectronicWayBillInputCheckStatus | undefined;
    sorting: string | undefined;
    maxResultCount: number | undefined;
    skipCount: number | undefined;
}

export class PagedResultDtoOfElectronicWayBillDetailDto implements IPagedResultDtoOfElectronicWayBillDetailDto {
    totalCount: number | undefined;
    items: ElectronicWayBillDetailDto[] | undefined;

    constructor(data?: IPagedResultDtoOfElectronicWayBillDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(ElectronicWayBillDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfElectronicWayBillDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfElectronicWayBillDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfElectronicWayBillDetailDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfElectronicWayBillDetailDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfElectronicWayBillDetailDto {
    totalCount: number | undefined;
    items: ElectronicWayBillDetailDto[] | undefined;
}

export class ElectronicWayBillDetailDto implements IElectronicWayBillDetailDto {
    originalDocumentNumber: string | undefined;
    shippingNoteNumber: string | undefined;
    carrier: string | undefined;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment | undefined;
    businessTypeCode: string | undefined;
    despatchActualDateTime: moment.Moment | undefined;
    goodsReceiptDateTime: moment.Moment | undefined;
    consignor: string | undefined;
    personalIdentityDocument: string | undefined;
    placeOfLoading: string | undefined;
    countrySubdivisionCode: string | undefined;
    countrySubdivisionCodeText: string | undefined;
    consignee: string | undefined;
    goodsReceiptPlace: string | undefined;
    consigneeInfoCountrySubdivisionCode: string | undefined;
    consigneeInfoCountrySubdivisionCodeText: string | undefined;
    totalMonetaryAmount: number | undefined;
    remark: string | undefined;
    licensePlateTypeCode: string | undefined;
    licensePlateTypeCodeText: string | undefined;
    vehicleNumber: string | undefined;
    vehicleClassificationCode: string | undefined;
    vehicleClassificationCodeText: string | undefined;
    vehicleTonnage: number | undefined;
    roadTransportCertificateNumber: string | undefined;
    trailerVehiclePlateNumber: string | undefined;
    vehicleInfoPermitNumber: string | undefined;
    descriptionOfGoods: string | undefined;
    cargoTypeClassificationCode: string | undefined;
    cargoTypeClassificationCodeText: string | undefined;
    goodsItemGrossWeight: number | undefined;
    isSuccessStates: boolean | undefined;
    vehicleId: string | undefined;
    message: string | undefined;
    isValidate: boolean | undefined;

    constructor(data?: IElectronicWayBillDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalDocumentNumber = data["originalDocumentNumber"];
            this.shippingNoteNumber = data["shippingNoteNumber"];
            this.carrier = data["carrier"];
            this.unifiedSocialCreditIdentifier = data["unifiedSocialCreditIdentifier"];
            this.permitNumber = data["permitNumber"];
            this.consignmentDateTime = data["consignmentDateTime"] ? moment(data["consignmentDateTime"].toString()) : <any>undefined;
            this.businessTypeCode = data["businessTypeCode"];
            this.despatchActualDateTime = data["despatchActualDateTime"] ? moment(data["despatchActualDateTime"].toString()) : <any>undefined;
            this.goodsReceiptDateTime = data["goodsReceiptDateTime"] ? moment(data["goodsReceiptDateTime"].toString()) : <any>undefined;
            this.consignor = data["consignor"];
            this.personalIdentityDocument = data["personalIdentityDocument"];
            this.placeOfLoading = data["placeOfLoading"];
            this.countrySubdivisionCode = data["countrySubdivisionCode"];
            this.countrySubdivisionCodeText = data["countrySubdivisionCodeText"];
            this.consignee = data["consignee"];
            this.goodsReceiptPlace = data["goodsReceiptPlace"];
            this.consigneeInfoCountrySubdivisionCode = data["consigneeInfoCountrySubdivisionCode"];
            this.consigneeInfoCountrySubdivisionCodeText = data["consigneeInfoCountrySubdivisionCodeText"];
            this.totalMonetaryAmount = data["totalMonetaryAmount"];
            this.remark = data["remark"];
            this.licensePlateTypeCode = data["licensePlateTypeCode"];
            this.licensePlateTypeCodeText = data["licensePlateTypeCodeText"];
            this.vehicleNumber = data["vehicleNumber"];
            this.vehicleClassificationCode = data["vehicleClassificationCode"];
            this.vehicleClassificationCodeText = data["vehicleClassificationCodeText"];
            this.vehicleTonnage = data["vehicleTonnage"];
            this.roadTransportCertificateNumber = data["roadTransportCertificateNumber"];
            this.trailerVehiclePlateNumber = data["trailerVehiclePlateNumber"];
            this.vehicleInfoPermitNumber = data["vehicleInfoPermitNumber"];
            this.descriptionOfGoods = data["descriptionOfGoods"];
            this.cargoTypeClassificationCode = data["cargoTypeClassificationCode"];
            this.cargoTypeClassificationCodeText = data["cargoTypeClassificationCodeText"];
            this.goodsItemGrossWeight = data["goodsItemGrossWeight"];
            this.isSuccessStates = data["isSuccessStates"];
            this.vehicleId = data["vehicleId"];
            this.message = data["message"];
            this.isValidate = data["isValidate"];
        }
    }

    static fromJS(data: any): ElectronicWayBillDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ElectronicWayBillDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalDocumentNumber"] = this.originalDocumentNumber;
        data["shippingNoteNumber"] = this.shippingNoteNumber;
        data["carrier"] = this.carrier;
        data["unifiedSocialCreditIdentifier"] = this.unifiedSocialCreditIdentifier;
        data["permitNumber"] = this.permitNumber;
        data["consignmentDateTime"] = this.consignmentDateTime ? this.consignmentDateTime.toISOString() : <any>undefined;
        data["businessTypeCode"] = this.businessTypeCode;
        data["despatchActualDateTime"] = this.despatchActualDateTime ? this.despatchActualDateTime.toISOString() : <any>undefined;
        data["goodsReceiptDateTime"] = this.goodsReceiptDateTime ? this.goodsReceiptDateTime.toISOString() : <any>undefined;
        data["consignor"] = this.consignor;
        data["personalIdentityDocument"] = this.personalIdentityDocument;
        data["placeOfLoading"] = this.placeOfLoading;
        data["countrySubdivisionCode"] = this.countrySubdivisionCode;
        data["countrySubdivisionCodeText"] = this.countrySubdivisionCodeText;
        data["consignee"] = this.consignee;
        data["goodsReceiptPlace"] = this.goodsReceiptPlace;
        data["consigneeInfoCountrySubdivisionCode"] = this.consigneeInfoCountrySubdivisionCode;
        data["consigneeInfoCountrySubdivisionCodeText"] = this.consigneeInfoCountrySubdivisionCodeText;
        data["totalMonetaryAmount"] = this.totalMonetaryAmount;
        data["remark"] = this.remark;
        data["licensePlateTypeCode"] = this.licensePlateTypeCode;
        data["licensePlateTypeCodeText"] = this.licensePlateTypeCodeText;
        data["vehicleNumber"] = this.vehicleNumber;
        data["vehicleClassificationCode"] = this.vehicleClassificationCode;
        data["vehicleClassificationCodeText"] = this.vehicleClassificationCodeText;
        data["vehicleTonnage"] = this.vehicleTonnage;
        data["roadTransportCertificateNumber"] = this.roadTransportCertificateNumber;
        data["trailerVehiclePlateNumber"] = this.trailerVehiclePlateNumber;
        data["vehicleInfoPermitNumber"] = this.vehicleInfoPermitNumber;
        data["descriptionOfGoods"] = this.descriptionOfGoods;
        data["cargoTypeClassificationCode"] = this.cargoTypeClassificationCode;
        data["cargoTypeClassificationCodeText"] = this.cargoTypeClassificationCodeText;
        data["goodsItemGrossWeight"] = this.goodsItemGrossWeight;
        data["isSuccessStates"] = this.isSuccessStates;
        data["vehicleId"] = this.vehicleId;
        data["message"] = this.message;
        data["isValidate"] = this.isValidate;
        return data; 
    }

    clone(): ElectronicWayBillDetailDto {
        const json = this.toJSON();
        let result = new ElectronicWayBillDetailDto();
        result.init(json);
        return result;
    }
}

export interface IElectronicWayBillDetailDto {
    originalDocumentNumber: string | undefined;
    shippingNoteNumber: string | undefined;
    carrier: string | undefined;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment | undefined;
    businessTypeCode: string | undefined;
    despatchActualDateTime: moment.Moment | undefined;
    goodsReceiptDateTime: moment.Moment | undefined;
    consignor: string | undefined;
    personalIdentityDocument: string | undefined;
    placeOfLoading: string | undefined;
    countrySubdivisionCode: string | undefined;
    countrySubdivisionCodeText: string | undefined;
    consignee: string | undefined;
    goodsReceiptPlace: string | undefined;
    consigneeInfoCountrySubdivisionCode: string | undefined;
    consigneeInfoCountrySubdivisionCodeText: string | undefined;
    totalMonetaryAmount: number | undefined;
    remark: string | undefined;
    licensePlateTypeCode: string | undefined;
    licensePlateTypeCodeText: string | undefined;
    vehicleNumber: string | undefined;
    vehicleClassificationCode: string | undefined;
    vehicleClassificationCodeText: string | undefined;
    vehicleTonnage: number | undefined;
    roadTransportCertificateNumber: string | undefined;
    trailerVehiclePlateNumber: string | undefined;
    vehicleInfoPermitNumber: string | undefined;
    descriptionOfGoods: string | undefined;
    cargoTypeClassificationCode: string | undefined;
    cargoTypeClassificationCodeText: string | undefined;
    goodsItemGrossWeight: number | undefined;
    isSuccessStates: boolean | undefined;
    vehicleId: string | undefined;
    message: string | undefined;
    isValidate: boolean | undefined;
}

export class PagedResultDtoOfElectronicWayBillListDto implements IPagedResultDtoOfElectronicWayBillListDto {
    totalCount: number | undefined;
    items: ElectronicWayBillListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfElectronicWayBillListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(ElectronicWayBillListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfElectronicWayBillListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfElectronicWayBillListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfElectronicWayBillListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfElectronicWayBillListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfElectronicWayBillListDto {
    totalCount: number | undefined;
    items: ElectronicWayBillListDto[] | undefined;
}

export class ElectronicWayBillListDto implements IElectronicWayBillListDto {
    messageReferenceNumber: string | undefined;
    documentName: string | undefined;
    documentVersionNumber: string | undefined;
    senderCode: string | undefined;
    recipientCode: string | undefined;
    messageSendingDateTime: moment.Moment | undefined;
    messageFunctionCode: string | undefined;
    originalDocumentNumber: string | undefined;
    shippingNoteNumber: string | undefined;
    carrier: string | undefined;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment | undefined;
    businessTypeCode: string | undefined;
    despatchActualDateTime: moment.Moment | undefined;
    goodsReceiptDateTime: moment.Moment | undefined;
    vehicleNumber: string | undefined;
    countrySubdivisionCode: string | undefined;
    countrySubdivisionCodeText: string | undefined;
    consigneeInfoCountrySubdivisionCode: string | undefined;
    consigneeInfoCountrySubdivisionCodeText: string | undefined;
    licensePlateTypeCode: string | undefined;
    uploadCount: number | undefined;
    message: string | undefined;
    uploadStarus: ElectronicWayBillListDtoUploadStarus | undefined;
    checkStatus: ElectronicWayBillListDtoCheckStatus | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveCapitalFlowBill: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IElectronicWayBillListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.messageReferenceNumber = data["messageReferenceNumber"];
            this.documentName = data["documentName"];
            this.documentVersionNumber = data["documentVersionNumber"];
            this.senderCode = data["senderCode"];
            this.recipientCode = data["recipientCode"];
            this.messageSendingDateTime = data["messageSendingDateTime"] ? moment(data["messageSendingDateTime"].toString()) : <any>undefined;
            this.messageFunctionCode = data["messageFunctionCode"];
            this.originalDocumentNumber = data["originalDocumentNumber"];
            this.shippingNoteNumber = data["shippingNoteNumber"];
            this.carrier = data["carrier"];
            this.unifiedSocialCreditIdentifier = data["unifiedSocialCreditIdentifier"];
            this.permitNumber = data["permitNumber"];
            this.consignmentDateTime = data["consignmentDateTime"] ? moment(data["consignmentDateTime"].toString()) : <any>undefined;
            this.businessTypeCode = data["businessTypeCode"];
            this.despatchActualDateTime = data["despatchActualDateTime"] ? moment(data["despatchActualDateTime"].toString()) : <any>undefined;
            this.goodsReceiptDateTime = data["goodsReceiptDateTime"] ? moment(data["goodsReceiptDateTime"].toString()) : <any>undefined;
            this.vehicleNumber = data["vehicleNumber"];
            this.countrySubdivisionCode = data["countrySubdivisionCode"];
            this.countrySubdivisionCodeText = data["countrySubdivisionCodeText"];
            this.consigneeInfoCountrySubdivisionCode = data["consigneeInfoCountrySubdivisionCode"];
            this.consigneeInfoCountrySubdivisionCodeText = data["consigneeInfoCountrySubdivisionCodeText"];
            this.licensePlateTypeCode = data["licensePlateTypeCode"];
            this.uploadCount = data["uploadCount"];
            this.message = data["message"];
            this.uploadStarus = data["uploadStarus"];
            this.checkStatus = data["checkStatus"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isHaveCapitalFlowBill = data["isHaveCapitalFlowBill"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ElectronicWayBillListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ElectronicWayBillListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageReferenceNumber"] = this.messageReferenceNumber;
        data["documentName"] = this.documentName;
        data["documentVersionNumber"] = this.documentVersionNumber;
        data["senderCode"] = this.senderCode;
        data["recipientCode"] = this.recipientCode;
        data["messageSendingDateTime"] = this.messageSendingDateTime ? this.messageSendingDateTime.toISOString() : <any>undefined;
        data["messageFunctionCode"] = this.messageFunctionCode;
        data["originalDocumentNumber"] = this.originalDocumentNumber;
        data["shippingNoteNumber"] = this.shippingNoteNumber;
        data["carrier"] = this.carrier;
        data["unifiedSocialCreditIdentifier"] = this.unifiedSocialCreditIdentifier;
        data["permitNumber"] = this.permitNumber;
        data["consignmentDateTime"] = this.consignmentDateTime ? this.consignmentDateTime.toISOString() : <any>undefined;
        data["businessTypeCode"] = this.businessTypeCode;
        data["despatchActualDateTime"] = this.despatchActualDateTime ? this.despatchActualDateTime.toISOString() : <any>undefined;
        data["goodsReceiptDateTime"] = this.goodsReceiptDateTime ? this.goodsReceiptDateTime.toISOString() : <any>undefined;
        data["vehicleNumber"] = this.vehicleNumber;
        data["countrySubdivisionCode"] = this.countrySubdivisionCode;
        data["countrySubdivisionCodeText"] = this.countrySubdivisionCodeText;
        data["consigneeInfoCountrySubdivisionCode"] = this.consigneeInfoCountrySubdivisionCode;
        data["consigneeInfoCountrySubdivisionCodeText"] = this.consigneeInfoCountrySubdivisionCodeText;
        data["licensePlateTypeCode"] = this.licensePlateTypeCode;
        data["uploadCount"] = this.uploadCount;
        data["message"] = this.message;
        data["uploadStarus"] = this.uploadStarus;
        data["checkStatus"] = this.checkStatus;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isHaveCapitalFlowBill"] = this.isHaveCapitalFlowBill;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): ElectronicWayBillListDto {
        const json = this.toJSON();
        let result = new ElectronicWayBillListDto();
        result.init(json);
        return result;
    }
}

export interface IElectronicWayBillListDto {
    messageReferenceNumber: string | undefined;
    documentName: string | undefined;
    documentVersionNumber: string | undefined;
    senderCode: string | undefined;
    recipientCode: string | undefined;
    messageSendingDateTime: moment.Moment | undefined;
    messageFunctionCode: string | undefined;
    originalDocumentNumber: string | undefined;
    shippingNoteNumber: string | undefined;
    carrier: string | undefined;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment | undefined;
    businessTypeCode: string | undefined;
    despatchActualDateTime: moment.Moment | undefined;
    goodsReceiptDateTime: moment.Moment | undefined;
    vehicleNumber: string | undefined;
    countrySubdivisionCode: string | undefined;
    countrySubdivisionCodeText: string | undefined;
    consigneeInfoCountrySubdivisionCode: string | undefined;
    consigneeInfoCountrySubdivisionCodeText: string | undefined;
    licensePlateTypeCode: string | undefined;
    uploadCount: number | undefined;
    message: string | undefined;
    uploadStarus: ElectronicWayBillListDtoUploadStarus | undefined;
    checkStatus: ElectronicWayBillListDtoCheckStatus | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveCapitalFlowBill: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetElectronicWayBillForEditOutput implements IGetElectronicWayBillForEditOutput {
    electronicWayBill: ElectronicWayBillEditDto | undefined;

    constructor(data?: IGetElectronicWayBillForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.electronicWayBill = data["electronicWayBill"] ? ElectronicWayBillEditDto.fromJS(data["electronicWayBill"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetElectronicWayBillForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetElectronicWayBillForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["electronicWayBill"] = this.electronicWayBill ? this.electronicWayBill.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetElectronicWayBillForEditOutput {
        const json = this.toJSON();
        let result = new GetElectronicWayBillForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetElectronicWayBillForEditOutput {
    electronicWayBill: ElectronicWayBillEditDto | undefined;
}

export class ElectronicWayBillEditDto implements IElectronicWayBillEditDto {
    id: string | undefined;
    messageReferenceNumber: string;
    documentName: string;
    documentVersionNumber: string;
    senderCode: string;
    recipientCode: string;
    messageSendingDateTime: moment.Moment;
    messageFunctionCode: string;
    originalDocumentNumber: string;
    shippingNoteNumber: string;
    carrier: string;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment;
    businessTypeCode: string;
    despatchActualDateTime: moment.Moment;
    goodsReceiptDateTime: moment.Moment;
    consignor: string | undefined;
    personalIdentityDocument: string | undefined;
    placeOfLoading: string | undefined;
    countrySubdivisionCode: string;
    consignee: string | undefined;
    goodsReceiptPlace: string | undefined;
    consigneeInfoCountrySubdivisionCode: string;
    totalMonetaryAmount: number;
    remark: string | undefined;
    licensePlateTypeCode: string;
    vehicleNumber: string;
    vehicleClassificationCode: string;
    vehicleTonnage: number;
    roadTransportCertificateNumber: string;
    trailerVehiclePlateNumber: string | undefined;
    vehicleInfoPermitNumber: string | undefined;
    nameOfPerson: string | undefined;
    qualificationCertificateNumber: string | undefined;
    telephoneNumber: string | undefined;
    descriptionOfGoods: string;
    cargoTypeClassificationCode: string;
    goodsItemGrossWeight: number;
    cube: number | undefined;
    totalNumberOfPackages: number | undefined;
    freeText: string | undefined;
    uploadCount: number | undefined;
    uploadStarus: ElectronicWayBillEditDtoUploadStarus | undefined;
    checkStatus: ElectronicWayBillEditDtoCheckStatus | undefined;

    constructor(data?: IElectronicWayBillEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.messageReferenceNumber = data["messageReferenceNumber"];
            this.documentName = data["documentName"];
            this.documentVersionNumber = data["documentVersionNumber"];
            this.senderCode = data["senderCode"];
            this.recipientCode = data["recipientCode"];
            this.messageSendingDateTime = data["messageSendingDateTime"] ? moment(data["messageSendingDateTime"].toString()) : <any>undefined;
            this.messageFunctionCode = data["messageFunctionCode"];
            this.originalDocumentNumber = data["originalDocumentNumber"];
            this.shippingNoteNumber = data["shippingNoteNumber"];
            this.carrier = data["carrier"];
            this.unifiedSocialCreditIdentifier = data["unifiedSocialCreditIdentifier"];
            this.permitNumber = data["permitNumber"];
            this.consignmentDateTime = data["consignmentDateTime"] ? moment(data["consignmentDateTime"].toString()) : <any>undefined;
            this.businessTypeCode = data["businessTypeCode"];
            this.despatchActualDateTime = data["despatchActualDateTime"] ? moment(data["despatchActualDateTime"].toString()) : <any>undefined;
            this.goodsReceiptDateTime = data["goodsReceiptDateTime"] ? moment(data["goodsReceiptDateTime"].toString()) : <any>undefined;
            this.consignor = data["consignor"];
            this.personalIdentityDocument = data["personalIdentityDocument"];
            this.placeOfLoading = data["placeOfLoading"];
            this.countrySubdivisionCode = data["countrySubdivisionCode"];
            this.consignee = data["consignee"];
            this.goodsReceiptPlace = data["goodsReceiptPlace"];
            this.consigneeInfoCountrySubdivisionCode = data["consigneeInfoCountrySubdivisionCode"];
            this.totalMonetaryAmount = data["totalMonetaryAmount"];
            this.remark = data["remark"];
            this.licensePlateTypeCode = data["licensePlateTypeCode"];
            this.vehicleNumber = data["vehicleNumber"];
            this.vehicleClassificationCode = data["vehicleClassificationCode"];
            this.vehicleTonnage = data["vehicleTonnage"];
            this.roadTransportCertificateNumber = data["roadTransportCertificateNumber"];
            this.trailerVehiclePlateNumber = data["trailerVehiclePlateNumber"];
            this.vehicleInfoPermitNumber = data["vehicleInfoPermitNumber"];
            this.nameOfPerson = data["nameOfPerson"];
            this.qualificationCertificateNumber = data["qualificationCertificateNumber"];
            this.telephoneNumber = data["telephoneNumber"];
            this.descriptionOfGoods = data["descriptionOfGoods"];
            this.cargoTypeClassificationCode = data["cargoTypeClassificationCode"];
            this.goodsItemGrossWeight = data["goodsItemGrossWeight"];
            this.cube = data["cube"];
            this.totalNumberOfPackages = data["totalNumberOfPackages"];
            this.freeText = data["freeText"];
            this.uploadCount = data["uploadCount"];
            this.uploadStarus = data["uploadStarus"];
            this.checkStatus = data["checkStatus"];
        }
    }

    static fromJS(data: any): ElectronicWayBillEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ElectronicWayBillEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["messageReferenceNumber"] = this.messageReferenceNumber;
        data["documentName"] = this.documentName;
        data["documentVersionNumber"] = this.documentVersionNumber;
        data["senderCode"] = this.senderCode;
        data["recipientCode"] = this.recipientCode;
        data["messageSendingDateTime"] = this.messageSendingDateTime ? this.messageSendingDateTime.toISOString() : <any>undefined;
        data["messageFunctionCode"] = this.messageFunctionCode;
        data["originalDocumentNumber"] = this.originalDocumentNumber;
        data["shippingNoteNumber"] = this.shippingNoteNumber;
        data["carrier"] = this.carrier;
        data["unifiedSocialCreditIdentifier"] = this.unifiedSocialCreditIdentifier;
        data["permitNumber"] = this.permitNumber;
        data["consignmentDateTime"] = this.consignmentDateTime ? this.consignmentDateTime.toISOString() : <any>undefined;
        data["businessTypeCode"] = this.businessTypeCode;
        data["despatchActualDateTime"] = this.despatchActualDateTime ? this.despatchActualDateTime.toISOString() : <any>undefined;
        data["goodsReceiptDateTime"] = this.goodsReceiptDateTime ? this.goodsReceiptDateTime.toISOString() : <any>undefined;
        data["consignor"] = this.consignor;
        data["personalIdentityDocument"] = this.personalIdentityDocument;
        data["placeOfLoading"] = this.placeOfLoading;
        data["countrySubdivisionCode"] = this.countrySubdivisionCode;
        data["consignee"] = this.consignee;
        data["goodsReceiptPlace"] = this.goodsReceiptPlace;
        data["consigneeInfoCountrySubdivisionCode"] = this.consigneeInfoCountrySubdivisionCode;
        data["totalMonetaryAmount"] = this.totalMonetaryAmount;
        data["remark"] = this.remark;
        data["licensePlateTypeCode"] = this.licensePlateTypeCode;
        data["vehicleNumber"] = this.vehicleNumber;
        data["vehicleClassificationCode"] = this.vehicleClassificationCode;
        data["vehicleTonnage"] = this.vehicleTonnage;
        data["roadTransportCertificateNumber"] = this.roadTransportCertificateNumber;
        data["trailerVehiclePlateNumber"] = this.trailerVehiclePlateNumber;
        data["vehicleInfoPermitNumber"] = this.vehicleInfoPermitNumber;
        data["nameOfPerson"] = this.nameOfPerson;
        data["qualificationCertificateNumber"] = this.qualificationCertificateNumber;
        data["telephoneNumber"] = this.telephoneNumber;
        data["descriptionOfGoods"] = this.descriptionOfGoods;
        data["cargoTypeClassificationCode"] = this.cargoTypeClassificationCode;
        data["goodsItemGrossWeight"] = this.goodsItemGrossWeight;
        data["cube"] = this.cube;
        data["totalNumberOfPackages"] = this.totalNumberOfPackages;
        data["freeText"] = this.freeText;
        data["uploadCount"] = this.uploadCount;
        data["uploadStarus"] = this.uploadStarus;
        data["checkStatus"] = this.checkStatus;
        return data; 
    }

    clone(): ElectronicWayBillEditDto {
        const json = this.toJSON();
        let result = new ElectronicWayBillEditDto();
        result.init(json);
        return result;
    }
}

export interface IElectronicWayBillEditDto {
    id: string | undefined;
    messageReferenceNumber: string;
    documentName: string;
    documentVersionNumber: string;
    senderCode: string;
    recipientCode: string;
    messageSendingDateTime: moment.Moment;
    messageFunctionCode: string;
    originalDocumentNumber: string;
    shippingNoteNumber: string;
    carrier: string;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment;
    businessTypeCode: string;
    despatchActualDateTime: moment.Moment;
    goodsReceiptDateTime: moment.Moment;
    consignor: string | undefined;
    personalIdentityDocument: string | undefined;
    placeOfLoading: string | undefined;
    countrySubdivisionCode: string;
    consignee: string | undefined;
    goodsReceiptPlace: string | undefined;
    consigneeInfoCountrySubdivisionCode: string;
    totalMonetaryAmount: number;
    remark: string | undefined;
    licensePlateTypeCode: string;
    vehicleNumber: string;
    vehicleClassificationCode: string;
    vehicleTonnage: number;
    roadTransportCertificateNumber: string;
    trailerVehiclePlateNumber: string | undefined;
    vehicleInfoPermitNumber: string | undefined;
    nameOfPerson: string | undefined;
    qualificationCertificateNumber: string | undefined;
    telephoneNumber: string | undefined;
    descriptionOfGoods: string;
    cargoTypeClassificationCode: string;
    goodsItemGrossWeight: number;
    cube: number | undefined;
    totalNumberOfPackages: number | undefined;
    freeText: string | undefined;
    uploadCount: number | undefined;
    uploadStarus: ElectronicWayBillEditDtoUploadStarus | undefined;
    checkStatus: ElectronicWayBillEditDtoCheckStatus | undefined;
}

export class SendElectronicWayBillInput implements ISendElectronicWayBillInput {
    electronicWayBillIds: string[] | undefined;

    constructor(data?: ISendElectronicWayBillInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["electronicWayBillIds"] && data["electronicWayBillIds"].constructor === Array) {
                this.electronicWayBillIds = [] as any;
                for (let item of data["electronicWayBillIds"])
                    this.electronicWayBillIds.push(item);
            }
        }
    }

    static fromJS(data: any): SendElectronicWayBillInput {
        data = typeof data === 'object' ? data : {};
        let result = new SendElectronicWayBillInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.electronicWayBillIds && this.electronicWayBillIds.constructor === Array) {
            data["electronicWayBillIds"] = [];
            for (let item of this.electronicWayBillIds)
                data["electronicWayBillIds"].push(item);
        }
        return data; 
    }

    clone(): SendElectronicWayBillInput {
        const json = this.toJSON();
        let result = new SendElectronicWayBillInput();
        result.init(json);
        return result;
    }
}

export interface ISendElectronicWayBillInput {
    electronicWayBillIds: string[] | undefined;
}

export class PreElectronicWayBillInput implements IPreElectronicWayBillInput {
    electronicWayBills: ElectronicWayBillEditDto[] | undefined;

    constructor(data?: IPreElectronicWayBillInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["electronicWayBills"] && data["electronicWayBills"].constructor === Array) {
                this.electronicWayBills = [] as any;
                for (let item of data["electronicWayBills"])
                    this.electronicWayBills.push(ElectronicWayBillEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PreElectronicWayBillInput {
        data = typeof data === 'object' ? data : {};
        let result = new PreElectronicWayBillInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.electronicWayBills && this.electronicWayBills.constructor === Array) {
            data["electronicWayBills"] = [];
            for (let item of this.electronicWayBills)
                data["electronicWayBills"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PreElectronicWayBillInput {
        const json = this.toJSON();
        let result = new PreElectronicWayBillInput();
        result.init(json);
        return result;
    }
}

export interface IPreElectronicWayBillInput {
    electronicWayBills: ElectronicWayBillEditDto[] | undefined;
}

export class ImportingOrEditElectronicWayBillInput implements IImportingOrEditElectronicWayBillInput {
    fileContent: string | undefined;
    filter: string | undefined;
    vehicleClassificationCode: string | undefined;
    beginDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
    sorting: string | undefined;
    maxResultCount: number | undefined;
    skipCount: number | undefined;

    constructor(data?: IImportingOrEditElectronicWayBillInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileContent = data["fileContent"];
            this.filter = data["filter"];
            this.vehicleClassificationCode = data["vehicleClassificationCode"];
            this.beginDate = data["beginDate"] ? moment(data["beginDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.sorting = data["sorting"];
            this.maxResultCount = data["maxResultCount"];
            this.skipCount = data["skipCount"];
        }
    }

    static fromJS(data: any): ImportingOrEditElectronicWayBillInput {
        data = typeof data === 'object' ? data : {};
        let result = new ImportingOrEditElectronicWayBillInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileContent"] = this.fileContent;
        data["filter"] = this.filter;
        data["vehicleClassificationCode"] = this.vehicleClassificationCode;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["sorting"] = this.sorting;
        data["maxResultCount"] = this.maxResultCount;
        data["skipCount"] = this.skipCount;
        return data; 
    }

    clone(): ImportingOrEditElectronicWayBillInput {
        const json = this.toJSON();
        let result = new ImportingOrEditElectronicWayBillInput();
        result.init(json);
        return result;
    }
}

export interface IImportingOrEditElectronicWayBillInput {
    fileContent: string | undefined;
    filter: string | undefined;
    vehicleClassificationCode: string | undefined;
    beginDate: moment.Moment | undefined;
    endDate: moment.Moment | undefined;
    sorting: string | undefined;
    maxResultCount: number | undefined;
    skipCount: number | undefined;
}

export class CreateOrEditElectronicWayBillInput implements ICreateOrEditElectronicWayBillInput {
    electronicWayBill: ElectronicWayBillEditDto | undefined;

    constructor(data?: ICreateOrEditElectronicWayBillInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.electronicWayBill = data["electronicWayBill"] ? ElectronicWayBillEditDto.fromJS(data["electronicWayBill"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditElectronicWayBillInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditElectronicWayBillInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["electronicWayBill"] = this.electronicWayBill ? this.electronicWayBill.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditElectronicWayBillInput {
        const json = this.toJSON();
        let result = new CreateOrEditElectronicWayBillInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditElectronicWayBillInput {
    electronicWayBill: ElectronicWayBillEditDto | undefined;
}

export class PagedResultDtoOfElectronicWayBillLogListDto implements IPagedResultDtoOfElectronicWayBillLogListDto {
    totalCount: number | undefined;
    items: ElectronicWayBillLogListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfElectronicWayBillLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(ElectronicWayBillLogListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfElectronicWayBillLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfElectronicWayBillLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfElectronicWayBillLogListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfElectronicWayBillLogListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfElectronicWayBillLogListDto {
    totalCount: number | undefined;
    items: ElectronicWayBillLogListDto[] | undefined;
}

export class ElectronicWayBillLogListDto implements IElectronicWayBillLogListDto {
    messageSendingDateTime: moment.Moment | undefined;
    originalDocumentNumber: string | undefined;
    shippingNoteNumber: string | undefined;
    carrier: string | undefined;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment | undefined;
    businessTypeCode: string | undefined;
    despatchActualDateTime: moment.Moment | undefined;
    goodsReceiptDateTime: moment.Moment | undefined;
    vehicleNumber: string | undefined;
    countrySubdivisionCode: string | undefined;
    countrySubdivisionCodeText: string | undefined;
    consigneeInfoCountrySubdivisionCode: string | undefined;
    consigneeInfoCountrySubdivisionCodeText: string | undefined;
    code: string | undefined;
    message: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: IElectronicWayBillLogListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.messageSendingDateTime = data["messageSendingDateTime"] ? moment(data["messageSendingDateTime"].toString()) : <any>undefined;
            this.originalDocumentNumber = data["originalDocumentNumber"];
            this.shippingNoteNumber = data["shippingNoteNumber"];
            this.carrier = data["carrier"];
            this.unifiedSocialCreditIdentifier = data["unifiedSocialCreditIdentifier"];
            this.permitNumber = data["permitNumber"];
            this.consignmentDateTime = data["consignmentDateTime"] ? moment(data["consignmentDateTime"].toString()) : <any>undefined;
            this.businessTypeCode = data["businessTypeCode"];
            this.despatchActualDateTime = data["despatchActualDateTime"] ? moment(data["despatchActualDateTime"].toString()) : <any>undefined;
            this.goodsReceiptDateTime = data["goodsReceiptDateTime"] ? moment(data["goodsReceiptDateTime"].toString()) : <any>undefined;
            this.vehicleNumber = data["vehicleNumber"];
            this.countrySubdivisionCode = data["countrySubdivisionCode"];
            this.countrySubdivisionCodeText = data["countrySubdivisionCodeText"];
            this.consigneeInfoCountrySubdivisionCode = data["consigneeInfoCountrySubdivisionCode"];
            this.consigneeInfoCountrySubdivisionCodeText = data["consigneeInfoCountrySubdivisionCodeText"];
            this.code = data["code"];
            this.message = data["message"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ElectronicWayBillLogListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ElectronicWayBillLogListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageSendingDateTime"] = this.messageSendingDateTime ? this.messageSendingDateTime.toISOString() : <any>undefined;
        data["originalDocumentNumber"] = this.originalDocumentNumber;
        data["shippingNoteNumber"] = this.shippingNoteNumber;
        data["carrier"] = this.carrier;
        data["unifiedSocialCreditIdentifier"] = this.unifiedSocialCreditIdentifier;
        data["permitNumber"] = this.permitNumber;
        data["consignmentDateTime"] = this.consignmentDateTime ? this.consignmentDateTime.toISOString() : <any>undefined;
        data["businessTypeCode"] = this.businessTypeCode;
        data["despatchActualDateTime"] = this.despatchActualDateTime ? this.despatchActualDateTime.toISOString() : <any>undefined;
        data["goodsReceiptDateTime"] = this.goodsReceiptDateTime ? this.goodsReceiptDateTime.toISOString() : <any>undefined;
        data["vehicleNumber"] = this.vehicleNumber;
        data["countrySubdivisionCode"] = this.countrySubdivisionCode;
        data["countrySubdivisionCodeText"] = this.countrySubdivisionCodeText;
        data["consigneeInfoCountrySubdivisionCode"] = this.consigneeInfoCountrySubdivisionCode;
        data["consigneeInfoCountrySubdivisionCodeText"] = this.consigneeInfoCountrySubdivisionCodeText;
        data["code"] = this.code;
        data["message"] = this.message;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): ElectronicWayBillLogListDto {
        const json = this.toJSON();
        let result = new ElectronicWayBillLogListDto();
        result.init(json);
        return result;
    }
}

export interface IElectronicWayBillLogListDto {
    messageSendingDateTime: moment.Moment | undefined;
    originalDocumentNumber: string | undefined;
    shippingNoteNumber: string | undefined;
    carrier: string | undefined;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment | undefined;
    businessTypeCode: string | undefined;
    despatchActualDateTime: moment.Moment | undefined;
    goodsReceiptDateTime: moment.Moment | undefined;
    vehicleNumber: string | undefined;
    countrySubdivisionCode: string | undefined;
    countrySubdivisionCodeText: string | undefined;
    consigneeInfoCountrySubdivisionCode: string | undefined;
    consigneeInfoCountrySubdivisionCodeText: string | undefined;
    code: string | undefined;
    message: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;
}

export class ElectronicWayBillLogDetailDto implements IElectronicWayBillLogDetailDto {
    messageReferenceNumber: string | undefined;
    documentName: string | undefined;
    documentVersionNumber: string | undefined;
    senderCode: string | undefined;
    recipientCode: string | undefined;
    messageSendingDateTime: moment.Moment | undefined;
    messageFunctionCode: string | undefined;
    originalDocumentNumber: string | undefined;
    shippingNoteNumber: string | undefined;
    carrier: string | undefined;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment | undefined;
    businessTypeCode: string | undefined;
    despatchActualDateTime: moment.Moment | undefined;
    goodsReceiptDateTime: moment.Moment | undefined;
    consignor: string | undefined;
    personalIdentityDocument: string | undefined;
    placeOfLoading: string | undefined;
    countrySubdivisionCode: string | undefined;
    consignee: string | undefined;
    goodsReceiptPlace: string | undefined;
    consigneeInfoCountrySubdivisionCode: string | undefined;
    totalMonetaryAmount: number | undefined;
    remark: string | undefined;
    licensePlateTypeCode: string | undefined;
    vehicleClassificationCode: string | undefined;
    vehicleNumber: string | undefined;
    vehicleTonnage: number | undefined;
    roadTransportCertificateNumber: string | undefined;
    trailerVehiclePlateNumber: string | undefined;
    vehicleInfoPermitNumber: string | undefined;
    nameOfPerson: string | undefined;
    qualificationCertificateNumber: string | undefined;
    telephoneNumber: string | undefined;
    descriptionOfGoods: string | undefined;
    cargoTypeClassificationCode: string | undefined;
    goodsItemGrossWeight: number | undefined;
    cube: number | undefined;
    totalNumberOfPackages: number | undefined;
    freeText: string | undefined;
    code: string | undefined;
    uploadCount: number | undefined;
    message: string | undefined;
    uploadStarus: ElectronicWayBillLogDetailDtoUploadStarus | undefined;
    checkStatus: ElectronicWayBillLogDetailDtoCheckStatus | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IElectronicWayBillLogDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.messageReferenceNumber = data["messageReferenceNumber"];
            this.documentName = data["documentName"];
            this.documentVersionNumber = data["documentVersionNumber"];
            this.senderCode = data["senderCode"];
            this.recipientCode = data["recipientCode"];
            this.messageSendingDateTime = data["messageSendingDateTime"] ? moment(data["messageSendingDateTime"].toString()) : <any>undefined;
            this.messageFunctionCode = data["messageFunctionCode"];
            this.originalDocumentNumber = data["originalDocumentNumber"];
            this.shippingNoteNumber = data["shippingNoteNumber"];
            this.carrier = data["carrier"];
            this.unifiedSocialCreditIdentifier = data["unifiedSocialCreditIdentifier"];
            this.permitNumber = data["permitNumber"];
            this.consignmentDateTime = data["consignmentDateTime"] ? moment(data["consignmentDateTime"].toString()) : <any>undefined;
            this.businessTypeCode = data["businessTypeCode"];
            this.despatchActualDateTime = data["despatchActualDateTime"] ? moment(data["despatchActualDateTime"].toString()) : <any>undefined;
            this.goodsReceiptDateTime = data["goodsReceiptDateTime"] ? moment(data["goodsReceiptDateTime"].toString()) : <any>undefined;
            this.consignor = data["consignor"];
            this.personalIdentityDocument = data["personalIdentityDocument"];
            this.placeOfLoading = data["placeOfLoading"];
            this.countrySubdivisionCode = data["countrySubdivisionCode"];
            this.consignee = data["consignee"];
            this.goodsReceiptPlace = data["goodsReceiptPlace"];
            this.consigneeInfoCountrySubdivisionCode = data["consigneeInfoCountrySubdivisionCode"];
            this.totalMonetaryAmount = data["totalMonetaryAmount"];
            this.remark = data["remark"];
            this.licensePlateTypeCode = data["licensePlateTypeCode"];
            this.vehicleClassificationCode = data["vehicleClassificationCode"];
            this.vehicleNumber = data["vehicleNumber"];
            this.vehicleTonnage = data["vehicleTonnage"];
            this.roadTransportCertificateNumber = data["roadTransportCertificateNumber"];
            this.trailerVehiclePlateNumber = data["trailerVehiclePlateNumber"];
            this.vehicleInfoPermitNumber = data["vehicleInfoPermitNumber"];
            this.nameOfPerson = data["nameOfPerson"];
            this.qualificationCertificateNumber = data["qualificationCertificateNumber"];
            this.telephoneNumber = data["telephoneNumber"];
            this.descriptionOfGoods = data["descriptionOfGoods"];
            this.cargoTypeClassificationCode = data["cargoTypeClassificationCode"];
            this.goodsItemGrossWeight = data["goodsItemGrossWeight"];
            this.cube = data["cube"];
            this.totalNumberOfPackages = data["totalNumberOfPackages"];
            this.freeText = data["freeText"];
            this.code = data["code"];
            this.uploadCount = data["uploadCount"];
            this.message = data["message"];
            this.uploadStarus = data["uploadStarus"];
            this.checkStatus = data["checkStatus"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ElectronicWayBillLogDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ElectronicWayBillLogDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["messageReferenceNumber"] = this.messageReferenceNumber;
        data["documentName"] = this.documentName;
        data["documentVersionNumber"] = this.documentVersionNumber;
        data["senderCode"] = this.senderCode;
        data["recipientCode"] = this.recipientCode;
        data["messageSendingDateTime"] = this.messageSendingDateTime ? this.messageSendingDateTime.toISOString() : <any>undefined;
        data["messageFunctionCode"] = this.messageFunctionCode;
        data["originalDocumentNumber"] = this.originalDocumentNumber;
        data["shippingNoteNumber"] = this.shippingNoteNumber;
        data["carrier"] = this.carrier;
        data["unifiedSocialCreditIdentifier"] = this.unifiedSocialCreditIdentifier;
        data["permitNumber"] = this.permitNumber;
        data["consignmentDateTime"] = this.consignmentDateTime ? this.consignmentDateTime.toISOString() : <any>undefined;
        data["businessTypeCode"] = this.businessTypeCode;
        data["despatchActualDateTime"] = this.despatchActualDateTime ? this.despatchActualDateTime.toISOString() : <any>undefined;
        data["goodsReceiptDateTime"] = this.goodsReceiptDateTime ? this.goodsReceiptDateTime.toISOString() : <any>undefined;
        data["consignor"] = this.consignor;
        data["personalIdentityDocument"] = this.personalIdentityDocument;
        data["placeOfLoading"] = this.placeOfLoading;
        data["countrySubdivisionCode"] = this.countrySubdivisionCode;
        data["consignee"] = this.consignee;
        data["goodsReceiptPlace"] = this.goodsReceiptPlace;
        data["consigneeInfoCountrySubdivisionCode"] = this.consigneeInfoCountrySubdivisionCode;
        data["totalMonetaryAmount"] = this.totalMonetaryAmount;
        data["remark"] = this.remark;
        data["licensePlateTypeCode"] = this.licensePlateTypeCode;
        data["vehicleClassificationCode"] = this.vehicleClassificationCode;
        data["vehicleNumber"] = this.vehicleNumber;
        data["vehicleTonnage"] = this.vehicleTonnage;
        data["roadTransportCertificateNumber"] = this.roadTransportCertificateNumber;
        data["trailerVehiclePlateNumber"] = this.trailerVehiclePlateNumber;
        data["vehicleInfoPermitNumber"] = this.vehicleInfoPermitNumber;
        data["nameOfPerson"] = this.nameOfPerson;
        data["qualificationCertificateNumber"] = this.qualificationCertificateNumber;
        data["telephoneNumber"] = this.telephoneNumber;
        data["descriptionOfGoods"] = this.descriptionOfGoods;
        data["cargoTypeClassificationCode"] = this.cargoTypeClassificationCode;
        data["goodsItemGrossWeight"] = this.goodsItemGrossWeight;
        data["cube"] = this.cube;
        data["totalNumberOfPackages"] = this.totalNumberOfPackages;
        data["freeText"] = this.freeText;
        data["code"] = this.code;
        data["uploadCount"] = this.uploadCount;
        data["message"] = this.message;
        data["uploadStarus"] = this.uploadStarus;
        data["checkStatus"] = this.checkStatus;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): ElectronicWayBillLogDetailDto {
        const json = this.toJSON();
        let result = new ElectronicWayBillLogDetailDto();
        result.init(json);
        return result;
    }
}

export interface IElectronicWayBillLogDetailDto {
    messageReferenceNumber: string | undefined;
    documentName: string | undefined;
    documentVersionNumber: string | undefined;
    senderCode: string | undefined;
    recipientCode: string | undefined;
    messageSendingDateTime: moment.Moment | undefined;
    messageFunctionCode: string | undefined;
    originalDocumentNumber: string | undefined;
    shippingNoteNumber: string | undefined;
    carrier: string | undefined;
    unifiedSocialCreditIdentifier: string | undefined;
    permitNumber: string | undefined;
    consignmentDateTime: moment.Moment | undefined;
    businessTypeCode: string | undefined;
    despatchActualDateTime: moment.Moment | undefined;
    goodsReceiptDateTime: moment.Moment | undefined;
    consignor: string | undefined;
    personalIdentityDocument: string | undefined;
    placeOfLoading: string | undefined;
    countrySubdivisionCode: string | undefined;
    consignee: string | undefined;
    goodsReceiptPlace: string | undefined;
    consigneeInfoCountrySubdivisionCode: string | undefined;
    totalMonetaryAmount: number | undefined;
    remark: string | undefined;
    licensePlateTypeCode: string | undefined;
    vehicleClassificationCode: string | undefined;
    vehicleNumber: string | undefined;
    vehicleTonnage: number | undefined;
    roadTransportCertificateNumber: string | undefined;
    trailerVehiclePlateNumber: string | undefined;
    vehicleInfoPermitNumber: string | undefined;
    nameOfPerson: string | undefined;
    qualificationCertificateNumber: string | undefined;
    telephoneNumber: string | undefined;
    descriptionOfGoods: string | undefined;
    cargoTypeClassificationCode: string | undefined;
    goodsItemGrossWeight: number | undefined;
    cube: number | undefined;
    totalNumberOfPackages: number | undefined;
    freeText: string | undefined;
    code: string | undefined;
    uploadCount: number | undefined;
    message: string | undefined;
    uploadStarus: ElectronicWayBillLogDetailDtoUploadStarus | undefined;
    checkStatus: ElectronicWayBillLogDetailDtoCheckStatus | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfPrivateFuelInStorageListDto implements IPagedResultDtoOfPrivateFuelInStorageListDto {
    totalCount: number | undefined;
    items: PrivateFuelInStorageListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfPrivateFuelInStorageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(PrivateFuelInStorageListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPrivateFuelInStorageListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPrivateFuelInStorageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfPrivateFuelInStorageListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfPrivateFuelInStorageListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfPrivateFuelInStorageListDto {
    totalCount: number | undefined;
    items: PrivateFuelInStorageListDto[] | undefined;
}

export class PrivateFuelInStorageListDto implements IPrivateFuelInStorageListDto {
    /** 业务单位（必输） */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 入库日期（必输） */
    inStorageDate: moment.Moment | undefined;
    /** 入库升数（必输） */
    inStorageLitre: number | undefined;
    /** 入库吨数 */
    inStorageTonnage: number | undefined;
    /** 入库吨单价 */
    inStorageTonPrice: number | undefined;
    /** 入库升单价 */
    inStorageLitrePrice: number | undefined;
    /** 油品比重 */
    fuelProportion: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率(必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 其他费用 */
    otherExpensesAmount: number | undefined;
    /** 油品（货物中选择）（必输） */
    fuel: number | undefined;
    fuelText: string | undefined;
    /** 负责人 */
    personInCharge: string | undefined;
    /** 审核状态(必输，使用统一的审核状态定义项目) */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 入库加油站（必输）组织机构中选择 */
    inStorageFillingStation: number | undefined;
    inStorageFillingStationText: string | undefined;
    /** 采购供应商（必输）供应商主数据选择 */
    purchaseSupplier: number | undefined;
    purchaseSupplierText: string | undefined;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditOperationTime: moment.Moment | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 付款方式（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    paymentMethod: string | undefined;
    paymentMethodText: string | undefined;
    /** 备注 */
    remark: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IPrivateFuelInStorageListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bussinessDepartment = data["bussinessDepartment"];
            this.bussinessDepartmentText = data["bussinessDepartmentText"];
            this.inStorageDate = data["inStorageDate"] ? moment(data["inStorageDate"].toString()) : <any>undefined;
            this.inStorageLitre = data["inStorageLitre"];
            this.inStorageTonnage = data["inStorageTonnage"];
            this.inStorageTonPrice = data["inStorageTonPrice"];
            this.inStorageLitrePrice = data["inStorageLitrePrice"];
            this.fuelProportion = data["fuelProportion"];
            this.isTax = data["isTax"];
            this.taxRate = data["taxRate"];
            this.taxAmount = data["taxAmount"];
            this.noTaxAmount = data["noTaxAmount"];
            this.otherExpensesAmount = data["otherExpensesAmount"];
            this.fuel = data["fuel"];
            this.fuelText = data["fuelText"];
            this.personInCharge = data["personInCharge"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.inStorageFillingStation = data["inStorageFillingStation"];
            this.inStorageFillingStationText = data["inStorageFillingStationText"];
            this.purchaseSupplier = data["purchaseSupplier"];
            this.purchaseSupplierText = data["purchaseSupplierText"];
            this.auditSpecification = data["auditSpecification"];
            this.auditOperator = data["auditOperator"];
            this.auditOperationTime = data["auditOperationTime"] ? moment(data["auditOperationTime"].toString()) : <any>undefined;
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.paymentMethod = data["paymentMethod"];
            this.paymentMethodText = data["paymentMethodText"];
            this.remark = data["remark"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PrivateFuelInStorageListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrivateFuelInStorageListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["bussinessDepartmentText"] = this.bussinessDepartmentText;
        data["inStorageDate"] = this.inStorageDate ? this.inStorageDate.toISOString() : <any>undefined;
        data["inStorageLitre"] = this.inStorageLitre;
        data["inStorageTonnage"] = this.inStorageTonnage;
        data["inStorageTonPrice"] = this.inStorageTonPrice;
        data["inStorageLitrePrice"] = this.inStorageLitrePrice;
        data["fuelProportion"] = this.fuelProportion;
        data["isTax"] = this.isTax;
        data["taxRate"] = this.taxRate;
        data["taxAmount"] = this.taxAmount;
        data["noTaxAmount"] = this.noTaxAmount;
        data["otherExpensesAmount"] = this.otherExpensesAmount;
        data["fuel"] = this.fuel;
        data["fuelText"] = this.fuelText;
        data["personInCharge"] = this.personInCharge;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["inStorageFillingStation"] = this.inStorageFillingStation;
        data["inStorageFillingStationText"] = this.inStorageFillingStationText;
        data["purchaseSupplier"] = this.purchaseSupplier;
        data["purchaseSupplierText"] = this.purchaseSupplierText;
        data["auditSpecification"] = this.auditSpecification;
        data["auditOperator"] = this.auditOperator;
        data["auditOperationTime"] = this.auditOperationTime ? this.auditOperationTime.toISOString() : <any>undefined;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["paymentMethod"] = this.paymentMethod;
        data["paymentMethodText"] = this.paymentMethodText;
        data["remark"] = this.remark;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): PrivateFuelInStorageListDto {
        const json = this.toJSON();
        let result = new PrivateFuelInStorageListDto();
        result.init(json);
        return result;
    }
}

export interface IPrivateFuelInStorageListDto {
    /** 业务单位（必输） */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 入库日期（必输） */
    inStorageDate: moment.Moment | undefined;
    /** 入库升数（必输） */
    inStorageLitre: number | undefined;
    /** 入库吨数 */
    inStorageTonnage: number | undefined;
    /** 入库吨单价 */
    inStorageTonPrice: number | undefined;
    /** 入库升单价 */
    inStorageLitrePrice: number | undefined;
    /** 油品比重 */
    fuelProportion: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率(必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 其他费用 */
    otherExpensesAmount: number | undefined;
    /** 油品（货物中选择）（必输） */
    fuel: number | undefined;
    fuelText: string | undefined;
    /** 负责人 */
    personInCharge: string | undefined;
    /** 审核状态(必输，使用统一的审核状态定义项目) */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 入库加油站（必输）组织机构中选择 */
    inStorageFillingStation: number | undefined;
    inStorageFillingStationText: string | undefined;
    /** 采购供应商（必输）供应商主数据选择 */
    purchaseSupplier: number | undefined;
    purchaseSupplierText: string | undefined;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditOperationTime: moment.Moment | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 付款方式（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    paymentMethod: string | undefined;
    paymentMethodText: string | undefined;
    /** 备注 */
    remark: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CreateOrUpdatePrivateFuelInStorageInput implements ICreateOrUpdatePrivateFuelInStorageInput {
    privateFuelInStorageCreateOrUpdate: PrivateFuelInStorageEditDto | undefined;

    constructor(data?: ICreateOrUpdatePrivateFuelInStorageInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.privateFuelInStorageCreateOrUpdate = data["privateFuelInStorageCreateOrUpdate"] ? PrivateFuelInStorageEditDto.fromJS(data["privateFuelInStorageCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdatePrivateFuelInStorageInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdatePrivateFuelInStorageInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["privateFuelInStorageCreateOrUpdate"] = this.privateFuelInStorageCreateOrUpdate ? this.privateFuelInStorageCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdatePrivateFuelInStorageInput {
        const json = this.toJSON();
        let result = new CreateOrUpdatePrivateFuelInStorageInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdatePrivateFuelInStorageInput {
    privateFuelInStorageCreateOrUpdate: PrivateFuelInStorageEditDto | undefined;
}

export class PrivateFuelInStorageEditDto implements IPrivateFuelInStorageEditDto {
    id: string | undefined;
    /** 业务单位（必输） */
    bussinessDepartment: number | undefined;
    /** 入库日期（必输） */
    inStorageDate: moment.Moment | undefined;
    /** 入库升数（必输） */
    inStorageLitre: number | undefined;
    /** 入库吨数 */
    inStorageTonnage: number | undefined;
    /** 入库吨单价 */
    inStorageTonPrice: number | undefined;
    /** 入库升单价 */
    inStorageLitrePrice: number | undefined;
    /** 油品比重 */
    fuelProportion: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率(必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 其他费用 */
    otherExpensesAmount: number | undefined;
    /** 油品（货物中选择）（必输） */
    fuel: number | undefined;
    /** 负责人 */
    personInCharge: string | undefined;
    /** 审核状态(必输，使用统一的审核状态定义项目) */
    auditStatus: string | undefined;
    /** 入库加油站（必输）组织机构中选择 */
    inStorageFillingStation: number | undefined;
    /** 采购供应商（必输）供应商主数据选择 */
    purchaseSupplier: number | undefined;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditOperationTime: moment.Moment | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 付款方式（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    paymentMethod: string | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IPrivateFuelInStorageEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.bussinessDepartment = data["bussinessDepartment"];
            this.inStorageDate = data["inStorageDate"] ? moment(data["inStorageDate"].toString()) : <any>undefined;
            this.inStorageLitre = data["inStorageLitre"];
            this.inStorageTonnage = data["inStorageTonnage"];
            this.inStorageTonPrice = data["inStorageTonPrice"];
            this.inStorageLitrePrice = data["inStorageLitrePrice"];
            this.fuelProportion = data["fuelProportion"];
            this.isTax = data["isTax"];
            this.taxRate = data["taxRate"];
            this.taxAmount = data["taxAmount"];
            this.noTaxAmount = data["noTaxAmount"];
            this.otherExpensesAmount = data["otherExpensesAmount"];
            this.fuel = data["fuel"];
            this.personInCharge = data["personInCharge"];
            this.auditStatus = data["auditStatus"];
            this.inStorageFillingStation = data["inStorageFillingStation"];
            this.purchaseSupplier = data["purchaseSupplier"];
            this.auditSpecification = data["auditSpecification"];
            this.auditOperator = data["auditOperator"];
            this.auditOperationTime = data["auditOperationTime"] ? moment(data["auditOperationTime"].toString()) : <any>undefined;
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.paymentMethod = data["paymentMethod"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): PrivateFuelInStorageEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrivateFuelInStorageEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["inStorageDate"] = this.inStorageDate ? this.inStorageDate.toISOString() : <any>undefined;
        data["inStorageLitre"] = this.inStorageLitre;
        data["inStorageTonnage"] = this.inStorageTonnage;
        data["inStorageTonPrice"] = this.inStorageTonPrice;
        data["inStorageLitrePrice"] = this.inStorageLitrePrice;
        data["fuelProportion"] = this.fuelProportion;
        data["isTax"] = this.isTax;
        data["taxRate"] = this.taxRate;
        data["taxAmount"] = this.taxAmount;
        data["noTaxAmount"] = this.noTaxAmount;
        data["otherExpensesAmount"] = this.otherExpensesAmount;
        data["fuel"] = this.fuel;
        data["personInCharge"] = this.personInCharge;
        data["auditStatus"] = this.auditStatus;
        data["inStorageFillingStation"] = this.inStorageFillingStation;
        data["purchaseSupplier"] = this.purchaseSupplier;
        data["auditSpecification"] = this.auditSpecification;
        data["auditOperator"] = this.auditOperator;
        data["auditOperationTime"] = this.auditOperationTime ? this.auditOperationTime.toISOString() : <any>undefined;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["paymentMethod"] = this.paymentMethod;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): PrivateFuelInStorageEditDto {
        const json = this.toJSON();
        let result = new PrivateFuelInStorageEditDto();
        result.init(json);
        return result;
    }
}

export interface IPrivateFuelInStorageEditDto {
    id: string | undefined;
    /** 业务单位（必输） */
    bussinessDepartment: number | undefined;
    /** 入库日期（必输） */
    inStorageDate: moment.Moment | undefined;
    /** 入库升数（必输） */
    inStorageLitre: number | undefined;
    /** 入库吨数 */
    inStorageTonnage: number | undefined;
    /** 入库吨单价 */
    inStorageTonPrice: number | undefined;
    /** 入库升单价 */
    inStorageLitrePrice: number | undefined;
    /** 油品比重 */
    fuelProportion: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率(必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 其他费用 */
    otherExpensesAmount: number | undefined;
    /** 油品（货物中选择）（必输） */
    fuel: number | undefined;
    /** 负责人 */
    personInCharge: string | undefined;
    /** 审核状态(必输，使用统一的审核状态定义项目) */
    auditStatus: string | undefined;
    /** 入库加油站（必输）组织机构中选择 */
    inStorageFillingStation: number | undefined;
    /** 采购供应商（必输）供应商主数据选择 */
    purchaseSupplier: number | undefined;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditOperationTime: moment.Moment | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 付款方式（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    paymentMethod: string | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class ApprovalInput implements IApprovalInput {
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditSpecification: string | undefined;

    constructor(data?: IApprovalInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idStr = data["idStr"];
            this.auditStatus = data["auditStatus"];
            this.auditSpecification = data["auditSpecification"];
        }
    }

    static fromJS(data: any): ApprovalInput {
        data = typeof data === 'object' ? data : {};
        let result = new ApprovalInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idStr"] = this.idStr;
        data["auditStatus"] = this.auditStatus;
        data["auditSpecification"] = this.auditSpecification;
        return data; 
    }

    clone(): ApprovalInput {
        const json = this.toJSON();
        let result = new ApprovalInput();
        result.init(json);
        return result;
    }
}

export interface IApprovalInput {
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditSpecification: string | undefined;
}

export class PagedResultDtoOfPreInspectionVehicleDriverArchiveListDto implements IPagedResultDtoOfPreInspectionVehicleDriverArchiveListDto {
    totalCount: number | undefined;
    items: PreInspectionVehicleDriverArchiveListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfPreInspectionVehicleDriverArchiveListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(PreInspectionVehicleDriverArchiveListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPreInspectionVehicleDriverArchiveListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPreInspectionVehicleDriverArchiveListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfPreInspectionVehicleDriverArchiveListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfPreInspectionVehicleDriverArchiveListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfPreInspectionVehicleDriverArchiveListDto {
    totalCount: number | undefined;
    items: PreInspectionVehicleDriverArchiveListDto[] | undefined;
}

export class PreInspectionVehicleDriverArchiveListDto implements IPreInspectionVehicleDriverArchiveListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    carNumber: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 司机照片 */
    driverPhoto: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    genderText: string | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    nationText: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 户籍住址 */
    address: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    personStateText: string | undefined;
    /** 填报日期 */
    joiningDate: moment.Moment | undefined;
    /** 上岗日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    residenceTypeText: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    driverLicenseLevelText: string | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 驾照签发日期 */
    dlCertificateIssueDate: moment.Moment | undefined;
    /** 驾证发放日期 */
    dlCertificateGiveOutDate: moment.Moment | undefined;
    /** 到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 领证日期 */
    dlCertificateStartDate: moment.Moment | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 签发机关 */
    dlSigningOrganization: string | undefined;
    imageId: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IPreInspectionVehicleDriverArchiveListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.vehicleCode = data["vehicleCode"];
            this.carNumber = data["carNumber"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.driverPhoto = data["driverPhoto"];
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.signingOrganization = data["signingOrganization"];
            this.gender = data["gender"];
            this.genderText = data["genderText"];
            this.nation = data["nation"];
            this.nationText = data["nationText"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.address = data["address"];
            this.nowAddress = data["nowAddress"];
            this.personType = data["personType"];
            this.personTypeText = data["personTypeText"];
            this.personState = data["personState"];
            this.personStateText = data["personStateText"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
            this.expectedWorkDate = data["expectedWorkDate"] ? moment(data["expectedWorkDate"].toString()) : <any>undefined;
            this.buckupContactPerson = data["buckupContactPerson"];
            this.buckupContactPersonPhone = data["buckupContactPersonPhone"];
            this.buckupContactPersonAddress = data["buckupContactPersonAddress"];
            this.residenceType = data["residenceType"];
            this.residenceTypeText = data["residenceTypeText"];
            this.driverLicenseID = data["driverLicenseID"];
            this.driverLicenseIDNumber = data["driverLicenseIDNumber"];
            this.driverLicenseLevel = data["driverLicenseLevel"];
            this.driverLicenseLevelText = data["driverLicenseLevelText"];
            this.dlCertificateFirstDate = data["dlCertificateFirstDate"] ? moment(data["dlCertificateFirstDate"].toString()) : <any>undefined;
            this.dlCertificateIssueDate = data["dlCertificateIssueDate"] ? moment(data["dlCertificateIssueDate"].toString()) : <any>undefined;
            this.dlCertificateGiveOutDate = data["dlCertificateGiveOutDate"] ? moment(data["dlCertificateGiveOutDate"].toString()) : <any>undefined;
            this.dlCertificateEndDate = data["dlCertificateEndDate"] ? moment(data["dlCertificateEndDate"].toString()) : <any>undefined;
            this.dlCertificateStartDate = data["dlCertificateStartDate"] ? moment(data["dlCertificateStartDate"].toString()) : <any>undefined;
            this.dlCertificateYears = data["dlCertificateYears"];
            this.dlSigningOrganization = data["dlSigningOrganization"];
            this.imageId = data["imageId"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PreInspectionVehicleDriverArchiveListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PreInspectionVehicleDriverArchiveListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["vehicleCode"] = this.vehicleCode;
        data["carNumber"] = this.carNumber;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["driverPhoto"] = this.driverPhoto;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["signingOrganization"] = this.signingOrganization;
        data["gender"] = this.gender;
        data["genderText"] = this.genderText;
        data["nation"] = this.nation;
        data["nationText"] = this.nationText;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["nowAddress"] = this.nowAddress;
        data["personType"] = this.personType;
        data["personTypeText"] = this.personTypeText;
        data["personState"] = this.personState;
        data["personStateText"] = this.personStateText;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        data["expectedWorkDate"] = this.expectedWorkDate ? this.expectedWorkDate.toISOString() : <any>undefined;
        data["buckupContactPerson"] = this.buckupContactPerson;
        data["buckupContactPersonPhone"] = this.buckupContactPersonPhone;
        data["buckupContactPersonAddress"] = this.buckupContactPersonAddress;
        data["residenceType"] = this.residenceType;
        data["residenceTypeText"] = this.residenceTypeText;
        data["driverLicenseID"] = this.driverLicenseID;
        data["driverLicenseIDNumber"] = this.driverLicenseIDNumber;
        data["driverLicenseLevel"] = this.driverLicenseLevel;
        data["driverLicenseLevelText"] = this.driverLicenseLevelText;
        data["dlCertificateFirstDate"] = this.dlCertificateFirstDate ? this.dlCertificateFirstDate.toISOString() : <any>undefined;
        data["dlCertificateIssueDate"] = this.dlCertificateIssueDate ? this.dlCertificateIssueDate.toISOString() : <any>undefined;
        data["dlCertificateGiveOutDate"] = this.dlCertificateGiveOutDate ? this.dlCertificateGiveOutDate.toISOString() : <any>undefined;
        data["dlCertificateEndDate"] = this.dlCertificateEndDate ? this.dlCertificateEndDate.toISOString() : <any>undefined;
        data["dlCertificateStartDate"] = this.dlCertificateStartDate ? this.dlCertificateStartDate.toISOString() : <any>undefined;
        data["dlCertificateYears"] = this.dlCertificateYears;
        data["dlSigningOrganization"] = this.dlSigningOrganization;
        data["imageId"] = this.imageId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): PreInspectionVehicleDriverArchiveListDto {
        const json = this.toJSON();
        let result = new PreInspectionVehicleDriverArchiveListDto();
        result.init(json);
        return result;
    }
}

export interface IPreInspectionVehicleDriverArchiveListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    carNumber: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 司机照片 */
    driverPhoto: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    genderText: string | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    nationText: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 户籍住址 */
    address: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    personStateText: string | undefined;
    /** 填报日期 */
    joiningDate: moment.Moment | undefined;
    /** 上岗日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    residenceTypeText: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    driverLicenseLevelText: string | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 驾照签发日期 */
    dlCertificateIssueDate: moment.Moment | undefined;
    /** 驾证发放日期 */
    dlCertificateGiveOutDate: moment.Moment | undefined;
    /** 到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 领证日期 */
    dlCertificateStartDate: moment.Moment | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 签发机关 */
    dlSigningOrganization: string | undefined;
    imageId: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfInspectionVehicleDriverArchiveListDto implements IPagedResultDtoOfInspectionVehicleDriverArchiveListDto {
    totalCount: number | undefined;
    items: InspectionVehicleDriverArchiveListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfInspectionVehicleDriverArchiveListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(InspectionVehicleDriverArchiveListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfInspectionVehicleDriverArchiveListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfInspectionVehicleDriverArchiveListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfInspectionVehicleDriverArchiveListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfInspectionVehicleDriverArchiveListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfInspectionVehicleDriverArchiveListDto {
    totalCount: number | undefined;
    items: InspectionVehicleDriverArchiveListDto[] | undefined;
}

export class InspectionVehicleDriverArchiveListDto implements IInspectionVehicleDriverArchiveListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    vehicleDriverArchiveId: string | undefined;
    uploadCount: number | undefined;
    uploadStarus: InspectionVehicleDriverArchiveListDtoUploadStarus | undefined;
    checkStatus: InspectionVehicleDriverArchiveListDtoCheckStatus | undefined;
    code: string | undefined;
    message: string | undefined;
    /** 当期剩余可扣分值 */
    surplusScore: number | undefined;
    /** 当期扣分开始日期 */
    deductionStartDate: moment.Moment | undefined;
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    carNumber: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 司机照片 */
    driverPhoto: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    genderText: string | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    nationText: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 户籍住址 */
    address: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    /** 填报日期 */
    joiningDate: moment.Moment | undefined;
    /** 上岗日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    residenceTypeText: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    driverLicenseLevelText: string | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 领证日期 */
    dlCertificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 签发机关 */
    dlSigningOrganization: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IInspectionVehicleDriverArchiveListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.vehicleDriverArchiveId = data["vehicleDriverArchiveId"];
            this.uploadCount = data["uploadCount"];
            this.uploadStarus = data["uploadStarus"];
            this.checkStatus = data["checkStatus"];
            this.code = data["code"];
            this.message = data["message"];
            this.surplusScore = data["surplusScore"];
            this.deductionStartDate = data["deductionStartDate"] ? moment(data["deductionStartDate"].toString()) : <any>undefined;
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.vehicleCode = data["vehicleCode"];
            this.carNumber = data["carNumber"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.driverPhoto = data["driverPhoto"];
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.signingOrganization = data["signingOrganization"];
            this.gender = data["gender"];
            this.genderText = data["genderText"];
            this.nation = data["nation"];
            this.nationText = data["nationText"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.address = data["address"];
            this.nowAddress = data["nowAddress"];
            this.personType = data["personType"];
            this.personTypeText = data["personTypeText"];
            this.personState = data["personState"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
            this.expectedWorkDate = data["expectedWorkDate"] ? moment(data["expectedWorkDate"].toString()) : <any>undefined;
            this.buckupContactPerson = data["buckupContactPerson"];
            this.buckupContactPersonPhone = data["buckupContactPersonPhone"];
            this.buckupContactPersonAddress = data["buckupContactPersonAddress"];
            this.residenceType = data["residenceType"];
            this.residenceTypeText = data["residenceTypeText"];
            this.driverLicenseID = data["driverLicenseID"];
            this.driverLicenseIDNumber = data["driverLicenseIDNumber"];
            this.driverLicenseLevel = data["driverLicenseLevel"];
            this.driverLicenseLevelText = data["driverLicenseLevelText"];
            this.dlCertificateFirstDate = data["dlCertificateFirstDate"] ? moment(data["dlCertificateFirstDate"].toString()) : <any>undefined;
            this.dlCertificateStartDate = data["dlCertificateStartDate"] ? moment(data["dlCertificateStartDate"].toString()) : <any>undefined;
            this.dlCertificateEndDate = data["dlCertificateEndDate"] ? moment(data["dlCertificateEndDate"].toString()) : <any>undefined;
            this.dlCertificateYears = data["dlCertificateYears"];
            this.dlSigningOrganization = data["dlSigningOrganization"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): InspectionVehicleDriverArchiveListDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionVehicleDriverArchiveListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["vehicleDriverArchiveId"] = this.vehicleDriverArchiveId;
        data["uploadCount"] = this.uploadCount;
        data["uploadStarus"] = this.uploadStarus;
        data["checkStatus"] = this.checkStatus;
        data["code"] = this.code;
        data["message"] = this.message;
        data["surplusScore"] = this.surplusScore;
        data["deductionStartDate"] = this.deductionStartDate ? this.deductionStartDate.toISOString() : <any>undefined;
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["vehicleCode"] = this.vehicleCode;
        data["carNumber"] = this.carNumber;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["driverPhoto"] = this.driverPhoto;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["signingOrganization"] = this.signingOrganization;
        data["gender"] = this.gender;
        data["genderText"] = this.genderText;
        data["nation"] = this.nation;
        data["nationText"] = this.nationText;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["nowAddress"] = this.nowAddress;
        data["personType"] = this.personType;
        data["personTypeText"] = this.personTypeText;
        data["personState"] = this.personState;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        data["expectedWorkDate"] = this.expectedWorkDate ? this.expectedWorkDate.toISOString() : <any>undefined;
        data["buckupContactPerson"] = this.buckupContactPerson;
        data["buckupContactPersonPhone"] = this.buckupContactPersonPhone;
        data["buckupContactPersonAddress"] = this.buckupContactPersonAddress;
        data["residenceType"] = this.residenceType;
        data["residenceTypeText"] = this.residenceTypeText;
        data["driverLicenseID"] = this.driverLicenseID;
        data["driverLicenseIDNumber"] = this.driverLicenseIDNumber;
        data["driverLicenseLevel"] = this.driverLicenseLevel;
        data["driverLicenseLevelText"] = this.driverLicenseLevelText;
        data["dlCertificateFirstDate"] = this.dlCertificateFirstDate ? this.dlCertificateFirstDate.toISOString() : <any>undefined;
        data["dlCertificateStartDate"] = this.dlCertificateStartDate ? this.dlCertificateStartDate.toISOString() : <any>undefined;
        data["dlCertificateEndDate"] = this.dlCertificateEndDate ? this.dlCertificateEndDate.toISOString() : <any>undefined;
        data["dlCertificateYears"] = this.dlCertificateYears;
        data["dlSigningOrganization"] = this.dlSigningOrganization;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): InspectionVehicleDriverArchiveListDto {
        const json = this.toJSON();
        let result = new InspectionVehicleDriverArchiveListDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionVehicleDriverArchiveListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    vehicleDriverArchiveId: string | undefined;
    uploadCount: number | undefined;
    uploadStarus: InspectionVehicleDriverArchiveListDtoUploadStarus | undefined;
    checkStatus: InspectionVehicleDriverArchiveListDtoCheckStatus | undefined;
    code: string | undefined;
    message: string | undefined;
    /** 当期剩余可扣分值 */
    surplusScore: number | undefined;
    /** 当期扣分开始日期 */
    deductionStartDate: moment.Moment | undefined;
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    carNumber: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 司机照片 */
    driverPhoto: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    genderText: string | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    nationText: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 户籍住址 */
    address: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    /** 填报日期 */
    joiningDate: moment.Moment | undefined;
    /** 上岗日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    residenceTypeText: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    driverLicenseLevelText: string | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 领证日期 */
    dlCertificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 签发机关 */
    dlSigningOrganization: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PreInspectionVehicleDriverArchivesInput implements IPreInspectionVehicleDriverArchivesInput {
    inspection: InspectionVehicleDriverArchivesEditDto[] | undefined;

    constructor(data?: IPreInspectionVehicleDriverArchivesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["inspection"] && data["inspection"].constructor === Array) {
                this.inspection = [] as any;
                for (let item of data["inspection"])
                    this.inspection.push(InspectionVehicleDriverArchivesEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PreInspectionVehicleDriverArchivesInput {
        data = typeof data === 'object' ? data : {};
        let result = new PreInspectionVehicleDriverArchivesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.inspection && this.inspection.constructor === Array) {
            data["inspection"] = [];
            for (let item of this.inspection)
                data["inspection"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PreInspectionVehicleDriverArchivesInput {
        const json = this.toJSON();
        let result = new PreInspectionVehicleDriverArchivesInput();
        result.init(json);
        return result;
    }
}

export interface IPreInspectionVehicleDriverArchivesInput {
    inspection: InspectionVehicleDriverArchivesEditDto[] | undefined;
}

export class InspectionVehicleDriverArchivesEditDto implements IInspectionVehicleDriverArchivesEditDto {
    thirdPartySystem: string | undefined;
    id: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    vehicleDriverArchiveId: string | undefined;
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    carNumber: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 司机照片 */
    driverPhoto: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    genderText: string | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    nationText: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 户籍住址 */
    address: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    /** 填报日期 */
    joiningDate: moment.Moment | undefined;
    /** 上岗日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    residenceTypeText: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    driverLicenseLevelText: string | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 领证日期 */
    dlCertificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 签发机关 */
    dlSigningOrganization: string | undefined;

    constructor(data?: IInspectionVehicleDriverArchivesEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartySystem = data["thirdPartySystem"];
            this.id = data["id"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.vehicleDriverArchiveId = data["vehicleDriverArchiveId"];
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.vehicleCode = data["vehicleCode"];
            this.carNumber = data["carNumber"];
            this.driverPhone = data["driverPhone"];
            this.driverPhoto = data["driverPhoto"];
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.signingOrganization = data["signingOrganization"];
            this.gender = data["gender"];
            this.genderText = data["genderText"];
            this.nation = data["nation"];
            this.nationText = data["nationText"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.address = data["address"];
            this.nowAddress = data["nowAddress"];
            this.personType = data["personType"];
            this.personTypeText = data["personTypeText"];
            this.personState = data["personState"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
            this.expectedWorkDate = data["expectedWorkDate"] ? moment(data["expectedWorkDate"].toString()) : <any>undefined;
            this.buckupContactPerson = data["buckupContactPerson"];
            this.buckupContactPersonPhone = data["buckupContactPersonPhone"];
            this.buckupContactPersonAddress = data["buckupContactPersonAddress"];
            this.residenceType = data["residenceType"];
            this.residenceTypeText = data["residenceTypeText"];
            this.driverLicenseID = data["driverLicenseID"];
            this.driverLicenseIDNumber = data["driverLicenseIDNumber"];
            this.driverLicenseLevel = data["driverLicenseLevel"];
            this.driverLicenseLevelText = data["driverLicenseLevelText"];
            this.dlCertificateFirstDate = data["dlCertificateFirstDate"] ? moment(data["dlCertificateFirstDate"].toString()) : <any>undefined;
            this.dlCertificateStartDate = data["dlCertificateStartDate"] ? moment(data["dlCertificateStartDate"].toString()) : <any>undefined;
            this.dlCertificateEndDate = data["dlCertificateEndDate"] ? moment(data["dlCertificateEndDate"].toString()) : <any>undefined;
            this.dlCertificateYears = data["dlCertificateYears"];
            this.dlSigningOrganization = data["dlSigningOrganization"];
        }
    }

    static fromJS(data: any): InspectionVehicleDriverArchivesEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionVehicleDriverArchivesEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["id"] = this.id;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["vehicleDriverArchiveId"] = this.vehicleDriverArchiveId;
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["vehicleCode"] = this.vehicleCode;
        data["carNumber"] = this.carNumber;
        data["driverPhone"] = this.driverPhone;
        data["driverPhoto"] = this.driverPhoto;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["signingOrganization"] = this.signingOrganization;
        data["gender"] = this.gender;
        data["genderText"] = this.genderText;
        data["nation"] = this.nation;
        data["nationText"] = this.nationText;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["address"] = this.address;
        data["nowAddress"] = this.nowAddress;
        data["personType"] = this.personType;
        data["personTypeText"] = this.personTypeText;
        data["personState"] = this.personState;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        data["expectedWorkDate"] = this.expectedWorkDate ? this.expectedWorkDate.toISOString() : <any>undefined;
        data["buckupContactPerson"] = this.buckupContactPerson;
        data["buckupContactPersonPhone"] = this.buckupContactPersonPhone;
        data["buckupContactPersonAddress"] = this.buckupContactPersonAddress;
        data["residenceType"] = this.residenceType;
        data["residenceTypeText"] = this.residenceTypeText;
        data["driverLicenseID"] = this.driverLicenseID;
        data["driverLicenseIDNumber"] = this.driverLicenseIDNumber;
        data["driverLicenseLevel"] = this.driverLicenseLevel;
        data["driverLicenseLevelText"] = this.driverLicenseLevelText;
        data["dlCertificateFirstDate"] = this.dlCertificateFirstDate ? this.dlCertificateFirstDate.toISOString() : <any>undefined;
        data["dlCertificateStartDate"] = this.dlCertificateStartDate ? this.dlCertificateStartDate.toISOString() : <any>undefined;
        data["dlCertificateEndDate"] = this.dlCertificateEndDate ? this.dlCertificateEndDate.toISOString() : <any>undefined;
        data["dlCertificateYears"] = this.dlCertificateYears;
        data["dlSigningOrganization"] = this.dlSigningOrganization;
        return data; 
    }

    clone(): InspectionVehicleDriverArchivesEditDto {
        const json = this.toJSON();
        let result = new InspectionVehicleDriverArchivesEditDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionVehicleDriverArchivesEditDto {
    thirdPartySystem: string | undefined;
    id: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    vehicleDriverArchiveId: string | undefined;
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    carNumber: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 司机照片 */
    driverPhoto: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    genderText: string | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    nationText: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 户籍住址 */
    address: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    /** 填报日期 */
    joiningDate: moment.Moment | undefined;
    /** 上岗日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    residenceTypeText: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    driverLicenseLevelText: string | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 领证日期 */
    dlCertificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 签发机关 */
    dlSigningOrganization: string | undefined;
}

export class DriverArchiveToAuditSendDto implements IDriverArchiveToAuditSendDto {
    thirdParCode: string | undefined;
    /** 所属物流公司 */
    tenantId: number | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    checkStatus: DriverArchiveToAuditSendDtoCheckStatus | undefined;
    /** 审核时间 */
    auditTime: moment.Moment | undefined;
    message: string | undefined;
    surplusScore: number | undefined;

    constructor(data?: IDriverArchiveToAuditSendDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdParCode = data["thirdParCode"];
            this.tenantId = data["tenantId"];
            this.driverIDNumber = data["driverIDNumber"];
            this.checkStatus = data["checkStatus"];
            this.auditTime = data["auditTime"] ? moment(data["auditTime"].toString()) : <any>undefined;
            this.message = data["message"];
            this.surplusScore = data["surplusScore"];
        }
    }

    static fromJS(data: any): DriverArchiveToAuditSendDto {
        data = typeof data === 'object' ? data : {};
        let result = new DriverArchiveToAuditSendDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdParCode"] = this.thirdParCode;
        data["tenantId"] = this.tenantId;
        data["driverIDNumber"] = this.driverIDNumber;
        data["checkStatus"] = this.checkStatus;
        data["auditTime"] = this.auditTime ? this.auditTime.toISOString() : <any>undefined;
        data["message"] = this.message;
        data["surplusScore"] = this.surplusScore;
        return data; 
    }

    clone(): DriverArchiveToAuditSendDto {
        const json = this.toJSON();
        let result = new DriverArchiveToAuditSendDto();
        result.init(json);
        return result;
    }
}

export interface IDriverArchiveToAuditSendDto {
    thirdParCode: string | undefined;
    /** 所属物流公司 */
    tenantId: number | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    checkStatus: DriverArchiveToAuditSendDtoCheckStatus | undefined;
    /** 审核时间 */
    auditTime: moment.Moment | undefined;
    message: string | undefined;
    surplusScore: number | undefined;
}

export class PagedResultDtoOfInspectionDriverScoreListDto implements IPagedResultDtoOfInspectionDriverScoreListDto {
    totalCount: number | undefined;
    items: InspectionDriverScoreListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfInspectionDriverScoreListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(InspectionDriverScoreListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfInspectionDriverScoreListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfInspectionDriverScoreListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfInspectionDriverScoreListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfInspectionDriverScoreListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfInspectionDriverScoreListDto {
    totalCount: number | undefined;
    items: InspectionDriverScoreListDto[] | undefined;
}

export class InspectionDriverScoreListDto implements IInspectionDriverScoreListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 扣分分值 */
    mark: number | undefined;
    /** 记录员 */
    recordist: number | undefined;
    /** 记录时间 */
    recordTime: moment.Moment | undefined;
    /** 审核人 */
    auditor: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    auditStatusName: string | undefined;
    /** 审核时间 */
    auditTime: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IInspectionDriverScoreListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.categoryCode = data["categoryCode"];
            this.categoryName = data["categoryName"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.mark = data["mark"];
            this.recordist = data["recordist"];
            this.recordTime = data["recordTime"] ? moment(data["recordTime"].toString()) : <any>undefined;
            this.auditor = data["auditor"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusName = data["auditStatusName"];
            this.auditTime = data["auditTime"] ? moment(data["auditTime"].toString()) : <any>undefined;
            this.description = data["description"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): InspectionDriverScoreListDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionDriverScoreListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["categoryCode"] = this.categoryCode;
        data["categoryName"] = this.categoryName;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["mark"] = this.mark;
        data["recordist"] = this.recordist;
        data["recordTime"] = this.recordTime ? this.recordTime.toISOString() : <any>undefined;
        data["auditor"] = this.auditor;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusName"] = this.auditStatusName;
        data["auditTime"] = this.auditTime ? this.auditTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): InspectionDriverScoreListDto {
        const json = this.toJSON();
        let result = new InspectionDriverScoreListDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionDriverScoreListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 扣分分值 */
    mark: number | undefined;
    /** 记录员 */
    recordist: number | undefined;
    /** 记录时间 */
    recordTime: moment.Moment | undefined;
    /** 审核人 */
    auditor: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    auditStatusName: string | undefined;
    /** 审核时间 */
    auditTime: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class InspectionScore implements IInspectionScore {
    categoryCode: string | undefined;
    categoryName: string | undefined;
    itemCode: string | undefined;
    itemName: string | undefined;
    minMark: number | undefined;
    maxMark: number | undefined;
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IInspectionScore) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryCode = data["categoryCode"];
            this.categoryName = data["categoryName"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.minMark = data["minMark"];
            this.maxMark = data["maxMark"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): InspectionScore {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionScore();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryCode"] = this.categoryCode;
        data["categoryName"] = this.categoryName;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["minMark"] = this.minMark;
        data["maxMark"] = this.maxMark;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): InspectionScore {
        const json = this.toJSON();
        let result = new InspectionScore();
        result.init(json);
        return result;
    }
}

export interface IInspectionScore {
    categoryCode: string | undefined;
    categoryName: string | undefined;
    itemCode: string | undefined;
    itemName: string | undefined;
    minMark: number | undefined;
    maxMark: number | undefined;
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetInspectionDriverScoreForEditOutput implements IGetInspectionDriverScoreForEditOutput {
    inspectionDriverScore: InspectionDriverScoreEditDto | undefined;

    constructor(data?: IGetInspectionDriverScoreForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inspectionDriverScore = data["inspectionDriverScore"] ? InspectionDriverScoreEditDto.fromJS(data["inspectionDriverScore"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetInspectionDriverScoreForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetInspectionDriverScoreForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inspectionDriverScore"] = this.inspectionDriverScore ? this.inspectionDriverScore.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetInspectionDriverScoreForEditOutput {
        const json = this.toJSON();
        let result = new GetInspectionDriverScoreForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetInspectionDriverScoreForEditOutput {
    inspectionDriverScore: InspectionDriverScoreEditDto | undefined;
}

export class InspectionDriverScoreEditDto implements IInspectionDriverScoreEditDto {
    id: string | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 车辆编号 */
    vehicleCode: string;
    mainVehiclePlate: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 扣分分值 */
    mark: number | undefined;
    /** 记录员 */
    recordist: number | undefined;
    /** 记录时间 */
    recordTime: moment.Moment | undefined;
    /** 审核人 */
    auditor: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核时间 */
    auditTime: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;

    constructor(data?: IInspectionDriverScoreEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.driverIDNumber = data["driverIDNumber"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.categoryCode = data["categoryCode"];
            this.categoryName = data["categoryName"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.mark = data["mark"];
            this.recordist = data["recordist"];
            this.recordTime = data["recordTime"] ? moment(data["recordTime"].toString()) : <any>undefined;
            this.auditor = data["auditor"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditTime = data["auditTime"] ? moment(data["auditTime"].toString()) : <any>undefined;
            this.description = data["description"];
        }
    }

    static fromJS(data: any): InspectionDriverScoreEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionDriverScoreEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["driverIDNumber"] = this.driverIDNumber;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["categoryCode"] = this.categoryCode;
        data["categoryName"] = this.categoryName;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["mark"] = this.mark;
        data["recordist"] = this.recordist;
        data["recordTime"] = this.recordTime ? this.recordTime.toISOString() : <any>undefined;
        data["auditor"] = this.auditor;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditTime"] = this.auditTime ? this.auditTime.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data; 
    }

    clone(): InspectionDriverScoreEditDto {
        const json = this.toJSON();
        let result = new InspectionDriverScoreEditDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionDriverScoreEditDto {
    id: string | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 车辆编号 */
    vehicleCode: string;
    mainVehiclePlate: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 扣分分值 */
    mark: number | undefined;
    /** 记录员 */
    recordist: number | undefined;
    /** 记录时间 */
    recordTime: moment.Moment | undefined;
    /** 审核人 */
    auditor: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核时间 */
    auditTime: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
}

export class InspectionDriverScoreReceivedDto implements IInspectionDriverScoreReceivedDto {
    thirdParCode: string | undefined;
    /** 所属物流公司 */
    tenantId: number | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    carNumber: string | undefined;
    /** 扣分原因说明 */
    deductionReason: string | undefined;
    /** 扣分分类 */
    deductionClassify: string | undefined;
    /** 扣分项目 */
    deductionItem: string | undefined;
    /** 扣分分值 */
    scoreDeduction: number | undefined;
    /** 原因备注 */
    reasonRemark: string | undefined;
    /** 登记日期 */
    changeVehicleDate: moment.Moment | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核时间 */
    auditDate: moment.Moment | undefined;
    /** 是否撤销 */
    isCancel: boolean | undefined;
    /** 撤销审核状态（数据字典维护） */
    cancleAuditStatus: string | undefined;
    /** 撤销审核说明 */
    cancelAuditRemark: string | undefined;
    /** 撤销操作时间 */
    cancelOperateDate: moment.Moment | undefined;
    /** 撤销审核时间 */
    cancelAuditDate: moment.Moment | undefined;

    constructor(data?: IInspectionDriverScoreReceivedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdParCode = data["thirdParCode"];
            this.tenantId = data["tenantId"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.vehicleCode = data["vehicleCode"];
            this.carNumber = data["carNumber"];
            this.deductionReason = data["deductionReason"];
            this.deductionClassify = data["deductionClassify"];
            this.deductionItem = data["deductionItem"];
            this.scoreDeduction = data["scoreDeduction"];
            this.reasonRemark = data["reasonRemark"];
            this.changeVehicleDate = data["changeVehicleDate"] ? moment(data["changeVehicleDate"].toString()) : <any>undefined;
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.isCancel = data["isCancel"];
            this.cancleAuditStatus = data["cancleAuditStatus"];
            this.cancelAuditRemark = data["cancelAuditRemark"];
            this.cancelOperateDate = data["cancelOperateDate"] ? moment(data["cancelOperateDate"].toString()) : <any>undefined;
            this.cancelAuditDate = data["cancelAuditDate"] ? moment(data["cancelAuditDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): InspectionDriverScoreReceivedDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionDriverScoreReceivedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdParCode"] = this.thirdParCode;
        data["tenantId"] = this.tenantId;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["vehicleCode"] = this.vehicleCode;
        data["carNumber"] = this.carNumber;
        data["deductionReason"] = this.deductionReason;
        data["deductionClassify"] = this.deductionClassify;
        data["deductionItem"] = this.deductionItem;
        data["scoreDeduction"] = this.scoreDeduction;
        data["reasonRemark"] = this.reasonRemark;
        data["changeVehicleDate"] = this.changeVehicleDate ? this.changeVehicleDate.toISOString() : <any>undefined;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["isCancel"] = this.isCancel;
        data["cancleAuditStatus"] = this.cancleAuditStatus;
        data["cancelAuditRemark"] = this.cancelAuditRemark;
        data["cancelOperateDate"] = this.cancelOperateDate ? this.cancelOperateDate.toISOString() : <any>undefined;
        data["cancelAuditDate"] = this.cancelAuditDate ? this.cancelAuditDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): InspectionDriverScoreReceivedDto {
        const json = this.toJSON();
        let result = new InspectionDriverScoreReceivedDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionDriverScoreReceivedDto {
    thirdParCode: string | undefined;
    /** 所属物流公司 */
    tenantId: number | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    carNumber: string | undefined;
    /** 扣分原因说明 */
    deductionReason: string | undefined;
    /** 扣分分类 */
    deductionClassify: string | undefined;
    /** 扣分项目 */
    deductionItem: string | undefined;
    /** 扣分分值 */
    scoreDeduction: number | undefined;
    /** 原因备注 */
    reasonRemark: string | undefined;
    /** 登记日期 */
    changeVehicleDate: moment.Moment | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核时间 */
    auditDate: moment.Moment | undefined;
    /** 是否撤销 */
    isCancel: boolean | undefined;
    /** 撤销审核状态（数据字典维护） */
    cancleAuditStatus: string | undefined;
    /** 撤销审核说明 */
    cancelAuditRemark: string | undefined;
    /** 撤销操作时间 */
    cancelOperateDate: moment.Moment | undefined;
    /** 撤销审核时间 */
    cancelAuditDate: moment.Moment | undefined;
}

export class PagedResultDtoOfInspectionDriverScoreStatisticsListDto implements IPagedResultDtoOfInspectionDriverScoreStatisticsListDto {
    totalCount: number | undefined;
    items: InspectionDriverScoreStatisticsListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfInspectionDriverScoreStatisticsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(InspectionDriverScoreStatisticsListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfInspectionDriverScoreStatisticsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfInspectionDriverScoreStatisticsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfInspectionDriverScoreStatisticsListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfInspectionDriverScoreStatisticsListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfInspectionDriverScoreStatisticsListDto {
    totalCount: number | undefined;
    items: InspectionDriverScoreStatisticsListDto[] | undefined;
}

export class InspectionDriverScoreStatisticsListDto implements IInspectionDriverScoreStatisticsListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 当期剩余可扣分值 */
    surplusScore: number | undefined;
    /** 当期扣分开始日期 */
    deductionStartDate: moment.Moment | undefined;
    /** 扣分分值 */
    mark: number | undefined;
    /** 历史扣分总计 */
    historicalMark: number | undefined;
    /** 当前扣分总计 */
    currentMark: number | undefined;
    /** 当前扣分排名 */
    currentMarkRanking: number | undefined;

    constructor(data?: IInspectionDriverScoreStatisticsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.surplusScore = data["surplusScore"];
            this.deductionStartDate = data["deductionStartDate"] ? moment(data["deductionStartDate"].toString()) : <any>undefined;
            this.mark = data["mark"];
            this.historicalMark = data["historicalMark"];
            this.currentMark = data["currentMark"];
            this.currentMarkRanking = data["currentMarkRanking"];
        }
    }

    static fromJS(data: any): InspectionDriverScoreStatisticsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionDriverScoreStatisticsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["surplusScore"] = this.surplusScore;
        data["deductionStartDate"] = this.deductionStartDate ? this.deductionStartDate.toISOString() : <any>undefined;
        data["mark"] = this.mark;
        data["historicalMark"] = this.historicalMark;
        data["currentMark"] = this.currentMark;
        data["currentMarkRanking"] = this.currentMarkRanking;
        return data; 
    }

    clone(): InspectionDriverScoreStatisticsListDto {
        const json = this.toJSON();
        let result = new InspectionDriverScoreStatisticsListDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionDriverScoreStatisticsListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 当期剩余可扣分值 */
    surplusScore: number | undefined;
    /** 当期扣分开始日期 */
    deductionStartDate: moment.Moment | undefined;
    /** 扣分分值 */
    mark: number | undefined;
    /** 历史扣分总计 */
    historicalMark: number | undefined;
    /** 当前扣分总计 */
    currentMark: number | undefined;
    /** 当前扣分排名 */
    currentMarkRanking: number | undefined;
}

export class PagedResultDtoOfInspectionScoreListDto implements IPagedResultDtoOfInspectionScoreListDto {
    totalCount: number | undefined;
    items: InspectionScoreListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfInspectionScoreListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(InspectionScoreListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfInspectionScoreListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfInspectionScoreListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfInspectionScoreListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfInspectionScoreListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfInspectionScoreListDto {
    totalCount: number | undefined;
    items: InspectionScoreListDto[] | undefined;
}

export class InspectionScoreListDto implements IInspectionScoreListDto {
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 最小扣分分值 */
    minMark: number | undefined;
    /** 最大扣分 */
    maxMark: number | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 修改人 */
    creatorUserName: string | undefined;
    /** 修改时间 */
    lastModifierUserName: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IInspectionScoreListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.categoryCode = data["categoryCode"];
            this.categoryName = data["categoryName"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.minMark = data["minMark"];
            this.maxMark = data["maxMark"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): InspectionScoreListDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionScoreListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["categoryCode"] = this.categoryCode;
        data["categoryName"] = this.categoryName;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["minMark"] = this.minMark;
        data["maxMark"] = this.maxMark;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): InspectionScoreListDto {
        const json = this.toJSON();
        let result = new InspectionScoreListDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionScoreListDto {
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 最小扣分分值 */
    minMark: number | undefined;
    /** 最大扣分 */
    maxMark: number | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 修改人 */
    creatorUserName: string | undefined;
    /** 修改时间 */
    lastModifierUserName: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetInspectionScoreForEditOutput implements IGetInspectionScoreForEditOutput {
    inspectionScore: InspectionScoreEditDto | undefined;

    constructor(data?: IGetInspectionScoreForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inspectionScore = data["inspectionScore"] ? InspectionScoreEditDto.fromJS(data["inspectionScore"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetInspectionScoreForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetInspectionScoreForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inspectionScore"] = this.inspectionScore ? this.inspectionScore.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetInspectionScoreForEditOutput {
        const json = this.toJSON();
        let result = new GetInspectionScoreForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetInspectionScoreForEditOutput {
    inspectionScore: InspectionScoreEditDto | undefined;
}

export class InspectionScoreEditDto implements IInspectionScoreEditDto {
    id: string | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 最小扣分分值 */
    minMark: number | undefined;
    /** 最大扣分 */
    maxMark: number | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;

    constructor(data?: IInspectionScoreEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.categoryCode = data["categoryCode"];
            this.categoryName = data["categoryName"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.minMark = data["minMark"];
            this.maxMark = data["maxMark"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
        }
    }

    static fromJS(data: any): InspectionScoreEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionScoreEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["categoryCode"] = this.categoryCode;
        data["categoryName"] = this.categoryName;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["minMark"] = this.minMark;
        data["maxMark"] = this.maxMark;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        return data; 
    }

    clone(): InspectionScoreEditDto {
        const json = this.toJSON();
        let result = new InspectionScoreEditDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionScoreEditDto {
    id: string | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 最小扣分分值 */
    minMark: number | undefined;
    /** 最大扣分 */
    maxMark: number | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
}

export class InspectionScoreReceivedDto implements IInspectionScoreReceivedDto {
    thirdParCode: string | undefined;
    /** 所属物流公司 */
    tenantId: number | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 最小扣分分值 */
    minMark: number | undefined;
    /** 最大扣分 */
    maxMark: number | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;

    constructor(data?: IInspectionScoreReceivedDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdParCode = data["thirdParCode"];
            this.tenantId = data["tenantId"];
            this.categoryCode = data["categoryCode"];
            this.categoryName = data["categoryName"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.minMark = data["minMark"];
            this.maxMark = data["maxMark"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): InspectionScoreReceivedDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionScoreReceivedDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdParCode"] = this.thirdParCode;
        data["tenantId"] = this.tenantId;
        data["categoryCode"] = this.categoryCode;
        data["categoryName"] = this.categoryName;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["minMark"] = this.minMark;
        data["maxMark"] = this.maxMark;
        data["isActive"] = this.isActive;
        return data; 
    }

    clone(): InspectionScoreReceivedDto {
        const json = this.toJSON();
        let result = new InspectionScoreReceivedDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionScoreReceivedDto {
    thirdParCode: string | undefined;
    /** 所属物流公司 */
    tenantId: number | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 最小扣分分值 */
    minMark: number | undefined;
    /** 最大扣分 */
    maxMark: number | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
}

export class GetItemCodeListDto implements IGetItemCodeListDto {
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 最小扣分分值 */
    minMark: number | undefined;
    /** 最大扣分分值 */
    maxMark: number | undefined;

    constructor(data?: IGetItemCodeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.minMark = data["minMark"];
            this.maxMark = data["maxMark"];
        }
    }

    static fromJS(data: any): GetItemCodeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetItemCodeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["minMark"] = this.minMark;
        data["maxMark"] = this.maxMark;
        return data; 
    }

    clone(): GetItemCodeListDto {
        const json = this.toJSON();
        let result = new GetItemCodeListDto();
        result.init(json);
        return result;
    }
}

export interface IGetItemCodeListDto {
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 最小扣分分值 */
    minMark: number | undefined;
    /** 最大扣分分值 */
    maxMark: number | undefined;
}

export class PagedResultDtoOfInspectionScoreStatisticsListDto implements IPagedResultDtoOfInspectionScoreStatisticsListDto {
    totalCount: number | undefined;
    items: InspectionScoreStatisticsListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfInspectionScoreStatisticsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(InspectionScoreStatisticsListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfInspectionScoreStatisticsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfInspectionScoreStatisticsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfInspectionScoreStatisticsListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfInspectionScoreStatisticsListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfInspectionScoreStatisticsListDto {
    totalCount: number | undefined;
    items: InspectionScoreStatisticsListDto[] | undefined;
}

export class InspectionScoreStatisticsListDto implements IInspectionScoreStatisticsListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 扣分分值 */
    mark: number | undefined;

    constructor(data?: IInspectionScoreStatisticsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.categoryCode = data["categoryCode"];
            this.categoryName = data["categoryName"];
            this.itemCode = data["itemCode"];
            this.itemName = data["itemName"];
            this.mark = data["mark"];
        }
    }

    static fromJS(data: any): InspectionScoreStatisticsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new InspectionScoreStatisticsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["categoryCode"] = this.categoryCode;
        data["categoryName"] = this.categoryName;
        data["itemCode"] = this.itemCode;
        data["itemName"] = this.itemName;
        data["mark"] = this.mark;
        return data; 
    }

    clone(): InspectionScoreStatisticsListDto {
        const json = this.toJSON();
        let result = new InspectionScoreStatisticsListDto();
        result.init(json);
        return result;
    }
}

export interface IInspectionScoreStatisticsListDto {
    /** 第三方系统编码 */
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    /** 扣分分类编码 */
    categoryCode: string | undefined;
    /** 扣分分类名称 */
    categoryName: string | undefined;
    /** 扣分项目编码 */
    itemCode: string | undefined;
    /** 扣分项目名称 */
    itemName: string | undefined;
    /** 扣分分值 */
    mark: number | undefined;
}

export class PagedResultDtoOfInStockListDto implements IPagedResultDtoOfInStockListDto {
    totalCount: number | undefined;
    items: InStockListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfInStockListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(InStockListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfInStockListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfInStockListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfInStockListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfInStockListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfInStockListDto {
    totalCount: number | undefined;
    items: InStockListDto[] | undefined;
}

export class InStockListDto implements IInStockListDto {
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    purchasePrice: number | undefined;
    salesPrice: number | undefined;
    currentStock: number | undefined;
    upperLimit: number | undefined;
    lowerLimit: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    purchaseMeasureUnit: string | undefined;
    purchaseMeasureUnitName: string | undefined;
    /** 备注 */
    description: string | undefined;
    materielId: number | undefined;
    /** 库存类型 */
    currentStockType: InStockListDtoCurrentStockType | undefined;
    readonly currentStockTypeName: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IInStockListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.category = data["category"];
            this.purchasePrice = data["purchasePrice"];
            this.salesPrice = data["salesPrice"];
            this.currentStock = data["currentStock"];
            this.upperLimit = data["upperLimit"];
            this.lowerLimit = data["lowerLimit"];
            this.manufacturer = data["manufacturer"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.baseMeasureUnitName = data["baseMeasureUnitName"];
            this.purchaseMeasureUnit = data["purchaseMeasureUnit"];
            this.purchaseMeasureUnitName = data["purchaseMeasureUnitName"];
            this.description = data["description"];
            this.materielId = data["materielId"];
            this.currentStockType = data["currentStockType"];
            (<any>this).currentStockTypeName = data["currentStockTypeName"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): InStockListDto {
        data = typeof data === 'object' ? data : {};
        let result = new InStockListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["category"] = this.category;
        data["purchasePrice"] = this.purchasePrice;
        data["salesPrice"] = this.salesPrice;
        data["currentStock"] = this.currentStock;
        data["upperLimit"] = this.upperLimit;
        data["lowerLimit"] = this.lowerLimit;
        data["manufacturer"] = this.manufacturer;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["baseMeasureUnitName"] = this.baseMeasureUnitName;
        data["purchaseMeasureUnit"] = this.purchaseMeasureUnit;
        data["purchaseMeasureUnitName"] = this.purchaseMeasureUnitName;
        data["description"] = this.description;
        data["materielId"] = this.materielId;
        data["currentStockType"] = this.currentStockType;
        data["currentStockTypeName"] = this.currentStockTypeName;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): InStockListDto {
        const json = this.toJSON();
        let result = new InStockListDto();
        result.init(json);
        return result;
    }
}

export interface IInStockListDto {
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    purchasePrice: number | undefined;
    salesPrice: number | undefined;
    currentStock: number | undefined;
    upperLimit: number | undefined;
    lowerLimit: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    purchaseMeasureUnit: string | undefined;
    purchaseMeasureUnitName: string | undefined;
    /** 备注 */
    description: string | undefined;
    materielId: number | undefined;
    /** 库存类型 */
    currentStockType: InStockListDtoCurrentStockType | undefined;
    currentStockTypeName: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetInStockForEditOutput implements IGetInStockForEditOutput {
    inStock: InStockEditDto | undefined;

    constructor(data?: IGetInStockForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inStock = data["inStock"] ? InStockEditDto.fromJS(data["inStock"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetInStockForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetInStockForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inStock"] = this.inStock ? this.inStock.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetInStockForEditOutput {
        const json = this.toJSON();
        let result = new GetInStockForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetInStockForEditOutput {
    inStock: InStockEditDto | undefined;
}

export class InStockEditDto implements IInStockEditDto {
    id: number | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    purchasePrice: number | undefined;
    salesPrice: number | undefined;
    currentStock: number | undefined;
    upperLimit: number | undefined;
    lowerLimit: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    purchaseMeasureUnit: string | undefined;
    /** 备注 */
    description: string | undefined;
    materielId: number | undefined;
    /** 库存类型 */
    currentStockType: InStockEditDtoCurrentStockType | undefined;
    organizationUnitId: number | undefined;

    constructor(data?: IInStockEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.category = data["category"];
            this.purchasePrice = data["purchasePrice"];
            this.salesPrice = data["salesPrice"];
            this.currentStock = data["currentStock"];
            this.upperLimit = data["upperLimit"];
            this.lowerLimit = data["lowerLimit"];
            this.manufacturer = data["manufacturer"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.purchaseMeasureUnit = data["purchaseMeasureUnit"];
            this.description = data["description"];
            this.materielId = data["materielId"];
            this.currentStockType = data["currentStockType"];
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): InStockEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new InStockEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["category"] = this.category;
        data["purchasePrice"] = this.purchasePrice;
        data["salesPrice"] = this.salesPrice;
        data["currentStock"] = this.currentStock;
        data["upperLimit"] = this.upperLimit;
        data["lowerLimit"] = this.lowerLimit;
        data["manufacturer"] = this.manufacturer;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["purchaseMeasureUnit"] = this.purchaseMeasureUnit;
        data["description"] = this.description;
        data["materielId"] = this.materielId;
        data["currentStockType"] = this.currentStockType;
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }

    clone(): InStockEditDto {
        const json = this.toJSON();
        let result = new InStockEditDto();
        result.init(json);
        return result;
    }
}

export interface IInStockEditDto {
    id: number | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    purchasePrice: number | undefined;
    salesPrice: number | undefined;
    currentStock: number | undefined;
    upperLimit: number | undefined;
    lowerLimit: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    purchaseMeasureUnit: string | undefined;
    /** 备注 */
    description: string | undefined;
    materielId: number | undefined;
    /** 库存类型 */
    currentStockType: InStockEditDtoCurrentStockType | undefined;
    organizationUnitId: number | undefined;
}

export class CreateInStockInput implements ICreateInStockInput {
    inStock: InStockSaveEditDto | undefined;

    constructor(data?: ICreateInStockInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.inStock = data["inStock"] ? InStockSaveEditDto.fromJS(data["inStock"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateInStockInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateInStockInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inStock"] = this.inStock ? this.inStock.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateInStockInput {
        const json = this.toJSON();
        let result = new CreateInStockInput();
        result.init(json);
        return result;
    }
}

export interface ICreateInStockInput {
    inStock: InStockSaveEditDto | undefined;
}

export class InStockSaveEditDto implements IInStockSaveEditDto {
    id: string | undefined;
    code: string;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    purchasePrice: number | undefined;
    salesPrice: number | undefined;
    currentStock: number | undefined;
    upperLimit: number | undefined;
    lowerLimit: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    purchaseMeasureUnit: string | undefined;
    /** 备注 */
    description: string | undefined;
    materielId: number | undefined;
    /** 库存类型 */
    currentStockType: InStockSaveEditDtoCurrentStockType;
    organizationUnitId: number;

    constructor(data?: IInStockSaveEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.category = data["category"];
            this.purchasePrice = data["purchasePrice"];
            this.salesPrice = data["salesPrice"];
            this.currentStock = data["currentStock"];
            this.upperLimit = data["upperLimit"];
            this.lowerLimit = data["lowerLimit"];
            this.manufacturer = data["manufacturer"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.purchaseMeasureUnit = data["purchaseMeasureUnit"];
            this.description = data["description"];
            this.materielId = data["materielId"];
            this.currentStockType = data["currentStockType"];
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): InStockSaveEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new InStockSaveEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["category"] = this.category;
        data["purchasePrice"] = this.purchasePrice;
        data["salesPrice"] = this.salesPrice;
        data["currentStock"] = this.currentStock;
        data["upperLimit"] = this.upperLimit;
        data["lowerLimit"] = this.lowerLimit;
        data["manufacturer"] = this.manufacturer;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["purchaseMeasureUnit"] = this.purchaseMeasureUnit;
        data["description"] = this.description;
        data["materielId"] = this.materielId;
        data["currentStockType"] = this.currentStockType;
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }

    clone(): InStockSaveEditDto {
        const json = this.toJSON();
        let result = new InStockSaveEditDto();
        result.init(json);
        return result;
    }
}

export interface IInStockSaveEditDto {
    id: string | undefined;
    code: string;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    purchasePrice: number | undefined;
    salesPrice: number | undefined;
    currentStock: number | undefined;
    upperLimit: number | undefined;
    lowerLimit: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    purchaseMeasureUnit: string | undefined;
    /** 备注 */
    description: string | undefined;
    materielId: number | undefined;
    /** 库存类型 */
    currentStockType: InStockSaveEditDtoCurrentStockType;
    organizationUnitId: number;
}

export class PagedResultDtoOfMaintenanceCostListDto implements IPagedResultDtoOfMaintenanceCostListDto {
    totalCount: number | undefined;
    items: MaintenanceCostListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfMaintenanceCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(MaintenanceCostListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMaintenanceCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMaintenanceCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfMaintenanceCostListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfMaintenanceCostListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfMaintenanceCostListDto {
    totalCount: number | undefined;
    items: MaintenanceCostListDto[] | undefined;
}

export class MaintenanceCostListDto implements IMaintenanceCostListDto {
    status: string | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    checkUserName: string | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    costDescription: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IMaintenanceCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.status = data["status"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.transportCheckStatus = data["transportCheckStatus"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : <any>undefined;
            this.checkUserId = data["checkUserId"];
            this.checkUserName = data["checkUserName"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.costDescription = data["costDescription"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): MaintenanceCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["transportCheckStatus"] = this.transportCheckStatus;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : <any>undefined;
        data["checkUserId"] = this.checkUserId;
        data["checkUserName"] = this.checkUserName;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["costDescription"] = this.costDescription;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): MaintenanceCostListDto {
        const json = this.toJSON();
        let result = new MaintenanceCostListDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceCostListDto {
    status: string | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    checkUserName: string | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    costDescription: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetMaintenanceCostForEditOutput implements IGetMaintenanceCostForEditOutput {
    maintenanceCost: MaintenanceCostEditDto | undefined;

    constructor(data?: IGetMaintenanceCostForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceCost = data["maintenanceCost"] ? MaintenanceCostEditDto.fromJS(data["maintenanceCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMaintenanceCostForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaintenanceCostForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceCost"] = this.maintenanceCost ? this.maintenanceCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetMaintenanceCostForEditOutput {
        const json = this.toJSON();
        let result = new GetMaintenanceCostForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetMaintenanceCostForEditOutput {
    maintenanceCost: MaintenanceCostEditDto | undefined;
}

export class MaintenanceCostEditDto implements IMaintenanceCostEditDto {
    id: string | undefined;
    status: string | undefined;
    amount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment;
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
    costDetails: MaintenanceCostDetailDto[] | undefined;

    constructor(data?: IMaintenanceCostEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.status = data["status"];
            this.amount = data["amount"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.actualAmount = data["actualAmount"];
            this.transportCheckStatus = data["transportCheckStatus"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : <any>undefined;
            this.checkUserId = data["checkUserId"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.costDescription = data["costDescription"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxAmount = data["taxAmount"];
            if (data["costDetails"] && data["costDetails"].constructor === Array) {
                this.costDetails = [] as any;
                for (let item of data["costDetails"])
                    this.costDetails.push(MaintenanceCostDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): MaintenanceCostEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceCostEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["amount"] = this.amount;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["actualAmount"] = this.actualAmount;
        data["transportCheckStatus"] = this.transportCheckStatus;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : <any>undefined;
        data["checkUserId"] = this.checkUserId;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["costDescription"] = this.costDescription;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxAmount"] = this.taxAmount;
        if (this.costDetails && this.costDetails.constructor === Array) {
            data["costDetails"] = [];
            for (let item of this.costDetails)
                data["costDetails"].push(item.toJSON());
        }
        return data; 
    }

    clone(): MaintenanceCostEditDto {
        const json = this.toJSON();
        let result = new MaintenanceCostEditDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceCostEditDto {
    id: string | undefined;
    status: string | undefined;
    amount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment;
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
    costDetails: MaintenanceCostDetailDto[] | undefined;
}

export class MaintenanceCostDetailDto implements IMaintenanceCostDetailDto {
    id: string | undefined;
    project: string;
    repairManIds: string | undefined;
    repairManIdNames: string | undefined;
    baseMeasureUnitName: string | undefined;
    baseMeasureUnit: string | undefined;
    salesPrice: number | undefined;
    repairPrice: number | undefined;
    quantity: number | undefined;
    materialCharge: number | undefined;
    repairCharge: number | undefined;
    scale: number | undefined;
    percentage: number | undefined;
    maintenanceRegisterId: string | undefined;

    constructor(data?: IMaintenanceCostDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.project = data["project"];
            this.repairManIds = data["repairManIds"];
            this.repairManIdNames = data["repairManIdNames"];
            this.baseMeasureUnitName = data["baseMeasureUnitName"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.salesPrice = data["salesPrice"];
            this.repairPrice = data["repairPrice"];
            this.quantity = data["quantity"];
            this.materialCharge = data["materialCharge"];
            this.repairCharge = data["repairCharge"];
            this.scale = data["scale"];
            this.percentage = data["percentage"];
            this.maintenanceRegisterId = data["maintenanceRegisterId"];
        }
    }

    static fromJS(data: any): MaintenanceCostDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceCostDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["project"] = this.project;
        data["repairManIds"] = this.repairManIds;
        data["repairManIdNames"] = this.repairManIdNames;
        data["baseMeasureUnitName"] = this.baseMeasureUnitName;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["salesPrice"] = this.salesPrice;
        data["repairPrice"] = this.repairPrice;
        data["quantity"] = this.quantity;
        data["materialCharge"] = this.materialCharge;
        data["repairCharge"] = this.repairCharge;
        data["scale"] = this.scale;
        data["percentage"] = this.percentage;
        data["maintenanceRegisterId"] = this.maintenanceRegisterId;
        return data; 
    }

    clone(): MaintenanceCostDetailDto {
        const json = this.toJSON();
        let result = new MaintenanceCostDetailDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceCostDetailDto {
    id: string | undefined;
    project: string;
    repairManIds: string | undefined;
    repairManIdNames: string | undefined;
    baseMeasureUnitName: string | undefined;
    baseMeasureUnit: string | undefined;
    salesPrice: number | undefined;
    repairPrice: number | undefined;
    quantity: number | undefined;
    materialCharge: number | undefined;
    repairCharge: number | undefined;
    scale: number | undefined;
    percentage: number | undefined;
    maintenanceRegisterId: string | undefined;
}

export class CreateMaintenanceCostInput implements ICreateMaintenanceCostInput {
    maintenanceCost: MaintenanceCostEditForSaveDto | undefined;
    maintenanceCostDetails: MaintenanceCostDetailDto[] | undefined;

    constructor(data?: ICreateMaintenanceCostInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceCost = data["maintenanceCost"] ? MaintenanceCostEditForSaveDto.fromJS(data["maintenanceCost"]) : <any>undefined;
            if (data["maintenanceCostDetails"] && data["maintenanceCostDetails"].constructor === Array) {
                this.maintenanceCostDetails = [] as any;
                for (let item of data["maintenanceCostDetails"])
                    this.maintenanceCostDetails.push(MaintenanceCostDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMaintenanceCostInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaintenanceCostInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceCost"] = this.maintenanceCost ? this.maintenanceCost.toJSON() : <any>undefined;
        if (this.maintenanceCostDetails && this.maintenanceCostDetails.constructor === Array) {
            data["maintenanceCostDetails"] = [];
            for (let item of this.maintenanceCostDetails)
                data["maintenanceCostDetails"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateMaintenanceCostInput {
        const json = this.toJSON();
        let result = new CreateMaintenanceCostInput();
        result.init(json);
        return result;
    }
}

export interface ICreateMaintenanceCostInput {
    maintenanceCost: MaintenanceCostEditForSaveDto | undefined;
    maintenanceCostDetails: MaintenanceCostDetailDto[] | undefined;
}

export class MaintenanceCostEditForSaveDto implements IMaintenanceCostEditForSaveDto {
    id: string | undefined;
    status: string;
    amount: number;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    accountMethod: string;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment;
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;

    constructor(data?: IMaintenanceCostEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.status = data["status"];
            this.amount = data["amount"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.actualAmount = data["actualAmount"];
            this.transportCheckStatus = data["transportCheckStatus"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : <any>undefined;
            this.checkUserId = data["checkUserId"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.costDescription = data["costDescription"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxAmount = data["taxAmount"];
        }
    }

    static fromJS(data: any): MaintenanceCostEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceCostEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["amount"] = this.amount;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["actualAmount"] = this.actualAmount;
        data["transportCheckStatus"] = this.transportCheckStatus;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : <any>undefined;
        data["checkUserId"] = this.checkUserId;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["costDescription"] = this.costDescription;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxAmount"] = this.taxAmount;
        return data; 
    }

    clone(): MaintenanceCostEditForSaveDto {
        const json = this.toJSON();
        let result = new MaintenanceCostEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceCostEditForSaveDto {
    id: string | undefined;
    status: string;
    amount: number;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    accountMethod: string;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment;
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
}

export class CreateMaintenanceCostDetailInput implements ICreateMaintenanceCostDetailInput {
    id: string | undefined;
    maintenanceCostDetails: MaintenanceCostDetailDto[] | undefined;

    constructor(data?: ICreateMaintenanceCostDetailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["maintenanceCostDetails"] && data["maintenanceCostDetails"].constructor === Array) {
                this.maintenanceCostDetails = [] as any;
                for (let item of data["maintenanceCostDetails"])
                    this.maintenanceCostDetails.push(MaintenanceCostDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMaintenanceCostDetailInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaintenanceCostDetailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.maintenanceCostDetails && this.maintenanceCostDetails.constructor === Array) {
            data["maintenanceCostDetails"] = [];
            for (let item of this.maintenanceCostDetails)
                data["maintenanceCostDetails"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateMaintenanceCostDetailInput {
        const json = this.toJSON();
        let result = new CreateMaintenanceCostDetailInput();
        result.init(json);
        return result;
    }
}

export interface ICreateMaintenanceCostDetailInput {
    id: string | undefined;
    maintenanceCostDetails: MaintenanceCostDetailDto[] | undefined;
}

export class PagedResultDtoOfMaintenanceFeeAllotListDto implements IPagedResultDtoOfMaintenanceFeeAllotListDto {
    totalCount: number | undefined;
    items: MaintenanceFeeAllotListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfMaintenanceFeeAllotListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(MaintenanceFeeAllotListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMaintenanceFeeAllotListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMaintenanceFeeAllotListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfMaintenanceFeeAllotListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfMaintenanceFeeAllotListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfMaintenanceFeeAllotListDto {
    totalCount: number | undefined;
    items: MaintenanceFeeAllotListDto[] | undefined;
}

export class MaintenanceFeeAllotListDto implements IMaintenanceFeeAllotListDto {
    /** 业务组织 */
    organizationUnitId: number;
    /** 客户 */
    customerId: number | undefined;
    /** 供应商 */
    supplierId: number | undefined;
    /** 交易组织 */
    tradeOrganizationUnitId: number | undefined;
    /** 上账单号 */
    code: string | undefined;
    party: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    /** 费用类型（数据字典维护） */
    expenseType: string | undefined;
    /** 单车数量 */
    vehicleQuantity: number | undefined;
    /** 应收总金额 */
    amount: number | undefined;
    /** 实收金额 */
    actualAmount: number | undefined;
    /** 差额 */
    imbalanceProfit: number | undefined;
    /** 维修上账类型 */
    maintenanceSubmitAccountType: MaintenanceFeeAllotListDtoMaintenanceSubmitAccountType | undefined;
    readonly typeName: string | undefined;
    /** 上账状态(已上账、未上账，已取消) */
    submitAccountState: string | undefined;
    /** 上账日期 */
    submitAccountDate: moment.Moment | undefined;
    /** 财务结算日期 */
    makeAccountDate: moment.Moment | undefined;
    /** 统计人 */
    operatorName: string | undefined;
    operatorId: number | undefined;
    /** 备注 */
    description: string | undefined;
    organizationUnitName: string | undefined;
    /** 客户 */
    customerName: string | undefined;
    /** 供应商 */
    supplierName: string | undefined;
    /** 交易组织 */
    tradeOrganizationUnitName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IMaintenanceFeeAllotListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.customerId = data["customerId"];
            this.supplierId = data["supplierId"];
            this.tradeOrganizationUnitId = data["tradeOrganizationUnitId"];
            this.code = data["code"];
            this.party = data["party"];
            this.expenseItem = data["expenseItem"];
            this.expenseType = data["expenseType"];
            this.vehicleQuantity = data["vehicleQuantity"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.imbalanceProfit = data["imbalanceProfit"];
            this.maintenanceSubmitAccountType = data["maintenanceSubmitAccountType"];
            (<any>this).typeName = data["typeName"];
            this.submitAccountState = data["submitAccountState"];
            this.submitAccountDate = data["submitAccountDate"] ? moment(data["submitAccountDate"].toString()) : <any>undefined;
            this.makeAccountDate = data["makeAccountDate"] ? moment(data["makeAccountDate"].toString()) : <any>undefined;
            this.operatorName = data["operatorName"];
            this.operatorId = data["operatorId"];
            this.description = data["description"];
            this.organizationUnitName = data["organizationUnitName"];
            this.customerName = data["customerName"];
            this.supplierName = data["supplierName"];
            this.tradeOrganizationUnitName = data["tradeOrganizationUnitName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): MaintenanceFeeAllotListDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceFeeAllotListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerId"] = this.customerId;
        data["supplierId"] = this.supplierId;
        data["tradeOrganizationUnitId"] = this.tradeOrganizationUnitId;
        data["code"] = this.code;
        data["party"] = this.party;
        data["expenseItem"] = this.expenseItem;
        data["expenseType"] = this.expenseType;
        data["vehicleQuantity"] = this.vehicleQuantity;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["imbalanceProfit"] = this.imbalanceProfit;
        data["maintenanceSubmitAccountType"] = this.maintenanceSubmitAccountType;
        data["typeName"] = this.typeName;
        data["submitAccountState"] = this.submitAccountState;
        data["submitAccountDate"] = this.submitAccountDate ? this.submitAccountDate.toISOString() : <any>undefined;
        data["makeAccountDate"] = this.makeAccountDate ? this.makeAccountDate.toISOString() : <any>undefined;
        data["operatorName"] = this.operatorName;
        data["operatorId"] = this.operatorId;
        data["description"] = this.description;
        data["organizationUnitName"] = this.organizationUnitName;
        data["customerName"] = this.customerName;
        data["supplierName"] = this.supplierName;
        data["tradeOrganizationUnitName"] = this.tradeOrganizationUnitName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): MaintenanceFeeAllotListDto {
        const json = this.toJSON();
        let result = new MaintenanceFeeAllotListDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceFeeAllotListDto {
    /** 业务组织 */
    organizationUnitId: number;
    /** 客户 */
    customerId: number | undefined;
    /** 供应商 */
    supplierId: number | undefined;
    /** 交易组织 */
    tradeOrganizationUnitId: number | undefined;
    /** 上账单号 */
    code: string | undefined;
    party: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string | undefined;
    /** 费用类型（数据字典维护） */
    expenseType: string | undefined;
    /** 单车数量 */
    vehicleQuantity: number | undefined;
    /** 应收总金额 */
    amount: number | undefined;
    /** 实收金额 */
    actualAmount: number | undefined;
    /** 差额 */
    imbalanceProfit: number | undefined;
    /** 维修上账类型 */
    maintenanceSubmitAccountType: MaintenanceFeeAllotListDtoMaintenanceSubmitAccountType | undefined;
    typeName: string | undefined;
    /** 上账状态(已上账、未上账，已取消) */
    submitAccountState: string | undefined;
    /** 上账日期 */
    submitAccountDate: moment.Moment | undefined;
    /** 财务结算日期 */
    makeAccountDate: moment.Moment | undefined;
    /** 统计人 */
    operatorName: string | undefined;
    operatorId: number | undefined;
    /** 备注 */
    description: string | undefined;
    organizationUnitName: string | undefined;
    /** 客户 */
    customerName: string | undefined;
    /** 供应商 */
    supplierName: string | undefined;
    /** 交易组织 */
    tradeOrganizationUnitName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetMaintenanceFeeAllotForEditOutput implements IGetMaintenanceFeeAllotForEditOutput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditDto | undefined;

    constructor(data?: IGetMaintenanceFeeAllotForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceFeeAllot = data["maintenanceFeeAllot"] ? MaintenanceFeeAllotEditDto.fromJS(data["maintenanceFeeAllot"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMaintenanceFeeAllotForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaintenanceFeeAllotForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceFeeAllot"] = this.maintenanceFeeAllot ? this.maintenanceFeeAllot.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetMaintenanceFeeAllotForEditOutput {
        const json = this.toJSON();
        let result = new GetMaintenanceFeeAllotForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetMaintenanceFeeAllotForEditOutput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditDto | undefined;
}

export class MaintenanceFeeAllotEditDto implements IMaintenanceFeeAllotEditDto {
    id: string | undefined;
    /** 上账单号 */
    code: string | undefined;
    /** 业务组织 */
    organizationUnitId: number;
    /** 客户 */
    customerId: number | undefined;
    /** 供应商 */
    supplierId: number | undefined;
    /** 交易组织 */
    tradeOrganizationUnitId: number | undefined;
    party: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string;
    /** 费用类型（数据字典维护） */
    expenseType: string;
    /** 单车数量 */
    vehicleQuantity: number | undefined;
    /** 应收总金额 */
    amount: number | undefined;
    /** 实收金额 */
    actualAmount: number | undefined;
    /** 差额 */
    imbalanceProfit: number | undefined;
    /** 维修上账类型 */
    maintenanceSubmitAccountType: MaintenanceFeeAllotEditDtoMaintenanceSubmitAccountType | undefined;
    /** 上账状态(已上账、未上账，已取消) */
    submitAccountState: string | undefined;
    /** 上账日期 */
    submitAccountDate: moment.Moment | undefined;
    /** 财务结算日期 */
    makeAccountDate: moment.Moment | undefined;
    /** 统计人 */
    operatorId: number | undefined;
    /** 备注 */
    description: string | undefined;

    constructor(data?: IMaintenanceFeeAllotEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.organizationUnitId = data["organizationUnitId"];
            this.customerId = data["customerId"];
            this.supplierId = data["supplierId"];
            this.tradeOrganizationUnitId = data["tradeOrganizationUnitId"];
            this.party = data["party"];
            this.expenseItem = data["expenseItem"];
            this.expenseType = data["expenseType"];
            this.vehicleQuantity = data["vehicleQuantity"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.imbalanceProfit = data["imbalanceProfit"];
            this.maintenanceSubmitAccountType = data["maintenanceSubmitAccountType"];
            this.submitAccountState = data["submitAccountState"];
            this.submitAccountDate = data["submitAccountDate"] ? moment(data["submitAccountDate"].toString()) : <any>undefined;
            this.makeAccountDate = data["makeAccountDate"] ? moment(data["makeAccountDate"].toString()) : <any>undefined;
            this.operatorId = data["operatorId"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): MaintenanceFeeAllotEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceFeeAllotEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerId"] = this.customerId;
        data["supplierId"] = this.supplierId;
        data["tradeOrganizationUnitId"] = this.tradeOrganizationUnitId;
        data["party"] = this.party;
        data["expenseItem"] = this.expenseItem;
        data["expenseType"] = this.expenseType;
        data["vehicleQuantity"] = this.vehicleQuantity;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["imbalanceProfit"] = this.imbalanceProfit;
        data["maintenanceSubmitAccountType"] = this.maintenanceSubmitAccountType;
        data["submitAccountState"] = this.submitAccountState;
        data["submitAccountDate"] = this.submitAccountDate ? this.submitAccountDate.toISOString() : <any>undefined;
        data["makeAccountDate"] = this.makeAccountDate ? this.makeAccountDate.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["description"] = this.description;
        return data; 
    }

    clone(): MaintenanceFeeAllotEditDto {
        const json = this.toJSON();
        let result = new MaintenanceFeeAllotEditDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceFeeAllotEditDto {
    id: string | undefined;
    /** 上账单号 */
    code: string | undefined;
    /** 业务组织 */
    organizationUnitId: number;
    /** 客户 */
    customerId: number | undefined;
    /** 供应商 */
    supplierId: number | undefined;
    /** 交易组织 */
    tradeOrganizationUnitId: number | undefined;
    party: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string;
    /** 费用类型（数据字典维护） */
    expenseType: string;
    /** 单车数量 */
    vehicleQuantity: number | undefined;
    /** 应收总金额 */
    amount: number | undefined;
    /** 实收金额 */
    actualAmount: number | undefined;
    /** 差额 */
    imbalanceProfit: number | undefined;
    /** 维修上账类型 */
    maintenanceSubmitAccountType: MaintenanceFeeAllotEditDtoMaintenanceSubmitAccountType | undefined;
    /** 上账状态(已上账、未上账，已取消) */
    submitAccountState: string | undefined;
    /** 上账日期 */
    submitAccountDate: moment.Moment | undefined;
    /** 财务结算日期 */
    makeAccountDate: moment.Moment | undefined;
    /** 统计人 */
    operatorId: number | undefined;
    /** 备注 */
    description: string | undefined;
}

export class GetMaintenanceFeeAllotForEditAccountOutput implements IGetMaintenanceFeeAllotForEditAccountOutput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditAccountDto | undefined;

    constructor(data?: IGetMaintenanceFeeAllotForEditAccountOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceFeeAllot = data["maintenanceFeeAllot"] ? MaintenanceFeeAllotEditAccountDto.fromJS(data["maintenanceFeeAllot"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMaintenanceFeeAllotForEditAccountOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaintenanceFeeAllotForEditAccountOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceFeeAllot"] = this.maintenanceFeeAllot ? this.maintenanceFeeAllot.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetMaintenanceFeeAllotForEditAccountOutput {
        const json = this.toJSON();
        let result = new GetMaintenanceFeeAllotForEditAccountOutput();
        result.init(json);
        return result;
    }
}

export interface IGetMaintenanceFeeAllotForEditAccountOutput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditAccountDto | undefined;
}

export class MaintenanceFeeAllotEditAccountDto implements IMaintenanceFeeAllotEditAccountDto {
    id: string | undefined;
    /** 财务结算日期 */
    makeAccountDate: moment.Moment;

    constructor(data?: IMaintenanceFeeAllotEditAccountDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.makeAccountDate = data["makeAccountDate"] ? moment(data["makeAccountDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MaintenanceFeeAllotEditAccountDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceFeeAllotEditAccountDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["makeAccountDate"] = this.makeAccountDate ? this.makeAccountDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): MaintenanceFeeAllotEditAccountDto {
        const json = this.toJSON();
        let result = new MaintenanceFeeAllotEditAccountDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceFeeAllotEditAccountDto {
    id: string | undefined;
    /** 财务结算日期 */
    makeAccountDate: moment.Moment;
}

export class CreateMaintenanceFeeAllotInput implements ICreateMaintenanceFeeAllotInput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditForSaveDto | undefined;
    maintenanceRegisters: MaintenanceRegisterListDto[] | undefined;

    constructor(data?: ICreateMaintenanceFeeAllotInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceFeeAllot = data["maintenanceFeeAllot"] ? MaintenanceFeeAllotEditForSaveDto.fromJS(data["maintenanceFeeAllot"]) : <any>undefined;
            if (data["maintenanceRegisters"] && data["maintenanceRegisters"].constructor === Array) {
                this.maintenanceRegisters = [] as any;
                for (let item of data["maintenanceRegisters"])
                    this.maintenanceRegisters.push(MaintenanceRegisterListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateMaintenanceFeeAllotInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaintenanceFeeAllotInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceFeeAllot"] = this.maintenanceFeeAllot ? this.maintenanceFeeAllot.toJSON() : <any>undefined;
        if (this.maintenanceRegisters && this.maintenanceRegisters.constructor === Array) {
            data["maintenanceRegisters"] = [];
            for (let item of this.maintenanceRegisters)
                data["maintenanceRegisters"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateMaintenanceFeeAllotInput {
        const json = this.toJSON();
        let result = new CreateMaintenanceFeeAllotInput();
        result.init(json);
        return result;
    }
}

export interface ICreateMaintenanceFeeAllotInput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditForSaveDto | undefined;
    maintenanceRegisters: MaintenanceRegisterListDto[] | undefined;
}

export class MaintenanceFeeAllotEditForSaveDto implements IMaintenanceFeeAllotEditForSaveDto {
    id: string | undefined;
    /** 上账单号 */
    code: string | undefined;
    /** 业务组织 */
    organizationUnitId: number;
    /** 客户 */
    customerId: number | undefined;
    /** 供应商 */
    supplierId: number | undefined;
    /** 交易组织 */
    tradeOrganizationUnitId: number | undefined;
    party: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string;
    /** 费用类型（数据字典维护） */
    expenseType: string;
    /** 单车数量 */
    vehicleQuantity: number | undefined;
    /** 应收总金额 */
    amount: number | undefined;
    /** 实收金额 */
    actualAmount: number | undefined;
    /** 差额 */
    imbalanceProfit: number | undefined;
    /** 维修上账类型 */
    maintenanceSubmitAccountType: MaintenanceFeeAllotEditForSaveDtoMaintenanceSubmitAccountType | undefined;
    /** 上账状态(已上账、未上账，已取消) */
    submitAccountState: string | undefined;
    /** 上账日期 */
    submitAccountDate: moment.Moment | undefined;
    /** 财务结算日期 */
    makeAccountDate: moment.Moment | undefined;
    /** 统计人 */
    operatorId: number | undefined;
    /** 备注 */
    description: string | undefined;

    constructor(data?: IMaintenanceFeeAllotEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.organizationUnitId = data["organizationUnitId"];
            this.customerId = data["customerId"];
            this.supplierId = data["supplierId"];
            this.tradeOrganizationUnitId = data["tradeOrganizationUnitId"];
            this.party = data["party"];
            this.expenseItem = data["expenseItem"];
            this.expenseType = data["expenseType"];
            this.vehicleQuantity = data["vehicleQuantity"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.imbalanceProfit = data["imbalanceProfit"];
            this.maintenanceSubmitAccountType = data["maintenanceSubmitAccountType"];
            this.submitAccountState = data["submitAccountState"];
            this.submitAccountDate = data["submitAccountDate"] ? moment(data["submitAccountDate"].toString()) : <any>undefined;
            this.makeAccountDate = data["makeAccountDate"] ? moment(data["makeAccountDate"].toString()) : <any>undefined;
            this.operatorId = data["operatorId"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): MaintenanceFeeAllotEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceFeeAllotEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerId"] = this.customerId;
        data["supplierId"] = this.supplierId;
        data["tradeOrganizationUnitId"] = this.tradeOrganizationUnitId;
        data["party"] = this.party;
        data["expenseItem"] = this.expenseItem;
        data["expenseType"] = this.expenseType;
        data["vehicleQuantity"] = this.vehicleQuantity;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["imbalanceProfit"] = this.imbalanceProfit;
        data["maintenanceSubmitAccountType"] = this.maintenanceSubmitAccountType;
        data["submitAccountState"] = this.submitAccountState;
        data["submitAccountDate"] = this.submitAccountDate ? this.submitAccountDate.toISOString() : <any>undefined;
        data["makeAccountDate"] = this.makeAccountDate ? this.makeAccountDate.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["description"] = this.description;
        return data; 
    }

    clone(): MaintenanceFeeAllotEditForSaveDto {
        const json = this.toJSON();
        let result = new MaintenanceFeeAllotEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceFeeAllotEditForSaveDto {
    id: string | undefined;
    /** 上账单号 */
    code: string | undefined;
    /** 业务组织 */
    organizationUnitId: number;
    /** 客户 */
    customerId: number | undefined;
    /** 供应商 */
    supplierId: number | undefined;
    /** 交易组织 */
    tradeOrganizationUnitId: number | undefined;
    party: string | undefined;
    /** 费用项目（数据字典维护） */
    expenseItem: string;
    /** 费用类型（数据字典维护） */
    expenseType: string;
    /** 单车数量 */
    vehicleQuantity: number | undefined;
    /** 应收总金额 */
    amount: number | undefined;
    /** 实收金额 */
    actualAmount: number | undefined;
    /** 差额 */
    imbalanceProfit: number | undefined;
    /** 维修上账类型 */
    maintenanceSubmitAccountType: MaintenanceFeeAllotEditForSaveDtoMaintenanceSubmitAccountType | undefined;
    /** 上账状态(已上账、未上账，已取消) */
    submitAccountState: string | undefined;
    /** 上账日期 */
    submitAccountDate: moment.Moment | undefined;
    /** 财务结算日期 */
    makeAccountDate: moment.Moment | undefined;
    /** 统计人 */
    operatorId: number | undefined;
    /** 备注 */
    description: string | undefined;
}

export class MaintenanceRegisterListDto implements IMaintenanceRegisterListDto {
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    station: number | undefined;
    stationName: string | undefined;
    place: string | undefined;
    type: string | undefined;
    typeName: string | undefined;
    vehicleType: string | undefined;
    vehicleTypeName: string | undefined;
    statusName: string | undefined;
    status: string | undefined;
    accountMethod: string | undefined;
    accountMethodName: string | undefined;
    submitAccountState: string | undefined;
    submitAccountStateName: string | undefined;
    amount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    responsePersonId: number | undefined;
    responsePersonName: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
    organizationUnitName: string | undefined;
    businessCustomerName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 审核操作人 */
    auditOperator: number | undefined;
    auditOperatorName: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IMaintenanceRegisterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.station = data["station"];
            this.stationName = data["stationName"];
            this.place = data["place"];
            this.type = data["type"];
            this.typeName = data["typeName"];
            this.vehicleType = data["vehicleType"];
            this.vehicleTypeName = data["vehicleTypeName"];
            this.statusName = data["statusName"];
            this.status = data["status"];
            this.accountMethod = data["accountMethod"];
            this.accountMethodName = data["accountMethodName"];
            this.submitAccountState = data["submitAccountState"];
            this.submitAccountStateName = data["submitAccountStateName"];
            this.amount = data["amount"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.actualAmount = data["actualAmount"];
            this.responsePersonId = data["responsePersonId"];
            this.responsePersonName = data["responsePersonName"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
            this.businessCustomerId = data["businessCustomerId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.businessCustomerName = data["businessCustomerName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxReceiptTypeText = data["taxReceiptTypeText"];
            this.taxAmount = data["taxAmount"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.auditOperator = data["auditOperator"];
            this.auditOperatorName = data["auditOperatorName"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.auditRemark = data["auditRemark"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): MaintenanceRegisterListDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceRegisterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["station"] = this.station;
        data["stationName"] = this.stationName;
        data["place"] = this.place;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["vehicleType"] = this.vehicleType;
        data["vehicleTypeName"] = this.vehicleTypeName;
        data["statusName"] = this.statusName;
        data["status"] = this.status;
        data["accountMethod"] = this.accountMethod;
        data["accountMethodName"] = this.accountMethodName;
        data["submitAccountState"] = this.submitAccountState;
        data["submitAccountStateName"] = this.submitAccountStateName;
        data["amount"] = this.amount;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["actualAmount"] = this.actualAmount;
        data["responsePersonId"] = this.responsePersonId;
        data["responsePersonName"] = this.responsePersonName;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessCustomerId"] = this.businessCustomerId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["businessCustomerName"] = this.businessCustomerName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxReceiptTypeText"] = this.taxReceiptTypeText;
        data["taxAmount"] = this.taxAmount;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["auditOperator"] = this.auditOperator;
        data["auditOperatorName"] = this.auditOperatorName;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["auditRemark"] = this.auditRemark;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): MaintenanceRegisterListDto {
        const json = this.toJSON();
        let result = new MaintenanceRegisterListDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceRegisterListDto {
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    station: number | undefined;
    stationName: string | undefined;
    place: string | undefined;
    type: string | undefined;
    typeName: string | undefined;
    vehicleType: string | undefined;
    vehicleTypeName: string | undefined;
    statusName: string | undefined;
    status: string | undefined;
    accountMethod: string | undefined;
    accountMethodName: string | undefined;
    submitAccountState: string | undefined;
    submitAccountStateName: string | undefined;
    amount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    responsePersonId: number | undefined;
    responsePersonName: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
    organizationUnitName: string | undefined;
    businessCustomerName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 审核操作人 */
    auditOperator: number | undefined;
    auditOperatorName: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CreateOutboundOrderFeeAllotInput implements ICreateOutboundOrderFeeAllotInput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditForSaveDto | undefined;
    outboundOrders: OutboundOrderListDto[] | undefined;

    constructor(data?: ICreateOutboundOrderFeeAllotInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceFeeAllot = data["maintenanceFeeAllot"] ? MaintenanceFeeAllotEditForSaveDto.fromJS(data["maintenanceFeeAllot"]) : <any>undefined;
            if (data["outboundOrders"] && data["outboundOrders"].constructor === Array) {
                this.outboundOrders = [] as any;
                for (let item of data["outboundOrders"])
                    this.outboundOrders.push(OutboundOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOutboundOrderFeeAllotInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOutboundOrderFeeAllotInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceFeeAllot"] = this.maintenanceFeeAllot ? this.maintenanceFeeAllot.toJSON() : <any>undefined;
        if (this.outboundOrders && this.outboundOrders.constructor === Array) {
            data["outboundOrders"] = [];
            for (let item of this.outboundOrders)
                data["outboundOrders"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateOutboundOrderFeeAllotInput {
        const json = this.toJSON();
        let result = new CreateOutboundOrderFeeAllotInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOutboundOrderFeeAllotInput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditForSaveDto | undefined;
    outboundOrders: OutboundOrderListDto[] | undefined;
}

export class OutboundOrderListDto implements IOutboundOrderListDto {
    code: string | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    customerId: number | undefined;
    supplierId: number | undefined;
    tradeOrganizationUnitId: number | undefined;
    maintenanceId: string | undefined;
    userId: number | undefined;
    type: OutboundOrderListDtoType | undefined;
    readonly typeName: string | undefined;
    party: string | undefined;
    costAmount: number | undefined;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    outboundDate: moment.Moment | undefined;
    accountMethod: string | undefined;
    accountMethodName: string | undefined;
    submitAccountStateName: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    operatorId: number | undefined;
    /** 经办人 */
    operatorName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IOutboundOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.customerId = data["customerId"];
            this.supplierId = data["supplierId"];
            this.tradeOrganizationUnitId = data["tradeOrganizationUnitId"];
            this.maintenanceId = data["maintenanceId"];
            this.userId = data["userId"];
            this.type = data["type"];
            (<any>this).typeName = data["typeName"];
            this.party = data["party"];
            this.costAmount = data["costAmount"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.outboundDate = data["outboundDate"] ? moment(data["outboundDate"].toString()) : <any>undefined;
            this.accountMethod = data["accountMethod"];
            this.accountMethodName = data["accountMethodName"];
            this.submitAccountStateName = data["submitAccountStateName"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.operatorId = data["operatorId"];
            this.operatorName = data["operatorName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OutboundOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutboundOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["customerId"] = this.customerId;
        data["supplierId"] = this.supplierId;
        data["tradeOrganizationUnitId"] = this.tradeOrganizationUnitId;
        data["maintenanceId"] = this.maintenanceId;
        data["userId"] = this.userId;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["party"] = this.party;
        data["costAmount"] = this.costAmount;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["outboundDate"] = this.outboundDate ? this.outboundDate.toISOString() : <any>undefined;
        data["accountMethod"] = this.accountMethod;
        data["accountMethodName"] = this.accountMethodName;
        data["submitAccountStateName"] = this.submitAccountStateName;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): OutboundOrderListDto {
        const json = this.toJSON();
        let result = new OutboundOrderListDto();
        result.init(json);
        return result;
    }
}

export interface IOutboundOrderListDto {
    code: string | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    customerId: number | undefined;
    supplierId: number | undefined;
    tradeOrganizationUnitId: number | undefined;
    maintenanceId: string | undefined;
    userId: number | undefined;
    type: OutboundOrderListDtoType | undefined;
    typeName: string | undefined;
    party: string | undefined;
    costAmount: number | undefined;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    outboundDate: moment.Moment | undefined;
    accountMethod: string | undefined;
    accountMethodName: string | undefined;
    submitAccountStateName: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    operatorId: number | undefined;
    /** 经办人 */
    operatorName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CreateWarehouseOrderFeeAllotInput implements ICreateWarehouseOrderFeeAllotInput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditForSaveDto | undefined;
    warehouseOrders: WarehouseOrderListDto[] | undefined;

    constructor(data?: ICreateWarehouseOrderFeeAllotInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceFeeAllot = data["maintenanceFeeAllot"] ? MaintenanceFeeAllotEditForSaveDto.fromJS(data["maintenanceFeeAllot"]) : <any>undefined;
            if (data["warehouseOrders"] && data["warehouseOrders"].constructor === Array) {
                this.warehouseOrders = [] as any;
                for (let item of data["warehouseOrders"])
                    this.warehouseOrders.push(WarehouseOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateWarehouseOrderFeeAllotInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWarehouseOrderFeeAllotInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceFeeAllot"] = this.maintenanceFeeAllot ? this.maintenanceFeeAllot.toJSON() : <any>undefined;
        if (this.warehouseOrders && this.warehouseOrders.constructor === Array) {
            data["warehouseOrders"] = [];
            for (let item of this.warehouseOrders)
                data["warehouseOrders"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateWarehouseOrderFeeAllotInput {
        const json = this.toJSON();
        let result = new CreateWarehouseOrderFeeAllotInput();
        result.init(json);
        return result;
    }
}

export interface ICreateWarehouseOrderFeeAllotInput {
    maintenanceFeeAllot: MaintenanceFeeAllotEditForSaveDto | undefined;
    warehouseOrders: WarehouseOrderListDto[] | undefined;
}

export class WarehouseOrderListDto implements IWarehouseOrderListDto {
    code: string | undefined;
    warehouseEntryStatus: WarehouseOrderListDtoWarehouseEntryStatus | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    /** 仓库所属的业务单位 */
    businessOUId: number | undefined;
    businessOUName: string | undefined;
    supplierId: number | undefined;
    supplierName: string | undefined;
    party: string | undefined;
    type: WarehouseOrderListDtoType | undefined;
    readonly typeName: string | undefined;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    warehouseDate: moment.Moment | undefined;
    accountMethod: string | undefined;
    accountMethodName: string | undefined;
    submitAccountState: string | undefined;
    submitAccountStateName: string | undefined;
    paymentStatus: string | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 经办人 */
    operatorName: string | undefined;
    operatorId: number | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IWarehouseOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.warehouseEntryStatus = data["warehouseEntryStatus"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.businessOUId = data["businessOUId"];
            this.businessOUName = data["businessOUName"];
            this.supplierId = data["supplierId"];
            this.supplierName = data["supplierName"];
            this.party = data["party"];
            this.type = data["type"];
            (<any>this).typeName = data["typeName"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.warehouseDate = data["warehouseDate"] ? moment(data["warehouseDate"].toString()) : <any>undefined;
            this.accountMethod = data["accountMethod"];
            this.accountMethodName = data["accountMethodName"];
            this.submitAccountState = data["submitAccountState"];
            this.submitAccountStateName = data["submitAccountStateName"];
            this.paymentStatus = data["paymentStatus"];
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
            this.operatorName = data["operatorName"];
            this.operatorId = data["operatorId"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): WarehouseOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["warehouseEntryStatus"] = this.warehouseEntryStatus;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["businessOUId"] = this.businessOUId;
        data["businessOUName"] = this.businessOUName;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["party"] = this.party;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["warehouseDate"] = this.warehouseDate ? this.warehouseDate.toISOString() : <any>undefined;
        data["accountMethod"] = this.accountMethod;
        data["accountMethodName"] = this.accountMethodName;
        data["submitAccountState"] = this.submitAccountState;
        data["submitAccountStateName"] = this.submitAccountStateName;
        data["paymentStatus"] = this.paymentStatus;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["operatorName"] = this.operatorName;
        data["operatorId"] = this.operatorId;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): WarehouseOrderListDto {
        const json = this.toJSON();
        let result = new WarehouseOrderListDto();
        result.init(json);
        return result;
    }
}

export interface IWarehouseOrderListDto {
    code: string | undefined;
    warehouseEntryStatus: WarehouseOrderListDtoWarehouseEntryStatus | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    /** 仓库所属的业务单位 */
    businessOUId: number | undefined;
    businessOUName: string | undefined;
    supplierId: number | undefined;
    supplierName: string | undefined;
    party: string | undefined;
    type: WarehouseOrderListDtoType | undefined;
    typeName: string | undefined;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    warehouseDate: moment.Moment | undefined;
    accountMethod: string | undefined;
    accountMethodName: string | undefined;
    submitAccountState: string | undefined;
    submitAccountStateName: string | undefined;
    paymentStatus: string | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 经办人 */
    operatorName: string | undefined;
    operatorId: number | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfMaintenanceRegisterListDto implements IPagedResultDtoOfMaintenanceRegisterListDto {
    totalCount: number | undefined;
    items: MaintenanceRegisterListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfMaintenanceRegisterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(MaintenanceRegisterListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMaintenanceRegisterListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMaintenanceRegisterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfMaintenanceRegisterListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfMaintenanceRegisterListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfMaintenanceRegisterListDto {
    totalCount: number | undefined;
    items: MaintenanceRegisterListDto[] | undefined;
}

export class ListResultDtoOfMaintenanceRegisterListDto implements IListResultDtoOfMaintenanceRegisterListDto {
    items: MaintenanceRegisterListDto[] | undefined;

    constructor(data?: IListResultDtoOfMaintenanceRegisterListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(MaintenanceRegisterListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfMaintenanceRegisterListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfMaintenanceRegisterListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfMaintenanceRegisterListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfMaintenanceRegisterListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfMaintenanceRegisterListDto {
    items: MaintenanceRegisterListDto[] | undefined;
}

export class GetMaintenanceRegisterForEditOutput implements IGetMaintenanceRegisterForEditOutput {
    maintenanceRegister: MaintenanceRegisterEditDto | undefined;

    constructor(data?: IGetMaintenanceRegisterForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceRegister = data["maintenanceRegister"] ? MaintenanceRegisterEditDto.fromJS(data["maintenanceRegister"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMaintenanceRegisterForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaintenanceRegisterForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceRegister"] = this.maintenanceRegister ? this.maintenanceRegister.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetMaintenanceRegisterForEditOutput {
        const json = this.toJSON();
        let result = new GetMaintenanceRegisterForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetMaintenanceRegisterForEditOutput {
    maintenanceRegister: MaintenanceRegisterEditDto | undefined;
}

export class MaintenanceRegisterEditDto implements IMaintenanceRegisterEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    station: number | undefined;
    place: string | undefined;
    type: string | undefined;
    vehicleType: string | undefined;
    status: string | undefined;
    responsePersonId: number | undefined;
    /** 备注 */
    description: string | undefined;
    /** 业务组织 */
    organizationUnitId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: number | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;

    constructor(data?: IMaintenanceRegisterEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.station = data["station"];
            this.place = data["place"];
            this.type = data["type"];
            this.vehicleType = data["vehicleType"];
            this.status = data["status"];
            this.responsePersonId = data["responsePersonId"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
            this.businessCustomerId = data["businessCustomerId"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): MaintenanceRegisterEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceRegisterEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["station"] = this.station;
        data["place"] = this.place;
        data["type"] = this.type;
        data["vehicleType"] = this.vehicleType;
        data["status"] = this.status;
        data["responsePersonId"] = this.responsePersonId;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessCustomerId"] = this.businessCustomerId;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): MaintenanceRegisterEditDto {
        const json = this.toJSON();
        let result = new MaintenanceRegisterEditDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceRegisterEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    station: number | undefined;
    place: string | undefined;
    type: string | undefined;
    vehicleType: string | undefined;
    status: string | undefined;
    responsePersonId: number | undefined;
    /** 备注 */
    description: string | undefined;
    /** 业务组织 */
    organizationUnitId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: number | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
}

export class CreateMaintenanceRegisterInput implements ICreateMaintenanceRegisterInput {
    maintenanceRegister: MaintenanceRegisterEditForSaveDto | undefined;

    constructor(data?: ICreateMaintenanceRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceRegister = data["maintenanceRegister"] ? MaintenanceRegisterEditForSaveDto.fromJS(data["maintenanceRegister"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateMaintenanceRegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaintenanceRegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceRegister"] = this.maintenanceRegister ? this.maintenanceRegister.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateMaintenanceRegisterInput {
        const json = this.toJSON();
        let result = new CreateMaintenanceRegisterInput();
        result.init(json);
        return result;
    }
}

export interface ICreateMaintenanceRegisterInput {
    maintenanceRegister: MaintenanceRegisterEditForSaveDto | undefined;
}

export class MaintenanceRegisterEditForSaveDto implements IMaintenanceRegisterEditForSaveDto {
    id: string | undefined;
    vehicleCode: string;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    station: number;
    place: string | undefined;
    type: string;
    vehicleType: string;
    status: string | undefined;
    responsePersonId: number;
    /** 备注 */
    description: string | undefined;
    /** 业务组织 */
    organizationUnitId: number;
    /** 车辆所属客户 */
    businessCustomerId: number;

    constructor(data?: IMaintenanceRegisterEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.station = data["station"];
            this.place = data["place"];
            this.type = data["type"];
            this.vehicleType = data["vehicleType"];
            this.status = data["status"];
            this.responsePersonId = data["responsePersonId"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
            this.businessCustomerId = data["businessCustomerId"];
        }
    }

    static fromJS(data: any): MaintenanceRegisterEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceRegisterEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["station"] = this.station;
        data["place"] = this.place;
        data["type"] = this.type;
        data["vehicleType"] = this.vehicleType;
        data["status"] = this.status;
        data["responsePersonId"] = this.responsePersonId;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessCustomerId"] = this.businessCustomerId;
        return data; 
    }

    clone(): MaintenanceRegisterEditForSaveDto {
        const json = this.toJSON();
        let result = new MaintenanceRegisterEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceRegisterEditForSaveDto {
    id: string | undefined;
    vehicleCode: string;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    station: number;
    place: string | undefined;
    type: string;
    vehicleType: string;
    status: string | undefined;
    responsePersonId: number;
    /** 备注 */
    description: string | undefined;
    /** 业务组织 */
    organizationUnitId: number;
    /** 车辆所属客户 */
    businessCustomerId: number;
}

export class ListResultDtoOfVehicleMaintenanceListDto implements IListResultDtoOfVehicleMaintenanceListDto {
    items: VehicleMaintenanceListDto[] | undefined;

    constructor(data?: IListResultDtoOfVehicleMaintenanceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleMaintenanceListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfVehicleMaintenanceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfVehicleMaintenanceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfVehicleMaintenanceListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfVehicleMaintenanceListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfVehicleMaintenanceListDto {
    items: VehicleMaintenanceListDto[] | undefined;
}

export class VehicleMaintenanceListDto implements IVehicleMaintenanceListDto {
    /** 业务单位 */
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    station: number | undefined;
    stationName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    plateNumber: string | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: IVehicleMaintenanceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.station = data["station"];
            this.stationName = data["stationName"];
            this.vehicleCode = data["vehicleCode"];
            this.plateNumber = data["plateNumber"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.actualAmount = data["actualAmount"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleMaintenanceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleMaintenanceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["station"] = this.station;
        data["stationName"] = this.stationName;
        data["vehicleCode"] = this.vehicleCode;
        data["plateNumber"] = this.plateNumber;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["actualAmount"] = this.actualAmount;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleMaintenanceListDto {
        const json = this.toJSON();
        let result = new VehicleMaintenanceListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleMaintenanceListDto {
    /** 业务单位 */
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    station: number | undefined;
    stationName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    plateNumber: string | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    id: string | undefined;
}

export class BatchCreateMaintenanceRegisterInput implements IBatchCreateMaintenanceRegisterInput {
    maintenanceRegister: MaintenanceRegisterBatchEditDto | undefined;

    constructor(data?: IBatchCreateMaintenanceRegisterInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.maintenanceRegister = data["maintenanceRegister"] ? MaintenanceRegisterBatchEditDto.fromJS(data["maintenanceRegister"]) : <any>undefined;
        }
    }

    static fromJS(data: any): BatchCreateMaintenanceRegisterInput {
        data = typeof data === 'object' ? data : {};
        let result = new BatchCreateMaintenanceRegisterInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["maintenanceRegister"] = this.maintenanceRegister ? this.maintenanceRegister.toJSON() : <any>undefined;
        return data; 
    }

    clone(): BatchCreateMaintenanceRegisterInput {
        const json = this.toJSON();
        let result = new BatchCreateMaintenanceRegisterInput();
        result.init(json);
        return result;
    }
}

export interface IBatchCreateMaintenanceRegisterInput {
    maintenanceRegister: MaintenanceRegisterBatchEditDto | undefined;
}

export class MaintenanceRegisterBatchEditDto implements IMaintenanceRegisterBatchEditDto {
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 所属运输公司 */
    businessOUId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    actualDate: moment.Moment | undefined;
    station: number | undefined;
    place: string | undefined;
    type: string | undefined;
    vehicleType: string | undefined;
    responsePersonId: number | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    /** 备注 */
    description: string | undefined;
    status: string | undefined;
    /** 维修总额 */
    amount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库材料费 */
    materialAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    accountMethod: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    /** 费用备注 */
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核操作人 */
    auditOperator: number | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;

    constructor(data?: IMaintenanceRegisterBatchEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.businessOUId = data["businessOUId"];
            this.businessCustomerId = data["businessCustomerId"];
            this.vehicleCode = data["vehicleCode"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.station = data["station"];
            this.place = data["place"];
            this.type = data["type"];
            this.vehicleType = data["vehicleType"];
            this.responsePersonId = data["responsePersonId"];
            this.operatorId = data["operatorId"];
            this.description = data["description"];
            this.status = data["status"];
            this.amount = data["amount"];
            this.manualAmount = data["manualAmount"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialAmount = data["materialAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.actualAmount = data["actualAmount"];
            this.accountMethod = data["accountMethod"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.costDescription = data["costDescription"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxAmount = data["taxAmount"];
            this.auditStatus = data["auditStatus"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.auditRemark = data["auditRemark"];
        }
    }

    static fromJS(data: any): MaintenanceRegisterBatchEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaintenanceRegisterBatchEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessOUId"] = this.businessOUId;
        data["businessCustomerId"] = this.businessCustomerId;
        data["vehicleCode"] = this.vehicleCode;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["station"] = this.station;
        data["place"] = this.place;
        data["type"] = this.type;
        data["vehicleType"] = this.vehicleType;
        data["responsePersonId"] = this.responsePersonId;
        data["operatorId"] = this.operatorId;
        data["description"] = this.description;
        data["status"] = this.status;
        data["amount"] = this.amount;
        data["manualAmount"] = this.manualAmount;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialAmount"] = this.materialAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["actualAmount"] = this.actualAmount;
        data["accountMethod"] = this.accountMethod;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["costDescription"] = this.costDescription;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxAmount"] = this.taxAmount;
        data["auditStatus"] = this.auditStatus;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["auditRemark"] = this.auditRemark;
        return data; 
    }

    clone(): MaintenanceRegisterBatchEditDto {
        const json = this.toJSON();
        let result = new MaintenanceRegisterBatchEditDto();
        result.init(json);
        return result;
    }
}

export interface IMaintenanceRegisterBatchEditDto {
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 所属运输公司 */
    businessOUId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    actualDate: moment.Moment | undefined;
    station: number | undefined;
    place: string | undefined;
    type: string | undefined;
    vehicleType: string | undefined;
    responsePersonId: number | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    /** 备注 */
    description: string | undefined;
    status: string | undefined;
    /** 维修总额 */
    amount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库材料费 */
    materialAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    accountMethod: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    /** 费用备注 */
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核操作人 */
    auditOperator: number | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
}

export class ApproalMaintenanceRegisterEditDto implements IApproalMaintenanceRegisterEditDto {
    id: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;

    constructor(data?: IApproalMaintenanceRegisterEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
        }
    }

    static fromJS(data: any): ApproalMaintenanceRegisterEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApproalMaintenanceRegisterEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        return data; 
    }

    clone(): ApproalMaintenanceRegisterEditDto {
        const json = this.toJSON();
        let result = new ApproalMaintenanceRegisterEditDto();
        result.init(json);
        return result;
    }
}

export interface IApproalMaintenanceRegisterEditDto {
    id: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
}

export class PagedResultDtoOfMaterielListDto implements IPagedResultDtoOfMaterielListDto {
    totalCount: number | undefined;
    items: MaterielListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfMaterielListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(MaterielListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMaterielListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMaterielListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfMaterielListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfMaterielListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfMaterielListDto {
    totalCount: number | undefined;
    items: MaterielListDto[] | undefined;
}

export class MaterielListDto implements IMaterielListDto {
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    standardPrice: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    purchaseMeasureUnit: string | undefined;
    purchaseMeasureUnitName: string | undefined;
    measureMethod: string | undefined;
    financialMappingNumber: string | undefined;
    description: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    materielTypeId: number | undefined;
    materielTypeValue: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IMaterielListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.category = data["category"];
            this.standardPrice = data["standardPrice"];
            this.manufacturer = data["manufacturer"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.baseMeasureUnitName = data["baseMeasureUnitName"];
            this.purchaseMeasureUnit = data["purchaseMeasureUnit"];
            this.purchaseMeasureUnitName = data["purchaseMeasureUnitName"];
            this.measureMethod = data["measureMethod"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.description = data["description"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.order = data["order"];
            this.materielTypeId = data["materielTypeId"];
            this.materielTypeValue = data["materielTypeValue"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): MaterielListDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["category"] = this.category;
        data["standardPrice"] = this.standardPrice;
        data["manufacturer"] = this.manufacturer;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["baseMeasureUnitName"] = this.baseMeasureUnitName;
        data["purchaseMeasureUnit"] = this.purchaseMeasureUnit;
        data["purchaseMeasureUnitName"] = this.purchaseMeasureUnitName;
        data["measureMethod"] = this.measureMethod;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["description"] = this.description;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["order"] = this.order;
        data["materielTypeId"] = this.materielTypeId;
        data["materielTypeValue"] = this.materielTypeValue;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): MaterielListDto {
        const json = this.toJSON();
        let result = new MaterielListDto();
        result.init(json);
        return result;
    }
}

export interface IMaterielListDto {
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    standardPrice: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    purchaseMeasureUnit: string | undefined;
    purchaseMeasureUnitName: string | undefined;
    measureMethod: string | undefined;
    financialMappingNumber: string | undefined;
    description: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    materielTypeId: number | undefined;
    materielTypeValue: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class ListResultDtoOfMaterielTypeListDto implements IListResultDtoOfMaterielTypeListDto {
    items: MaterielTypeListDto[] | undefined;

    constructor(data?: IListResultDtoOfMaterielTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(MaterielTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfMaterielTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfMaterielTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfMaterielTypeListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfMaterielTypeListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfMaterielTypeListDto {
    items: MaterielTypeListDto[] | undefined;
}

export class MaterielTypeListDto implements IMaterielTypeListDto {
    value: string | undefined;
    text: string | undefined;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    children: MaterielTypeListDto[] | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IMaterielTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.text = data["text"];
            this.description = data["description"];
            this.order = data["order"];
            this.parentId = data["parentId"];
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [] as any;
                for (let item of data["children"])
                    this.children.push(MaterielTypeListDto.fromJS(item));
            }
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): MaterielTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        data["description"] = this.description;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): MaterielTypeListDto {
        const json = this.toJSON();
        let result = new MaterielTypeListDto();
        result.init(json);
        return result;
    }
}

export interface IMaterielTypeListDto {
    value: string | undefined;
    text: string | undefined;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    children: MaterielTypeListDto[] | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class GetMaterielTypeForEditOutput implements IGetMaterielTypeForEditOutput {
    materielType: MaterielTypeEditDto | undefined;

    constructor(data?: IGetMaterielTypeForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.materielType = data["materielType"] ? MaterielTypeEditDto.fromJS(data["materielType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMaterielTypeForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaterielTypeForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materielType"] = this.materielType ? this.materielType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetMaterielTypeForEditOutput {
        const json = this.toJSON();
        let result = new GetMaterielTypeForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetMaterielTypeForEditOutput {
    materielType: MaterielTypeEditDto | undefined;
}

export class MaterielTypeEditDto implements IMaterielTypeEditDto {
    id: number | undefined;
    value: string;
    text: string;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    parent: MaterielTypeListDto | undefined;

    constructor(data?: IMaterielTypeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.text = data["text"];
            this.description = data["description"];
            this.order = data["order"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? MaterielTypeListDto.fromJS(data["parent"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MaterielTypeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielTypeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["text"] = this.text;
        data["description"] = this.description;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        return data; 
    }

    clone(): MaterielTypeEditDto {
        const json = this.toJSON();
        let result = new MaterielTypeEditDto();
        result.init(json);
        return result;
    }
}

export interface IMaterielTypeEditDto {
    id: number | undefined;
    value: string;
    text: string;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    parent: MaterielTypeListDto | undefined;
}

export class GetMaterielForEditOutput implements IGetMaterielForEditOutput {
    materiel: MaterielEditDto | undefined;

    constructor(data?: IGetMaterielForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.materiel = data["materiel"] ? MaterielEditDto.fromJS(data["materiel"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMaterielForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetMaterielForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materiel"] = this.materiel ? this.materiel.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetMaterielForEditOutput {
        const json = this.toJSON();
        let result = new GetMaterielForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetMaterielForEditOutput {
    materiel: MaterielEditDto | undefined;
}

export class MaterielEditDto implements IMaterielEditDto {
    id: number | undefined;
    code: string;
    name: string;
    specification: string | undefined;
    category: string | undefined;
    standardPrice: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string;
    purchaseMeasureUnit: string | undefined;
    measureMethod: string | undefined;
    financialMappingNumber: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    /** 备注 */
    description: string | undefined;
    materielTypeId: number | undefined;
    materielType: MaterielTypeListDto | undefined;

    constructor(data?: IMaterielEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.category = data["category"];
            this.standardPrice = data["standardPrice"];
            this.manufacturer = data["manufacturer"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.purchaseMeasureUnit = data["purchaseMeasureUnit"];
            this.measureMethod = data["measureMethod"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.order = data["order"];
            this.description = data["description"];
            this.materielTypeId = data["materielTypeId"];
            this.materielType = data["materielType"] ? MaterielTypeListDto.fromJS(data["materielType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MaterielEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["category"] = this.category;
        data["standardPrice"] = this.standardPrice;
        data["manufacturer"] = this.manufacturer;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["purchaseMeasureUnit"] = this.purchaseMeasureUnit;
        data["measureMethod"] = this.measureMethod;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["order"] = this.order;
        data["description"] = this.description;
        data["materielTypeId"] = this.materielTypeId;
        data["materielType"] = this.materielType ? this.materielType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): MaterielEditDto {
        const json = this.toJSON();
        let result = new MaterielEditDto();
        result.init(json);
        return result;
    }
}

export interface IMaterielEditDto {
    id: number | undefined;
    code: string;
    name: string;
    specification: string | undefined;
    category: string | undefined;
    standardPrice: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string;
    purchaseMeasureUnit: string | undefined;
    measureMethod: string | undefined;
    financialMappingNumber: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    /** 备注 */
    description: string | undefined;
    materielTypeId: number | undefined;
    materielType: MaterielTypeListDto | undefined;
}

export class CreateOrEditMaterielInput implements ICreateOrEditMaterielInput {
    materiel: MaterielEditForSaveDto | undefined;

    constructor(data?: ICreateOrEditMaterielInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.materiel = data["materiel"] ? MaterielEditForSaveDto.fromJS(data["materiel"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditMaterielInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMaterielInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materiel"] = this.materiel ? this.materiel.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditMaterielInput {
        const json = this.toJSON();
        let result = new CreateOrEditMaterielInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditMaterielInput {
    materiel: MaterielEditForSaveDto | undefined;
}

export class MaterielEditForSaveDto implements IMaterielEditForSaveDto {
    id: number | undefined;
    code: string;
    name: string;
    specification: string | undefined;
    category: string | undefined;
    standardPrice: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string;
    purchaseMeasureUnit: string | undefined;
    measureMethod: string | undefined;
    financialMappingNumber: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    /** 备注 */
    description: string | undefined;
    materielTypeId: number | undefined;

    constructor(data?: IMaterielEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.category = data["category"];
            this.standardPrice = data["standardPrice"];
            this.manufacturer = data["manufacturer"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.purchaseMeasureUnit = data["purchaseMeasureUnit"];
            this.measureMethod = data["measureMethod"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.order = data["order"];
            this.description = data["description"];
            this.materielTypeId = data["materielTypeId"];
        }
    }

    static fromJS(data: any): MaterielEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["category"] = this.category;
        data["standardPrice"] = this.standardPrice;
        data["manufacturer"] = this.manufacturer;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["purchaseMeasureUnit"] = this.purchaseMeasureUnit;
        data["measureMethod"] = this.measureMethod;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["order"] = this.order;
        data["description"] = this.description;
        data["materielTypeId"] = this.materielTypeId;
        return data; 
    }

    clone(): MaterielEditForSaveDto {
        const json = this.toJSON();
        let result = new MaterielEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IMaterielEditForSaveDto {
    id: number | undefined;
    code: string;
    name: string;
    specification: string | undefined;
    category: string | undefined;
    standardPrice: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string;
    purchaseMeasureUnit: string | undefined;
    measureMethod: string | undefined;
    financialMappingNumber: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    /** 备注 */
    description: string | undefined;
    materielTypeId: number | undefined;
}

export class CreateOrUpdateMaterielTypeInput implements ICreateOrUpdateMaterielTypeInput {
    materielType: MaterielTypeEditDto | undefined;

    constructor(data?: ICreateOrUpdateMaterielTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.materielType = data["materielType"] ? MaterielTypeEditDto.fromJS(data["materielType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateMaterielTypeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateMaterielTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["materielType"] = this.materielType ? this.materielType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateMaterielTypeInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateMaterielTypeInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateMaterielTypeInput {
    materielType: MaterielTypeEditDto | undefined;
}

export class CreateMaterielFromExcelInput implements ICreateMaterielFromExcelInput {
    fileContent: string | undefined;

    constructor(data?: ICreateMaterielFromExcelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileContent = data["fileContent"];
        }
    }

    static fromJS(data: any): CreateMaterielFromExcelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateMaterielFromExcelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileContent"] = this.fileContent;
        return data; 
    }

    clone(): CreateMaterielFromExcelInput {
        const json = this.toJSON();
        let result = new CreateMaterielFromExcelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateMaterielFromExcelInput {
    fileContent: string | undefined;
}

export class MaterielImportingReturnDto implements IMaterielImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;

    constructor(data?: IMaterielImportingReturnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): MaterielImportingReturnDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielImportingReturnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): MaterielImportingReturnDto {
        const json = this.toJSON();
        let result = new MaterielImportingReturnDto();
        result.init(json);
        return result;
    }
}

export interface IMaterielImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;
}

export class PagedResultDtoOfMaterielThirdPartyListDto implements IPagedResultDtoOfMaterielThirdPartyListDto {
    totalCount: number | undefined;
    items: MaterielThirdPartyListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfMaterielThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(MaterielThirdPartyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMaterielThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMaterielThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfMaterielThirdPartyListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfMaterielThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfMaterielThirdPartyListDto {
    totalCount: number | undefined;
    items: MaterielThirdPartyListDto[] | undefined;
}

export class MaterielThirdPartyListDto implements IMaterielThirdPartyListDto {
    /** 第三方物料号 */
    thirdPartMaterielCode: string | undefined;
    /** 物料编号 */
    materielId: number | undefined;
    materielName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IMaterielThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartMaterielCode = data["thirdPartMaterielCode"];
            this.materielId = data["materielId"];
            this.materielName = data["materielName"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): MaterielThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartMaterielCode"] = this.thirdPartMaterielCode;
        data["materielId"] = this.materielId;
        data["materielName"] = this.materielName;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): MaterielThirdPartyListDto {
        const json = this.toJSON();
        let result = new MaterielThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface IMaterielThirdPartyListDto {
    /** 第三方物料号 */
    thirdPartMaterielCode: string | undefined;
    /** 物料编号 */
    materielId: number | undefined;
    materielName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class MaterielThirdPartyEditDto implements IMaterielThirdPartyEditDto {
    id: string | undefined;
    /** 第三方物料号 */
    thirdPartMaterielCode: string;
    /** 物料编号 */
    materielId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;

    constructor(data?: IMaterielThirdPartyEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.thirdPartMaterielCode = data["thirdPartMaterielCode"];
            this.materielId = data["materielId"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
        }
    }

    static fromJS(data: any): MaterielThirdPartyEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielThirdPartyEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["thirdPartMaterielCode"] = this.thirdPartMaterielCode;
        data["materielId"] = this.materielId;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        return data; 
    }

    clone(): MaterielThirdPartyEditDto {
        const json = this.toJSON();
        let result = new MaterielThirdPartyEditDto();
        result.init(json);
        return result;
    }
}

export interface IMaterielThirdPartyEditDto {
    id: string | undefined;
    /** 第三方物料号 */
    thirdPartMaterielCode: string;
    /** 物料编号 */
    materielId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;
}

export class GetNotificationsOutput implements IGetNotificationsOutput {
    /** 未阅读消息数量 */
    unreadCount: number | undefined;
    totalCount: number | undefined;
    items: UserNotification[] | undefined;

    constructor(data?: IGetNotificationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.unreadCount = data["unreadCount"];
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(UserNotification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["unreadCount"] = this.unreadCount;
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): GetNotificationsOutput {
        const json = this.toJSON();
        let result = new GetNotificationsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetNotificationsOutput {
    /** 未阅读消息数量 */
    unreadCount: number | undefined;
    totalCount: number | undefined;
    items: UserNotification[] | undefined;
}

export class UserNotification implements IUserNotification {
    tenantId: number | undefined;
    userId: number | undefined;
    state: UserNotificationState | undefined;
    notification: TenantNotification | undefined;
    id: string | undefined;

    constructor(data?: IUserNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.state = data["state"];
            this.notification = data["notification"] ? TenantNotification.fromJS(data["notification"]) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserNotification {
        data = typeof data === 'object' ? data : {};
        let result = new UserNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["state"] = this.state;
        data["notification"] = this.notification ? this.notification.toJSON() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): UserNotification {
        const json = this.toJSON();
        let result = new UserNotification();
        result.init(json);
        return result;
    }
}

export interface IUserNotification {
    tenantId: number | undefined;
    userId: number | undefined;
    state: UserNotificationState | undefined;
    notification: TenantNotification | undefined;
    id: string | undefined;
}

export class TenantNotification implements ITenantNotification {
    tenantId: number | undefined;
    notificationName: string | undefined;
    data: NotificationData | undefined;
    entityType: string | undefined;
    entityTypeName: string | undefined;
    entityId: any | undefined;
    severity: TenantNotificationSeverity | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: ITenantNotification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.notificationName = data["notificationName"];
            this.data = data["data"] ? NotificationData.fromJS(data["data"]) : <any>undefined;
            this.entityType = data["entityType"];
            this.entityTypeName = data["entityTypeName"];
            this.entityId = data["entityId"];
            this.severity = data["severity"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantNotification {
        data = typeof data === 'object' ? data : {};
        let result = new TenantNotification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["notificationName"] = this.notificationName;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        data["entityType"] = this.entityType;
        data["entityTypeName"] = this.entityTypeName;
        data["entityId"] = this.entityId;
        data["severity"] = this.severity;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): TenantNotification {
        const json = this.toJSON();
        let result = new TenantNotification();
        result.init(json);
        return result;
    }
}

export interface ITenantNotification {
    tenantId: number | undefined;
    notificationName: string | undefined;
    data: NotificationData | undefined;
    entityType: string | undefined;
    entityTypeName: string | undefined;
    entityId: any | undefined;
    severity: TenantNotificationSeverity | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;
}

export class NotificationData implements INotificationData {
    readonly type: string | undefined;
    properties: { [key: string] : any; } | undefined;

    constructor(data?: INotificationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            (<any>this).type = data["type"];
            if (data["properties"]) {
                this.properties = {} as any;
                for (let key in data["properties"]) {
                    if (data["properties"].hasOwnProperty(key))
                        this.properties[key] = data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): NotificationData {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    data["properties"][key] = this.properties[key];
            }
        }
        return data; 
    }

    clone(): NotificationData {
        const json = this.toJSON();
        let result = new NotificationData();
        result.init(json);
        return result;
    }
}

export interface INotificationData {
    type: string | undefined;
    properties: { [key: string] : any; } | undefined;
}

export class PagedResultDtoOfGetNotificationListDto implements IPagedResultDtoOfGetNotificationListDto {
    totalCount: number | undefined;
    items: GetNotificationListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfGetNotificationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(GetNotificationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfGetNotificationListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfGetNotificationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfGetNotificationListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfGetNotificationListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfGetNotificationListDto {
    totalCount: number | undefined;
    items: GetNotificationListDto[] | undefined;
}

export class GetNotificationListDto implements IGetNotificationListDto {
    state: GetNotificationListDtoState | undefined;
    notificationNotificationName: string | undefined;
    notificationCreationTime: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: IGetNotificationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.state = data["state"];
            this.notificationNotificationName = data["notificationNotificationName"];
            this.notificationCreationTime = data["notificationCreationTime"] ? moment(data["notificationCreationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetNotificationListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["state"] = this.state;
        data["notificationNotificationName"] = this.notificationNotificationName;
        data["notificationCreationTime"] = this.notificationCreationTime ? this.notificationCreationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): GetNotificationListDto {
        const json = this.toJSON();
        let result = new GetNotificationListDto();
        result.init(json);
        return result;
    }
}

export interface IGetNotificationListDto {
    state: GetNotificationListDtoState | undefined;
    notificationNotificationName: string | undefined;
    notificationCreationTime: moment.Moment | undefined;
    id: string | undefined;
}

export class GetNotificationSettingsOutput implements IGetNotificationSettingsOutput {
    receiveNotifications: string | undefined;
    notifications: NotificationSubscriptionWithDisplayNameDto[] | undefined;

    constructor(data?: IGetNotificationSettingsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [] as any;
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionWithDisplayNameDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetNotificationSettingsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetNotificationSettingsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }

    clone(): GetNotificationSettingsOutput {
        const json = this.toJSON();
        let result = new GetNotificationSettingsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetNotificationSettingsOutput {
    receiveNotifications: string | undefined;
    notifications: NotificationSubscriptionWithDisplayNameDto[] | undefined;
}

export class NotificationSubscriptionWithDisplayNameDto implements INotificationSubscriptionWithDisplayNameDto {
    displayName: string | undefined;
    description: string | undefined;
    name: string;
    isSubscribed: boolean | undefined;

    constructor(data?: INotificationSubscriptionWithDisplayNameDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionWithDisplayNameDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }

    clone(): NotificationSubscriptionWithDisplayNameDto {
        const json = this.toJSON();
        let result = new NotificationSubscriptionWithDisplayNameDto();
        result.init(json);
        return result;
    }
}

export interface INotificationSubscriptionWithDisplayNameDto {
    displayName: string | undefined;
    description: string | undefined;
    name: string;
    isSubscribed: boolean | undefined;
}

export class UpdateNotificationSettingsInput implements IUpdateNotificationSettingsInput {
    receiveNotifications: boolean | undefined;
    notifications: NotificationSubscriptionDto[] | undefined;

    constructor(data?: IUpdateNotificationSettingsInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.receiveNotifications = data["receiveNotifications"];
            if (data["notifications"] && data["notifications"].constructor === Array) {
                this.notifications = [] as any;
                for (let item of data["notifications"])
                    this.notifications.push(NotificationSubscriptionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UpdateNotificationSettingsInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateNotificationSettingsInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["receiveNotifications"] = this.receiveNotifications;
        if (this.notifications && this.notifications.constructor === Array) {
            data["notifications"] = [];
            for (let item of this.notifications)
                data["notifications"].push(item.toJSON());
        }
        return data; 
    }

    clone(): UpdateNotificationSettingsInput {
        const json = this.toJSON();
        let result = new UpdateNotificationSettingsInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateNotificationSettingsInput {
    receiveNotifications: boolean | undefined;
    notifications: NotificationSubscriptionDto[] | undefined;
}

export class NotificationSubscriptionDto implements INotificationSubscriptionDto {
    name: string;
    isSubscribed: boolean | undefined;

    constructor(data?: INotificationSubscriptionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.isSubscribed = data["isSubscribed"];
        }
    }

    static fromJS(data: any): NotificationSubscriptionDto {
        data = typeof data === 'object' ? data : {};
        let result = new NotificationSubscriptionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["isSubscribed"] = this.isSubscribed;
        return data; 
    }

    clone(): NotificationSubscriptionDto {
        const json = this.toJSON();
        let result = new NotificationSubscriptionDto();
        result.init(json);
        return result;
    }
}

export interface INotificationSubscriptionDto {
    name: string;
    isSubscribed: boolean | undefined;
}

export class PagedResultDtoOfOrganizationUnitThirdPartyListDto implements IPagedResultDtoOfOrganizationUnitThirdPartyListDto {
    totalCount: number | undefined;
    items: OrganizationUnitThirdPartyListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOrganizationUnitThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(OrganizationUnitThirdPartyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOrganizationUnitThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOrganizationUnitThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfOrganizationUnitThirdPartyListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfOrganizationUnitThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfOrganizationUnitThirdPartyListDto {
    totalCount: number | undefined;
    items: OrganizationUnitThirdPartyListDto[] | undefined;
}

export class OrganizationUnitThirdPartyListDto implements IOrganizationUnitThirdPartyListDto {
    thirdPartyCode: string | undefined;
    /** 客户号 */
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IOrganizationUnitThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartyCode = data["thirdPartyCode"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): OrganizationUnitThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): OrganizationUnitThirdPartyListDto {
        const json = this.toJSON();
        let result = new OrganizationUnitThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationUnitThirdPartyListDto {
    thirdPartyCode: string | undefined;
    /** 客户号 */
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class OrganizationUnitThirdPartyEditDto implements IOrganizationUnitThirdPartyEditDto {
    id: string | undefined;
    /** 第三方组织机构号 */
    thirdPartyCode: string;
    /** 客户号 */
    organizationUnitId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;

    constructor(data?: IOrganizationUnitThirdPartyEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.organizationUnitId = data["organizationUnitId"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
        }
    }

    static fromJS(data: any): OrganizationUnitThirdPartyEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new OrganizationUnitThirdPartyEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["organizationUnitId"] = this.organizationUnitId;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        return data; 
    }

    clone(): OrganizationUnitThirdPartyEditDto {
        const json = this.toJSON();
        let result = new OrganizationUnitThirdPartyEditDto();
        result.init(json);
        return result;
    }
}

export interface IOrganizationUnitThirdPartyEditDto {
    id: string | undefined;
    /** 第三方组织机构号 */
    thirdPartyCode: string;
    /** 客户号 */
    organizationUnitId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;
}

export class PagedResultDtoOfOutboundOrderListDto implements IPagedResultDtoOfOutboundOrderListDto {
    totalCount: number | undefined;
    items: OutboundOrderListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfOutboundOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(OutboundOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfOutboundOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfOutboundOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfOutboundOrderListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfOutboundOrderListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfOutboundOrderListDto {
    totalCount: number | undefined;
    items: OutboundOrderListDto[] | undefined;
}

export class ListResultDtoOfOutboundOrderListDto implements IListResultDtoOfOutboundOrderListDto {
    items: OutboundOrderListDto[] | undefined;

    constructor(data?: IListResultDtoOfOutboundOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(OutboundOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOutboundOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfOutboundOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfOutboundOrderListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfOutboundOrderListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfOutboundOrderListDto {
    items: OutboundOrderListDto[] | undefined;
}

export class ListResultDtoOfOutboundDetailEditDto implements IListResultDtoOfOutboundDetailEditDto {
    items: OutboundDetailEditDto[] | undefined;

    constructor(data?: IListResultDtoOfOutboundDetailEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(OutboundDetailEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfOutboundDetailEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfOutboundDetailEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfOutboundDetailEditDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfOutboundDetailEditDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfOutboundDetailEditDto {
    items: OutboundDetailEditDto[] | undefined;
}

export class OutboundDetailEditDto implements IOutboundDetailEditDto {
    id: string | undefined;
    organizationUnitId: number | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    purchasePrice: number | undefined;
    salesPrice: number | undefined;
    category: string | undefined;
    categoryName: string | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    quantity: number | undefined;
    amount: number | undefined;
    description: string | undefined;
    inStockId: number | undefined;
    /** 经办人 */
    operatorName: string | undefined;

    constructor(data?: IOutboundDetailEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.purchasePrice = data["purchasePrice"];
            this.salesPrice = data["salesPrice"];
            this.category = data["category"];
            this.categoryName = data["categoryName"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.baseMeasureUnitName = data["baseMeasureUnitName"];
            this.quantity = data["quantity"];
            this.amount = data["amount"];
            this.description = data["description"];
            this.inStockId = data["inStockId"];
            this.operatorName = data["operatorName"];
        }
    }

    static fromJS(data: any): OutboundDetailEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutboundDetailEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["purchasePrice"] = this.purchasePrice;
        data["salesPrice"] = this.salesPrice;
        data["category"] = this.category;
        data["categoryName"] = this.categoryName;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["baseMeasureUnitName"] = this.baseMeasureUnitName;
        data["quantity"] = this.quantity;
        data["amount"] = this.amount;
        data["description"] = this.description;
        data["inStockId"] = this.inStockId;
        data["operatorName"] = this.operatorName;
        return data; 
    }

    clone(): OutboundDetailEditDto {
        const json = this.toJSON();
        let result = new OutboundDetailEditDto();
        result.init(json);
        return result;
    }
}

export interface IOutboundDetailEditDto {
    id: string | undefined;
    organizationUnitId: number | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    purchasePrice: number | undefined;
    salesPrice: number | undefined;
    category: string | undefined;
    categoryName: string | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    quantity: number | undefined;
    amount: number | undefined;
    description: string | undefined;
    inStockId: number | undefined;
    /** 经办人 */
    operatorName: string | undefined;
}

export class GetOutboundOrderForEditOutput implements IGetOutboundOrderForEditOutput {
    outboundOrder: OutboundOrderEditDto | undefined;

    constructor(data?: IGetOutboundOrderForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.outboundOrder = data["outboundOrder"] ? OutboundOrderEditDto.fromJS(data["outboundOrder"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOutboundOrderForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetOutboundOrderForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outboundOrder"] = this.outboundOrder ? this.outboundOrder.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetOutboundOrderForEditOutput {
        const json = this.toJSON();
        let result = new GetOutboundOrderForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetOutboundOrderForEditOutput {
    outboundOrder: OutboundOrderEditDto | undefined;
}

export class OutboundOrderEditDto implements IOutboundOrderEditDto {
    id: string | undefined;
    organizationUnitId: number | undefined;
    code: string | undefined;
    customerId: number | undefined;
    supplierId: number | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    /** 领用组织 */
    tradeOrganizationUnitId: number | undefined;
    userId: number | undefined;
    maintenanceId: number | undefined;
    type: OutboundOrderEditDtoType | undefined;
    party: string | undefined;
    amount: number | undefined;
    costAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    outboundDate: moment.Moment | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    operatorName: string | undefined;
    description: string | undefined;
    details: OutboundDetailEditDto[] | undefined;

    constructor(data?: IOutboundOrderEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.code = data["code"];
            this.customerId = data["customerId"];
            this.supplierId = data["supplierId"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.tradeOrganizationUnitId = data["tradeOrganizationUnitId"];
            this.userId = data["userId"];
            this.maintenanceId = data["maintenanceId"];
            this.type = data["type"];
            this.party = data["party"];
            this.amount = data["amount"];
            this.costAmount = data["costAmount"];
            this.actualAmount = data["actualAmount"];
            this.outboundDate = data["outboundDate"] ? moment(data["outboundDate"].toString()) : <any>undefined;
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.operatorId = data["operatorId"];
            this.operatorName = data["operatorName"];
            this.description = data["description"];
            if (data["details"] && data["details"].constructor === Array) {
                this.details = [] as any;
                for (let item of data["details"])
                    this.details.push(OutboundDetailEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OutboundOrderEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutboundOrderEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["code"] = this.code;
        data["customerId"] = this.customerId;
        data["supplierId"] = this.supplierId;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["tradeOrganizationUnitId"] = this.tradeOrganizationUnitId;
        data["userId"] = this.userId;
        data["maintenanceId"] = this.maintenanceId;
        data["type"] = this.type;
        data["party"] = this.party;
        data["amount"] = this.amount;
        data["costAmount"] = this.costAmount;
        data["actualAmount"] = this.actualAmount;
        data["outboundDate"] = this.outboundDate ? this.outboundDate.toISOString() : <any>undefined;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["description"] = this.description;
        if (this.details && this.details.constructor === Array) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data; 
    }

    clone(): OutboundOrderEditDto {
        const json = this.toJSON();
        let result = new OutboundOrderEditDto();
        result.init(json);
        return result;
    }
}

export interface IOutboundOrderEditDto {
    id: string | undefined;
    organizationUnitId: number | undefined;
    code: string | undefined;
    customerId: number | undefined;
    supplierId: number | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    /** 领用组织 */
    tradeOrganizationUnitId: number | undefined;
    userId: number | undefined;
    maintenanceId: number | undefined;
    type: OutboundOrderEditDtoType | undefined;
    party: string | undefined;
    amount: number | undefined;
    costAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    outboundDate: moment.Moment | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    operatorName: string | undefined;
    description: string | undefined;
    details: OutboundDetailEditDto[] | undefined;
}

export class GetOutboundOrderForAccountEditOutput implements IGetOutboundOrderForAccountEditOutput {
    outboundOrderAccount: OutboundOrderAccountEditDto | undefined;

    constructor(data?: IGetOutboundOrderForAccountEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.outboundOrderAccount = data["outboundOrderAccount"] ? OutboundOrderAccountEditDto.fromJS(data["outboundOrderAccount"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOutboundOrderForAccountEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetOutboundOrderForAccountEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outboundOrderAccount"] = this.outboundOrderAccount ? this.outboundOrderAccount.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetOutboundOrderForAccountEditOutput {
        const json = this.toJSON();
        let result = new GetOutboundOrderForAccountEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetOutboundOrderForAccountEditOutput {
    outboundOrderAccount: OutboundOrderAccountEditDto | undefined;
}

export class OutboundOrderAccountEditDto implements IOutboundOrderAccountEditDto {
    id: string | undefined;
    accountMethod: string;
    submitAccountState: string;
    amount: number | undefined;
    costAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;

    constructor(data?: IOutboundOrderAccountEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.amount = data["amount"];
            this.costAmount = data["costAmount"];
            this.actualAmount = data["actualAmount"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): OutboundOrderAccountEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutboundOrderAccountEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["amount"] = this.amount;
        data["costAmount"] = this.costAmount;
        data["actualAmount"] = this.actualAmount;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): OutboundOrderAccountEditDto {
        const json = this.toJSON();
        let result = new OutboundOrderAccountEditDto();
        result.init(json);
        return result;
    }
}

export interface IOutboundOrderAccountEditDto {
    id: string | undefined;
    accountMethod: string;
    submitAccountState: string;
    amount: number | undefined;
    costAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
}

export class CreateOutboundOrderInput implements ICreateOutboundOrderInput {
    outboundOrder: OutboundOrderEditForSaveDto | undefined;
    outboundOrderDetails: OutboundDetailEditDto[] | undefined;

    constructor(data?: ICreateOutboundOrderInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.outboundOrder = data["outboundOrder"] ? OutboundOrderEditForSaveDto.fromJS(data["outboundOrder"]) : <any>undefined;
            if (data["outboundOrderDetails"] && data["outboundOrderDetails"].constructor === Array) {
                this.outboundOrderDetails = [] as any;
                for (let item of data["outboundOrderDetails"])
                    this.outboundOrderDetails.push(OutboundDetailEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOutboundOrderInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOutboundOrderInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outboundOrder"] = this.outboundOrder ? this.outboundOrder.toJSON() : <any>undefined;
        if (this.outboundOrderDetails && this.outboundOrderDetails.constructor === Array) {
            data["outboundOrderDetails"] = [];
            for (let item of this.outboundOrderDetails)
                data["outboundOrderDetails"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateOutboundOrderInput {
        const json = this.toJSON();
        let result = new CreateOutboundOrderInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOutboundOrderInput {
    outboundOrder: OutboundOrderEditForSaveDto | undefined;
    outboundOrderDetails: OutboundDetailEditDto[] | undefined;
}

export class OutboundOrderEditForSaveDto implements IOutboundOrderEditForSaveDto {
    id: string | undefined;
    organizationUnitId: number;
    code: string;
    customerId: number | undefined;
    supplierId: number | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    /** 领用组织 */
    tradeOrganizationUnitId: number | undefined;
    userId: number | undefined;
    maintenanceId: number | undefined;
    type: OutboundOrderEditForSaveDtoType | undefined;
    party: string | undefined;
    amount: number | undefined;
    costAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    outboundDate: moment.Moment | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    description: string | undefined;

    constructor(data?: IOutboundOrderEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.code = data["code"];
            this.customerId = data["customerId"];
            this.supplierId = data["supplierId"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.tradeOrganizationUnitId = data["tradeOrganizationUnitId"];
            this.userId = data["userId"];
            this.maintenanceId = data["maintenanceId"];
            this.type = data["type"];
            this.party = data["party"];
            this.amount = data["amount"];
            this.costAmount = data["costAmount"];
            this.actualAmount = data["actualAmount"];
            this.outboundDate = data["outboundDate"] ? moment(data["outboundDate"].toString()) : <any>undefined;
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.operatorId = data["operatorId"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): OutboundOrderEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutboundOrderEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["code"] = this.code;
        data["customerId"] = this.customerId;
        data["supplierId"] = this.supplierId;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["tradeOrganizationUnitId"] = this.tradeOrganizationUnitId;
        data["userId"] = this.userId;
        data["maintenanceId"] = this.maintenanceId;
        data["type"] = this.type;
        data["party"] = this.party;
        data["amount"] = this.amount;
        data["costAmount"] = this.costAmount;
        data["actualAmount"] = this.actualAmount;
        data["outboundDate"] = this.outboundDate ? this.outboundDate.toISOString() : <any>undefined;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["description"] = this.description;
        return data; 
    }

    clone(): OutboundOrderEditForSaveDto {
        const json = this.toJSON();
        let result = new OutboundOrderEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IOutboundOrderEditForSaveDto {
    id: string | undefined;
    organizationUnitId: number;
    code: string;
    customerId: number | undefined;
    supplierId: number | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    /** 领用组织 */
    tradeOrganizationUnitId: number | undefined;
    userId: number | undefined;
    maintenanceId: number | undefined;
    type: OutboundOrderEditForSaveDtoType | undefined;
    party: string | undefined;
    amount: number | undefined;
    costAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    outboundDate: moment.Moment | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    description: string | undefined;
}

export class UpdateOutboundOrderAccountInput implements IUpdateOutboundOrderAccountInput {
    outboundOrderAccount: OutboundOrderAccountEditDto | undefined;

    constructor(data?: IUpdateOutboundOrderAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.outboundOrderAccount = data["outboundOrderAccount"] ? OutboundOrderAccountEditDto.fromJS(data["outboundOrderAccount"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateOutboundOrderAccountInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateOutboundOrderAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["outboundOrderAccount"] = this.outboundOrderAccount ? this.outboundOrderAccount.toJSON() : <any>undefined;
        return data; 
    }

    clone(): UpdateOutboundOrderAccountInput {
        const json = this.toJSON();
        let result = new UpdateOutboundOrderAccountInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateOutboundOrderAccountInput {
    outboundOrderAccount: OutboundOrderAccountEditDto | undefined;
}

export class PagedResultDtoOfPermissionObjectListDto implements IPagedResultDtoOfPermissionObjectListDto {
    totalCount: number | undefined;
    items: PermissionObjectListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfPermissionObjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(PermissionObjectListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPermissionObjectListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPermissionObjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfPermissionObjectListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfPermissionObjectListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfPermissionObjectListDto {
    totalCount: number | undefined;
    items: PermissionObjectListDto[] | undefined;
}

export class PermissionObjectListDto implements IPermissionObjectListDto {
    name: string | undefined;
    type: PermissionObjectListDtoType | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;

    constructor(data?: IPermissionObjectListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.type = data["type"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PermissionObjectListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionObjectListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["type"] = this.type;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): PermissionObjectListDto {
        const json = this.toJSON();
        let result = new PermissionObjectListDto();
        result.init(json);
        return result;
    }
}

export interface IPermissionObjectListDto {
    name: string | undefined;
    type: PermissionObjectListDtoType | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class GetPermissionObjectForEditOutput implements IGetPermissionObjectForEditOutput {
    permissionObject: PermissionObjectEditDto | undefined;
    grantedPermissionObjectItemIds: number[] | undefined;

    constructor(data?: IGetPermissionObjectForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.permissionObject = data["permissionObject"] ? PermissionObjectEditDto.fromJS(data["permissionObject"]) : <any>undefined;
            if (data["grantedPermissionObjectItemIds"] && data["grantedPermissionObjectItemIds"].constructor === Array) {
                this.grantedPermissionObjectItemIds = [] as any;
                for (let item of data["grantedPermissionObjectItemIds"])
                    this.grantedPermissionObjectItemIds.push(item);
            }
        }
    }

    static fromJS(data: any): GetPermissionObjectForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetPermissionObjectForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionObject"] = this.permissionObject ? this.permissionObject.toJSON() : <any>undefined;
        if (this.grantedPermissionObjectItemIds && this.grantedPermissionObjectItemIds.constructor === Array) {
            data["grantedPermissionObjectItemIds"] = [];
            for (let item of this.grantedPermissionObjectItemIds)
                data["grantedPermissionObjectItemIds"].push(item);
        }
        return data; 
    }

    clone(): GetPermissionObjectForEditOutput {
        const json = this.toJSON();
        let result = new GetPermissionObjectForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetPermissionObjectForEditOutput {
    permissionObject: PermissionObjectEditDto | undefined;
    grantedPermissionObjectItemIds: number[] | undefined;
}

export class PermissionObjectEditDto implements IPermissionObjectEditDto {
    id: number | undefined;
    name: string;
    type: PermissionObjectEditDtoType;

    constructor(data?: IPermissionObjectEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.type = data["type"];
        }
    }

    static fromJS(data: any): PermissionObjectEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionObjectEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        return data; 
    }

    clone(): PermissionObjectEditDto {
        const json = this.toJSON();
        let result = new PermissionObjectEditDto();
        result.init(json);
        return result;
    }
}

export interface IPermissionObjectEditDto {
    id: number | undefined;
    name: string;
    type: PermissionObjectEditDtoType;
}

export class CreateOrUpdatePermissionObjectInput implements ICreateOrUpdatePermissionObjectInput {
    permissionObject: PermissionObjectEditDto;
    grantedPermissionObjectItemIds: number[] | undefined;

    constructor(data?: ICreateOrUpdatePermissionObjectInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.permissionObject = new PermissionObjectEditDto();
        }
    }

    init(data?: any) {
        if (data) {
            this.permissionObject = data["permissionObject"] ? PermissionObjectEditDto.fromJS(data["permissionObject"]) : new PermissionObjectEditDto();
            if (data["grantedPermissionObjectItemIds"] && data["grantedPermissionObjectItemIds"].constructor === Array) {
                this.grantedPermissionObjectItemIds = [] as any;
                for (let item of data["grantedPermissionObjectItemIds"])
                    this.grantedPermissionObjectItemIds.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdatePermissionObjectInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdatePermissionObjectInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["permissionObject"] = this.permissionObject ? this.permissionObject.toJSON() : <any>undefined;
        if (this.grantedPermissionObjectItemIds && this.grantedPermissionObjectItemIds.constructor === Array) {
            data["grantedPermissionObjectItemIds"] = [];
            for (let item of this.grantedPermissionObjectItemIds)
                data["grantedPermissionObjectItemIds"].push(item);
        }
        return data; 
    }

    clone(): CreateOrUpdatePermissionObjectInput {
        const json = this.toJSON();
        let result = new CreateOrUpdatePermissionObjectInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdatePermissionObjectInput {
    permissionObject: PermissionObjectEditDto;
    grantedPermissionObjectItemIds: number[] | undefined;
}

export class PagedResultDtoOfPermissionObjectItemListDto implements IPagedResultDtoOfPermissionObjectItemListDto {
    totalCount: number | undefined;
    items: PermissionObjectItemListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfPermissionObjectItemListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(PermissionObjectItemListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPermissionObjectItemListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPermissionObjectItemListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfPermissionObjectItemListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfPermissionObjectItemListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfPermissionObjectItemListDto {
    totalCount: number | undefined;
    items: PermissionObjectItemListDto[] | undefined;
}

export class PermissionObjectItemListDto implements IPermissionObjectItemListDto {
    itemName: string | undefined;
    ouName: string | undefined;
    itemId: number | undefined;
    codeType: string | undefined;

    constructor(data?: IPermissionObjectItemListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.itemName = data["itemName"];
            this.ouName = data["ouName"];
            this.itemId = data["itemId"];
            this.codeType = data["codeType"];
        }
    }

    static fromJS(data: any): PermissionObjectItemListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PermissionObjectItemListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["itemName"] = this.itemName;
        data["ouName"] = this.ouName;
        data["itemId"] = this.itemId;
        data["codeType"] = this.codeType;
        return data; 
    }

    clone(): PermissionObjectItemListDto {
        const json = this.toJSON();
        let result = new PermissionObjectItemListDto();
        result.init(json);
        return result;
    }
}

export interface IPermissionObjectItemListDto {
    itemName: string | undefined;
    ouName: string | undefined;
    itemId: number | undefined;
    codeType: string | undefined;
}

export class PagedResultDtoOfPurchaseOrderListDto implements IPagedResultDtoOfPurchaseOrderListDto {
    totalCount: number | undefined;
    items: PurchaseOrderListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfPurchaseOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(PurchaseOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPurchaseOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPurchaseOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfPurchaseOrderListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfPurchaseOrderListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfPurchaseOrderListDto {
    totalCount: number | undefined;
    items: PurchaseOrderListDto[] | undefined;
}

export class PurchaseOrderListDto implements IPurchaseOrderListDto {
    code: string | undefined;
    warehouseEntryStatus: PurchaseOrderListDtoWarehouseEntryStatus | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    supplierId: number | undefined;
    supplierName: string | undefined;
    purchaseDate: moment.Moment | undefined;
    deliverDate: moment.Moment | undefined;
    orderAmount: number | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    paymentDate: moment.Moment | undefined;
    operatorId: number | undefined;
    /** 经办人 */
    operatorName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IPurchaseOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.warehouseEntryStatus = data["warehouseEntryStatus"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.supplierId = data["supplierId"];
            this.supplierName = data["supplierName"];
            this.purchaseDate = data["purchaseDate"] ? moment(data["purchaseDate"].toString()) : <any>undefined;
            this.deliverDate = data["deliverDate"] ? moment(data["deliverDate"].toString()) : <any>undefined;
            this.orderAmount = data["orderAmount"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.paymentStatus = data["paymentStatus"];
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
            this.operatorId = data["operatorId"];
            this.operatorName = data["operatorName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PurchaseOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["warehouseEntryStatus"] = this.warehouseEntryStatus;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["purchaseDate"] = this.purchaseDate ? this.purchaseDate.toISOString() : <any>undefined;
        data["deliverDate"] = this.deliverDate ? this.deliverDate.toISOString() : <any>undefined;
        data["orderAmount"] = this.orderAmount;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["paymentStatus"] = this.paymentStatus;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["operatorName"] = this.operatorName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): PurchaseOrderListDto {
        const json = this.toJSON();
        let result = new PurchaseOrderListDto();
        result.init(json);
        return result;
    }
}

export interface IPurchaseOrderListDto {
    code: string | undefined;
    warehouseEntryStatus: PurchaseOrderListDtoWarehouseEntryStatus | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    supplierId: number | undefined;
    supplierName: string | undefined;
    purchaseDate: moment.Moment | undefined;
    deliverDate: moment.Moment | undefined;
    orderAmount: number | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    paymentDate: moment.Moment | undefined;
    operatorId: number | undefined;
    /** 经办人 */
    operatorName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetPurchaseOrderForEditOutput implements IGetPurchaseOrderForEditOutput {
    purchaseOrder: PurchaseOrderEditDto | undefined;

    constructor(data?: IGetPurchaseOrderForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.purchaseOrder = data["purchaseOrder"] ? PurchaseOrderEditDto.fromJS(data["purchaseOrder"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPurchaseOrderForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetPurchaseOrderForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["purchaseOrder"] = this.purchaseOrder ? this.purchaseOrder.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetPurchaseOrderForEditOutput {
        const json = this.toJSON();
        let result = new GetPurchaseOrderForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetPurchaseOrderForEditOutput {
    purchaseOrder: PurchaseOrderEditDto | undefined;
}

export class PurchaseOrderEditDto implements IPurchaseOrderEditDto {
    id: string | undefined;
    code: string;
    warehouseEntryStatus: PurchaseOrderEditDtoWarehouseEntryStatus;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    supplierId: number | undefined;
    purchaseDate: moment.Moment;
    deliverDate: moment.Moment | undefined;
    orderAmount: number;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    details: PurchaseOrderDetailEditDto[] | undefined;

    constructor(data?: IPurchaseOrderEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.warehouseEntryStatus = data["warehouseEntryStatus"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.organizationUnitId = data["organizationUnitId"];
            this.supplierId = data["supplierId"];
            this.purchaseDate = data["purchaseDate"] ? moment(data["purchaseDate"].toString()) : <any>undefined;
            this.deliverDate = data["deliverDate"] ? moment(data["deliverDate"].toString()) : <any>undefined;
            this.orderAmount = data["orderAmount"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.paymentStatus = data["paymentStatus"];
            this.operatorId = data["operatorId"];
            if (data["details"] && data["details"].constructor === Array) {
                this.details = [] as any;
                for (let item of data["details"])
                    this.details.push(PurchaseOrderDetailEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PurchaseOrderEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["warehouseEntryStatus"] = this.warehouseEntryStatus;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["organizationUnitId"] = this.organizationUnitId;
        data["supplierId"] = this.supplierId;
        data["purchaseDate"] = this.purchaseDate ? this.purchaseDate.toISOString() : <any>undefined;
        data["deliverDate"] = this.deliverDate ? this.deliverDate.toISOString() : <any>undefined;
        data["orderAmount"] = this.orderAmount;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["paymentStatus"] = this.paymentStatus;
        data["operatorId"] = this.operatorId;
        if (this.details && this.details.constructor === Array) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PurchaseOrderEditDto {
        const json = this.toJSON();
        let result = new PurchaseOrderEditDto();
        result.init(json);
        return result;
    }
}

export interface IPurchaseOrderEditDto {
    id: string | undefined;
    code: string;
    warehouseEntryStatus: PurchaseOrderEditDtoWarehouseEntryStatus;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    supplierId: number | undefined;
    purchaseDate: moment.Moment;
    deliverDate: moment.Moment | undefined;
    orderAmount: number;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    details: PurchaseOrderDetailEditDto[] | undefined;
}

export class PurchaseOrderDetailEditDto implements IPurchaseOrderDetailEditDto {
    id: string | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    standardPrice: number | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    quantity: number | undefined;
    completedQuantity: number | undefined;
    unFinishedQuantity: number | undefined;
    amount: number | undefined;
    description: string | undefined;
    materielId: number | undefined;

    constructor(data?: IPurchaseOrderDetailEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.standardPrice = data["standardPrice"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.baseMeasureUnitName = data["baseMeasureUnitName"];
            this.quantity = data["quantity"];
            this.completedQuantity = data["completedQuantity"];
            this.unFinishedQuantity = data["unFinishedQuantity"];
            this.amount = data["amount"];
            this.description = data["description"];
            this.materielId = data["materielId"];
        }
    }

    static fromJS(data: any): PurchaseOrderDetailEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderDetailEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["standardPrice"] = this.standardPrice;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["baseMeasureUnitName"] = this.baseMeasureUnitName;
        data["quantity"] = this.quantity;
        data["completedQuantity"] = this.completedQuantity;
        data["unFinishedQuantity"] = this.unFinishedQuantity;
        data["amount"] = this.amount;
        data["description"] = this.description;
        data["materielId"] = this.materielId;
        return data; 
    }

    clone(): PurchaseOrderDetailEditDto {
        const json = this.toJSON();
        let result = new PurchaseOrderDetailEditDto();
        result.init(json);
        return result;
    }
}

export interface IPurchaseOrderDetailEditDto {
    id: string | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    standardPrice: number | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    quantity: number | undefined;
    completedQuantity: number | undefined;
    unFinishedQuantity: number | undefined;
    amount: number | undefined;
    description: string | undefined;
    materielId: number | undefined;
}

export class GetPurchaseOrderForAccountEditOutput implements IGetPurchaseOrderForAccountEditOutput {
    purchaseOrderAccount: PurchaseOrderAccountEditDto | undefined;

    constructor(data?: IGetPurchaseOrderForAccountEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.purchaseOrderAccount = data["purchaseOrderAccount"] ? PurchaseOrderAccountEditDto.fromJS(data["purchaseOrderAccount"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetPurchaseOrderForAccountEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetPurchaseOrderForAccountEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["purchaseOrderAccount"] = this.purchaseOrderAccount ? this.purchaseOrderAccount.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetPurchaseOrderForAccountEditOutput {
        const json = this.toJSON();
        let result = new GetPurchaseOrderForAccountEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetPurchaseOrderForAccountEditOutput {
    purchaseOrderAccount: PurchaseOrderAccountEditDto | undefined;
}

export class PurchaseOrderAccountEditDto implements IPurchaseOrderAccountEditDto {
    id: string | undefined;
    accountMethod: string;
    submitAccountState: string;
    paymentStatus: string;

    constructor(data?: IPurchaseOrderAccountEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.paymentStatus = data["paymentStatus"];
        }
    }

    static fromJS(data: any): PurchaseOrderAccountEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderAccountEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["paymentStatus"] = this.paymentStatus;
        return data; 
    }

    clone(): PurchaseOrderAccountEditDto {
        const json = this.toJSON();
        let result = new PurchaseOrderAccountEditDto();
        result.init(json);
        return result;
    }
}

export interface IPurchaseOrderAccountEditDto {
    id: string | undefined;
    accountMethod: string;
    submitAccountState: string;
    paymentStatus: string;
}

export class CreatePurchaseOrderInput implements ICreatePurchaseOrderInput {
    purchaseOrder: PurchaseOrderEditForSaveDto | undefined;
    purchaseOrderDetails: PurchaseOrderDetailEditDto[] | undefined;

    constructor(data?: ICreatePurchaseOrderInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.purchaseOrder = data["purchaseOrder"] ? PurchaseOrderEditForSaveDto.fromJS(data["purchaseOrder"]) : <any>undefined;
            if (data["purchaseOrderDetails"] && data["purchaseOrderDetails"].constructor === Array) {
                this.purchaseOrderDetails = [] as any;
                for (let item of data["purchaseOrderDetails"])
                    this.purchaseOrderDetails.push(PurchaseOrderDetailEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreatePurchaseOrderInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePurchaseOrderInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["purchaseOrder"] = this.purchaseOrder ? this.purchaseOrder.toJSON() : <any>undefined;
        if (this.purchaseOrderDetails && this.purchaseOrderDetails.constructor === Array) {
            data["purchaseOrderDetails"] = [];
            for (let item of this.purchaseOrderDetails)
                data["purchaseOrderDetails"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreatePurchaseOrderInput {
        const json = this.toJSON();
        let result = new CreatePurchaseOrderInput();
        result.init(json);
        return result;
    }
}

export interface ICreatePurchaseOrderInput {
    purchaseOrder: PurchaseOrderEditForSaveDto | undefined;
    purchaseOrderDetails: PurchaseOrderDetailEditDto[] | undefined;
}

export class PurchaseOrderEditForSaveDto implements IPurchaseOrderEditForSaveDto {
    id: string | undefined;
    code: string;
    warehouseEntryStatus: PurchaseOrderEditForSaveDtoWarehouseEntryStatus;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    supplierId: string | undefined;
    purchaseDate: moment.Moment;
    deliverDate: moment.Moment | undefined;
    orderAmount: number;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    /** 经办人 */
    operatorId: number | undefined;

    constructor(data?: IPurchaseOrderEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.warehouseEntryStatus = data["warehouseEntryStatus"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.organizationUnitId = data["organizationUnitId"];
            this.supplierId = data["supplierId"];
            this.purchaseDate = data["purchaseDate"] ? moment(data["purchaseDate"].toString()) : <any>undefined;
            this.deliverDate = data["deliverDate"] ? moment(data["deliverDate"].toString()) : <any>undefined;
            this.orderAmount = data["orderAmount"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.paymentStatus = data["paymentStatus"];
            this.operatorId = data["operatorId"];
        }
    }

    static fromJS(data: any): PurchaseOrderEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseOrderEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["warehouseEntryStatus"] = this.warehouseEntryStatus;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["organizationUnitId"] = this.organizationUnitId;
        data["supplierId"] = this.supplierId;
        data["purchaseDate"] = this.purchaseDate ? this.purchaseDate.toISOString() : <any>undefined;
        data["deliverDate"] = this.deliverDate ? this.deliverDate.toISOString() : <any>undefined;
        data["orderAmount"] = this.orderAmount;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["paymentStatus"] = this.paymentStatus;
        data["operatorId"] = this.operatorId;
        return data; 
    }

    clone(): PurchaseOrderEditForSaveDto {
        const json = this.toJSON();
        let result = new PurchaseOrderEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IPurchaseOrderEditForSaveDto {
    id: string | undefined;
    code: string;
    warehouseEntryStatus: PurchaseOrderEditForSaveDtoWarehouseEntryStatus;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    supplierId: string | undefined;
    purchaseDate: moment.Moment;
    deliverDate: moment.Moment | undefined;
    orderAmount: number;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    /** 经办人 */
    operatorId: number | undefined;
}

export class UpdatePurchaseOrderAccountInput implements IUpdatePurchaseOrderAccountInput {
    purchaseOrderAccount: PurchaseOrderAccountEditDto | undefined;

    constructor(data?: IUpdatePurchaseOrderAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.purchaseOrderAccount = data["purchaseOrderAccount"] ? PurchaseOrderAccountEditDto.fromJS(data["purchaseOrderAccount"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdatePurchaseOrderAccountInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePurchaseOrderAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["purchaseOrderAccount"] = this.purchaseOrderAccount ? this.purchaseOrderAccount.toJSON() : <any>undefined;
        return data; 
    }

    clone(): UpdatePurchaseOrderAccountInput {
        const json = this.toJSON();
        let result = new UpdatePurchaseOrderAccountInput();
        result.init(json);
        return result;
    }
}

export interface IUpdatePurchaseOrderAccountInput {
    purchaseOrderAccount: PurchaseOrderAccountEditDto | undefined;
}

export class PagedResultDtoOfReplacementTireListDto implements IPagedResultDtoOfReplacementTireListDto {
    totalCount: number | undefined;
    items: ReplacementTireListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfReplacementTireListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(ReplacementTireListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfReplacementTireListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfReplacementTireListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfReplacementTireListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfReplacementTireListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfReplacementTireListDto {
    totalCount: number | undefined;
    items: ReplacementTireListDto[] | undefined;
}

export class ReplacementTireListDto implements IReplacementTireListDto {
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    station: number | undefined;
    stationName: string | undefined;
    place: string | undefined;
    type: string | undefined;
    typeName: string | undefined;
    vehicleType: string | undefined;
    vehicleTypeName: string | undefined;
    statusName: string | undefined;
    status: string | undefined;
    accountMethod: string | undefined;
    accountMethodName: string | undefined;
    submitAccountState: string | undefined;
    submitAccountStateName: string | undefined;
    amount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    responsePersonId: number | undefined;
    responsePersonName: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
    organizationUnitName: string | undefined;
    businessCustomerName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IReplacementTireListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.station = data["station"];
            this.stationName = data["stationName"];
            this.place = data["place"];
            this.type = data["type"];
            this.typeName = data["typeName"];
            this.vehicleType = data["vehicleType"];
            this.vehicleTypeName = data["vehicleTypeName"];
            this.statusName = data["statusName"];
            this.status = data["status"];
            this.accountMethod = data["accountMethod"];
            this.accountMethodName = data["accountMethodName"];
            this.submitAccountState = data["submitAccountState"];
            this.submitAccountStateName = data["submitAccountStateName"];
            this.amount = data["amount"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.actualAmount = data["actualAmount"];
            this.responsePersonId = data["responsePersonId"];
            this.responsePersonName = data["responsePersonName"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
            this.businessCustomerId = data["businessCustomerId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.businessCustomerName = data["businessCustomerName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ReplacementTireListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReplacementTireListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["station"] = this.station;
        data["stationName"] = this.stationName;
        data["place"] = this.place;
        data["type"] = this.type;
        data["typeName"] = this.typeName;
        data["vehicleType"] = this.vehicleType;
        data["vehicleTypeName"] = this.vehicleTypeName;
        data["statusName"] = this.statusName;
        data["status"] = this.status;
        data["accountMethod"] = this.accountMethod;
        data["accountMethodName"] = this.accountMethodName;
        data["submitAccountState"] = this.submitAccountState;
        data["submitAccountStateName"] = this.submitAccountStateName;
        data["amount"] = this.amount;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["actualAmount"] = this.actualAmount;
        data["responsePersonId"] = this.responsePersonId;
        data["responsePersonName"] = this.responsePersonName;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessCustomerId"] = this.businessCustomerId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["businessCustomerName"] = this.businessCustomerName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): ReplacementTireListDto {
        const json = this.toJSON();
        let result = new ReplacementTireListDto();
        result.init(json);
        return result;
    }
}

export interface IReplacementTireListDto {
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    station: number | undefined;
    stationName: string | undefined;
    place: string | undefined;
    type: string | undefined;
    typeName: string | undefined;
    vehicleType: string | undefined;
    vehicleTypeName: string | undefined;
    statusName: string | undefined;
    status: string | undefined;
    accountMethod: string | undefined;
    accountMethodName: string | undefined;
    submitAccountState: string | undefined;
    submitAccountStateName: string | undefined;
    amount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    responsePersonId: number | undefined;
    responsePersonName: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 业务单位 */
    organizationUnitId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
    organizationUnitName: string | undefined;
    businessCustomerName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class ListResultDtoOfReplacementTireListDto implements IListResultDtoOfReplacementTireListDto {
    items: ReplacementTireListDto[] | undefined;

    constructor(data?: IListResultDtoOfReplacementTireListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(ReplacementTireListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfReplacementTireListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfReplacementTireListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfReplacementTireListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfReplacementTireListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfReplacementTireListDto {
    items: ReplacementTireListDto[] | undefined;
}

export class GetReplacementTireForEditOutput implements IGetReplacementTireForEditOutput {
    replacementTire: ReplacementTireEditDto | undefined;

    constructor(data?: IGetReplacementTireForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.replacementTire = data["replacementTire"] ? ReplacementTireEditDto.fromJS(data["replacementTire"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetReplacementTireForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetReplacementTireForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["replacementTire"] = this.replacementTire ? this.replacementTire.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetReplacementTireForEditOutput {
        const json = this.toJSON();
        let result = new GetReplacementTireForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetReplacementTireForEditOutput {
    replacementTire: ReplacementTireEditDto | undefined;
}

export class ReplacementTireEditDto implements IReplacementTireEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    station: number | undefined;
    place: string | undefined;
    type: string | undefined;
    vehicleType: string | undefined;
    status: string | undefined;
    responsePersonId: number | undefined;
    /** 备注 */
    description: string | undefined;
    /** 业务组织 */
    organizationUnitId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;

    constructor(data?: IReplacementTireEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.station = data["station"];
            this.place = data["place"];
            this.type = data["type"];
            this.vehicleType = data["vehicleType"];
            this.status = data["status"];
            this.responsePersonId = data["responsePersonId"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
            this.businessCustomerId = data["businessCustomerId"];
        }
    }

    static fromJS(data: any): ReplacementTireEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReplacementTireEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["station"] = this.station;
        data["place"] = this.place;
        data["type"] = this.type;
        data["vehicleType"] = this.vehicleType;
        data["status"] = this.status;
        data["responsePersonId"] = this.responsePersonId;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessCustomerId"] = this.businessCustomerId;
        return data; 
    }

    clone(): ReplacementTireEditDto {
        const json = this.toJSON();
        let result = new ReplacementTireEditDto();
        result.init(json);
        return result;
    }
}

export interface IReplacementTireEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    station: number | undefined;
    place: string | undefined;
    type: string | undefined;
    vehicleType: string | undefined;
    status: string | undefined;
    responsePersonId: number | undefined;
    /** 备注 */
    description: string | undefined;
    /** 业务组织 */
    organizationUnitId: number | undefined;
    /** 车辆所属客户 */
    businessCustomerId: number | undefined;
}

export class CreateReplacementTireInput implements ICreateReplacementTireInput {
    replacementTire: ReplacementTireEditForSaveDto | undefined;

    constructor(data?: ICreateReplacementTireInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.replacementTire = data["replacementTire"] ? ReplacementTireEditForSaveDto.fromJS(data["replacementTire"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateReplacementTireInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReplacementTireInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["replacementTire"] = this.replacementTire ? this.replacementTire.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateReplacementTireInput {
        const json = this.toJSON();
        let result = new CreateReplacementTireInput();
        result.init(json);
        return result;
    }
}

export interface ICreateReplacementTireInput {
    replacementTire: ReplacementTireEditForSaveDto | undefined;
}

export class ReplacementTireEditForSaveDto implements IReplacementTireEditForSaveDto {
    id: string | undefined;
    vehicleCode: string;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    station: number;
    place: string | undefined;
    type: string;
    vehicleType: string;
    status: string | undefined;
    responsePersonId: number;
    /** 备注 */
    description: string | undefined;
    /** 业务组织 */
    organizationUnitId: number;
    /** 车辆所属客户 */
    businessCustomerId: number;

    constructor(data?: IReplacementTireEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.station = data["station"];
            this.place = data["place"];
            this.type = data["type"];
            this.vehicleType = data["vehicleType"];
            this.status = data["status"];
            this.responsePersonId = data["responsePersonId"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
            this.businessCustomerId = data["businessCustomerId"];
        }
    }

    static fromJS(data: any): ReplacementTireEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReplacementTireEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["station"] = this.station;
        data["place"] = this.place;
        data["type"] = this.type;
        data["vehicleType"] = this.vehicleType;
        data["status"] = this.status;
        data["responsePersonId"] = this.responsePersonId;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessCustomerId"] = this.businessCustomerId;
        return data; 
    }

    clone(): ReplacementTireEditForSaveDto {
        const json = this.toJSON();
        let result = new ReplacementTireEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IReplacementTireEditForSaveDto {
    id: string | undefined;
    vehicleCode: string;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    station: number;
    place: string | undefined;
    type: string;
    vehicleType: string;
    status: string | undefined;
    responsePersonId: number;
    /** 备注 */
    description: string | undefined;
    /** 业务组织 */
    organizationUnitId: number;
    /** 车辆所属客户 */
    businessCustomerId: number;
}

export class PagedResultDtoOfReplacementTireCostListDto implements IPagedResultDtoOfReplacementTireCostListDto {
    totalCount: number | undefined;
    items: ReplacementTireCostListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfReplacementTireCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(ReplacementTireCostListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfReplacementTireCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfReplacementTireCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfReplacementTireCostListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfReplacementTireCostListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfReplacementTireCostListDto {
    totalCount: number | undefined;
    items: ReplacementTireCostListDto[] | undefined;
}

export class ReplacementTireCostListDto implements IReplacementTireCostListDto {
    status: string | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    checkUserName: string | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    costDescription: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IReplacementTireCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.status = data["status"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.transportCheckStatus = data["transportCheckStatus"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : <any>undefined;
            this.checkUserId = data["checkUserId"];
            this.checkUserName = data["checkUserName"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.costDescription = data["costDescription"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ReplacementTireCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReplacementTireCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["transportCheckStatus"] = this.transportCheckStatus;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : <any>undefined;
        data["checkUserId"] = this.checkUserId;
        data["checkUserName"] = this.checkUserName;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["costDescription"] = this.costDescription;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): ReplacementTireCostListDto {
        const json = this.toJSON();
        let result = new ReplacementTireCostListDto();
        result.init(json);
        return result;
    }
}

export interface IReplacementTireCostListDto {
    status: string | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    checkUserName: string | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment | undefined;
    costDescription: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetReplacementTireCostForEditOutput implements IGetReplacementTireCostForEditOutput {
    replacementTireCost: ReplacementTireCostEditDto | undefined;

    constructor(data?: IGetReplacementTireCostForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.replacementTireCost = data["replacementTireCost"] ? ReplacementTireCostEditDto.fromJS(data["replacementTireCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetReplacementTireCostForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetReplacementTireCostForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["replacementTireCost"] = this.replacementTireCost ? this.replacementTireCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetReplacementTireCostForEditOutput {
        const json = this.toJSON();
        let result = new GetReplacementTireCostForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetReplacementTireCostForEditOutput {
    replacementTireCost: ReplacementTireCostEditDto | undefined;
}

export class ReplacementTireCostEditDto implements IReplacementTireCostEditDto {
    id: string | undefined;
    status: string | undefined;
    amount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment;
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
    details: ReplacementTireCostDetailDto[] | undefined;

    constructor(data?: IReplacementTireCostEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.status = data["status"];
            this.amount = data["amount"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.actualAmount = data["actualAmount"];
            this.transportCheckStatus = data["transportCheckStatus"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : <any>undefined;
            this.checkUserId = data["checkUserId"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.costDescription = data["costDescription"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxAmount = data["taxAmount"];
            if (data["details"] && data["details"].constructor === Array) {
                this.details = [] as any;
                for (let item of data["details"])
                    this.details.push(ReplacementTireCostDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReplacementTireCostEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReplacementTireCostEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["amount"] = this.amount;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["actualAmount"] = this.actualAmount;
        data["transportCheckStatus"] = this.transportCheckStatus;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : <any>undefined;
        data["checkUserId"] = this.checkUserId;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["costDescription"] = this.costDescription;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxAmount"] = this.taxAmount;
        if (this.details && this.details.constructor === Array) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ReplacementTireCostEditDto {
        const json = this.toJSON();
        let result = new ReplacementTireCostEditDto();
        result.init(json);
        return result;
    }
}

export interface IReplacementTireCostEditDto {
    id: string | undefined;
    status: string | undefined;
    amount: number | undefined;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment;
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
    details: ReplacementTireCostDetailDto[] | undefined;
}

export class ReplacementTireCostDetailDto implements IReplacementTireCostDetailDto {
    id: string | undefined;
    project: string;
    projectName: string | undefined;
    repairManIds: string | undefined;
    repairManIdNames: string | undefined;
    baseMeasureUnitName: string | undefined;
    baseMeasureUnit: string | undefined;
    salesPrice: number | undefined;
    repairPrice: number | undefined;
    specification: string | undefined;
    manufacturer: string | undefined;
    quantity: number | undefined;
    materialCharge: number | undefined;
    repairCharge: number | undefined;
    scale: number | undefined;
    percentage: number | undefined;
    replacementTireRecordId: string | undefined;

    constructor(data?: IReplacementTireCostDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.project = data["project"];
            this.projectName = data["projectName"];
            this.repairManIds = data["repairManIds"];
            this.repairManIdNames = data["repairManIdNames"];
            this.baseMeasureUnitName = data["baseMeasureUnitName"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.salesPrice = data["salesPrice"];
            this.repairPrice = data["repairPrice"];
            this.specification = data["specification"];
            this.manufacturer = data["manufacturer"];
            this.quantity = data["quantity"];
            this.materialCharge = data["materialCharge"];
            this.repairCharge = data["repairCharge"];
            this.scale = data["scale"];
            this.percentage = data["percentage"];
            this.replacementTireRecordId = data["replacementTireRecordId"];
        }
    }

    static fromJS(data: any): ReplacementTireCostDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReplacementTireCostDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["project"] = this.project;
        data["projectName"] = this.projectName;
        data["repairManIds"] = this.repairManIds;
        data["repairManIdNames"] = this.repairManIdNames;
        data["baseMeasureUnitName"] = this.baseMeasureUnitName;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["salesPrice"] = this.salesPrice;
        data["repairPrice"] = this.repairPrice;
        data["specification"] = this.specification;
        data["manufacturer"] = this.manufacturer;
        data["quantity"] = this.quantity;
        data["materialCharge"] = this.materialCharge;
        data["repairCharge"] = this.repairCharge;
        data["scale"] = this.scale;
        data["percentage"] = this.percentage;
        data["replacementTireRecordId"] = this.replacementTireRecordId;
        return data; 
    }

    clone(): ReplacementTireCostDetailDto {
        const json = this.toJSON();
        let result = new ReplacementTireCostDetailDto();
        result.init(json);
        return result;
    }
}

export interface IReplacementTireCostDetailDto {
    id: string | undefined;
    project: string;
    projectName: string | undefined;
    repairManIds: string | undefined;
    repairManIdNames: string | undefined;
    baseMeasureUnitName: string | undefined;
    baseMeasureUnit: string | undefined;
    salesPrice: number | undefined;
    repairPrice: number | undefined;
    specification: string | undefined;
    manufacturer: string | undefined;
    quantity: number | undefined;
    materialCharge: number | undefined;
    repairCharge: number | undefined;
    scale: number | undefined;
    percentage: number | undefined;
    replacementTireRecordId: string | undefined;
}

export class CreateReplacementTireCostInput implements ICreateReplacementTireCostInput {
    replacementTireCost: ReplacementTireCostEditForSaveDto | undefined;
    replacementTireCostDetails: ReplacementTireCostDetailDto[] | undefined;

    constructor(data?: ICreateReplacementTireCostInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.replacementTireCost = data["replacementTireCost"] ? ReplacementTireCostEditForSaveDto.fromJS(data["replacementTireCost"]) : <any>undefined;
            if (data["replacementTireCostDetails"] && data["replacementTireCostDetails"].constructor === Array) {
                this.replacementTireCostDetails = [] as any;
                for (let item of data["replacementTireCostDetails"])
                    this.replacementTireCostDetails.push(ReplacementTireCostDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateReplacementTireCostInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReplacementTireCostInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["replacementTireCost"] = this.replacementTireCost ? this.replacementTireCost.toJSON() : <any>undefined;
        if (this.replacementTireCostDetails && this.replacementTireCostDetails.constructor === Array) {
            data["replacementTireCostDetails"] = [];
            for (let item of this.replacementTireCostDetails)
                data["replacementTireCostDetails"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateReplacementTireCostInput {
        const json = this.toJSON();
        let result = new CreateReplacementTireCostInput();
        result.init(json);
        return result;
    }
}

export interface ICreateReplacementTireCostInput {
    replacementTireCost: ReplacementTireCostEditForSaveDto | undefined;
    replacementTireCostDetails: ReplacementTireCostDetailDto[] | undefined;
}

export class ReplacementTireCostEditForSaveDto implements IReplacementTireCostEditForSaveDto {
    id: string | undefined;
    status: string;
    amount: number;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    accountMethod: string;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment;
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;

    constructor(data?: IReplacementTireCostEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.status = data["status"];
            this.amount = data["amount"];
            this.manualCostAmount = data["manualCostAmount"];
            this.materialCostAmount = data["materialCostAmount"];
            this.manualAmount = data["manualAmount"];
            this.materialAmount = data["materialAmount"];
            this.actualAmount = data["actualAmount"];
            this.transportCheckStatus = data["transportCheckStatus"];
            this.checkDate = data["checkDate"] ? moment(data["checkDate"].toString()) : <any>undefined;
            this.checkUserId = data["checkUserId"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.debitStatus = data["debitStatus"];
            this.debitDate = data["debitDate"] ? moment(data["debitDate"].toString()) : <any>undefined;
            this.costDescription = data["costDescription"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxAmount = data["taxAmount"];
        }
    }

    static fromJS(data: any): ReplacementTireCostEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReplacementTireCostEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["amount"] = this.amount;
        data["manualCostAmount"] = this.manualCostAmount;
        data["materialCostAmount"] = this.materialCostAmount;
        data["manualAmount"] = this.manualAmount;
        data["materialAmount"] = this.materialAmount;
        data["actualAmount"] = this.actualAmount;
        data["transportCheckStatus"] = this.transportCheckStatus;
        data["checkDate"] = this.checkDate ? this.checkDate.toISOString() : <any>undefined;
        data["checkUserId"] = this.checkUserId;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["debitStatus"] = this.debitStatus;
        data["debitDate"] = this.debitDate ? this.debitDate.toISOString() : <any>undefined;
        data["costDescription"] = this.costDescription;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxAmount"] = this.taxAmount;
        return data; 
    }

    clone(): ReplacementTireCostEditForSaveDto {
        const json = this.toJSON();
        let result = new ReplacementTireCostEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IReplacementTireCostEditForSaveDto {
    id: string | undefined;
    status: string;
    amount: number;
    /** 手工提成 */
    manualCostAmount: number | undefined;
    /** 出库成本 */
    materialCostAmount: number | undefined;
    /** 手工费 */
    manualAmount: number | undefined;
    /** 材料费 */
    materialAmount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    transportCheckStatus: string | undefined;
    checkDate: moment.Moment | undefined;
    checkUserId: number | undefined;
    accountMethod: string;
    submitAccountState: string | undefined;
    debitStatus: string | undefined;
    /** 收款日期 */
    debitDate: moment.Moment;
    costDescription: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税额 */
    taxAmount: number | undefined;
}

export class CreateReplacementTireCostDetailInput implements ICreateReplacementTireCostDetailInput {
    id: string | undefined;
    replacementTireCostDetails: ReplacementTireCostDetailDto[] | undefined;

    constructor(data?: ICreateReplacementTireCostDetailInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            if (data["replacementTireCostDetails"] && data["replacementTireCostDetails"].constructor === Array) {
                this.replacementTireCostDetails = [] as any;
                for (let item of data["replacementTireCostDetails"])
                    this.replacementTireCostDetails.push(ReplacementTireCostDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateReplacementTireCostDetailInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReplacementTireCostDetailInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.replacementTireCostDetails && this.replacementTireCostDetails.constructor === Array) {
            data["replacementTireCostDetails"] = [];
            for (let item of this.replacementTireCostDetails)
                data["replacementTireCostDetails"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateReplacementTireCostDetailInput {
        const json = this.toJSON();
        let result = new CreateReplacementTireCostDetailInput();
        result.init(json);
        return result;
    }
}

export interface ICreateReplacementTireCostDetailInput {
    id: string | undefined;
    replacementTireCostDetails: ReplacementTireCostDetailDto[] | undefined;
}

export class PagedResultDtoOfRoleListDto implements IPagedResultDtoOfRoleListDto {
    totalCount: number | undefined;
    items: RoleListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(RoleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfRoleListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfRoleListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfRoleListDto {
    totalCount: number | undefined;
    items: RoleListDto[] | undefined;
}

export class RoleListDto implements IRoleListDto {
    name: string | undefined;
    tenantId: number | undefined;
    displayName: string | undefined;
    isDefault: boolean | undefined;
    isStatic: boolean | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;

    constructor(data?: IRoleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.tenantId = data["tenantId"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
            this.isStatic = data["isStatic"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["tenantId"] = this.tenantId;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["isStatic"] = this.isStatic;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): RoleListDto {
        const json = this.toJSON();
        let result = new RoleListDto();
        result.init(json);
        return result;
    }
}

export interface IRoleListDto {
    name: string | undefined;
    tenantId: number | undefined;
    displayName: string | undefined;
    isDefault: boolean | undefined;
    isStatic: boolean | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class GetRoleForEditOutput implements IGetRoleForEditOutput {
    id: number | undefined;
    name: string;
    displayName: string;
    isDefault: boolean | undefined;
    isStatic: boolean | undefined;

    constructor(data?: IGetRoleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
            this.isStatic = data["isStatic"];
        }
    }

    static fromJS(data: any): GetRoleForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetRoleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["isStatic"] = this.isStatic;
        return data; 
    }

    clone(): GetRoleForEditOutput {
        const json = this.toJSON();
        let result = new GetRoleForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetRoleForEditOutput {
    id: number | undefined;
    name: string;
    displayName: string;
    isDefault: boolean | undefined;
    isStatic: boolean | undefined;
}

export class CreateOrUpdateRoleInput implements ICreateOrUpdateRoleInput {
    role: RoleEditDto;
    grantedPermissionNames: string[];

    constructor(data?: ICreateOrUpdateRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.role = new RoleEditDto();
            this.grantedPermissionNames = [];
        }
    }

    init(data?: any) {
        if (data) {
            this.role = data["role"] ? RoleEditDto.fromJS(data["role"]) : new RoleEditDto();
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateRoleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["role"] = this.role ? this.role.toJSON() : <any>undefined;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    clone(): CreateOrUpdateRoleInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateRoleInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateRoleInput {
    role: RoleEditDto;
    grantedPermissionNames: string[];
}

export class RoleEditDto implements IRoleEditDto {
    id: number | undefined;
    name: string;
    displayName: string;
    isDefault: boolean | undefined;
    isStatic: boolean | undefined;

    constructor(data?: IRoleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isDefault = data["isDefault"];
            this.isStatic = data["isStatic"];
        }
    }

    static fromJS(data: any): RoleEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isDefault"] = this.isDefault;
        data["isStatic"] = this.isStatic;
        return data; 
    }

    clone(): RoleEditDto {
        const json = this.toJSON();
        let result = new RoleEditDto();
        result.init(json);
        return result;
    }
}

export interface IRoleEditDto {
    id: number | undefined;
    name: string;
    displayName: string;
    isDefault: boolean | undefined;
    isStatic: boolean | undefined;
}

export class GetPermissionsForEditOutput implements IGetPermissionsForEditOutput {
    permissions: FlatPermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;

    constructor(data?: IGetPermissionsForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [] as any;
                for (let item of data["permissions"])
                    this.permissions.push(FlatPermissionDto.fromJS(item));
            }
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): GetPermissionsForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetPermissionsForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    clone(): GetPermissionsForEditOutput {
        const json = this.toJSON();
        let result = new GetPermissionsForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetPermissionsForEditOutput {
    permissions: FlatPermissionDto[] | undefined;
    grantedPermissionNames: string[] | undefined;
}

export class FlatPermissionDto implements IFlatPermissionDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    isGrantedByDefault: boolean | undefined;

    constructor(data?: IFlatPermissionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.parentName = data["parentName"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.description = data["description"];
            this.isGrantedByDefault = data["isGrantedByDefault"];
        }
    }

    static fromJS(data: any): FlatPermissionDto {
        data = typeof data === 'object' ? data : {};
        let result = new FlatPermissionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["parentName"] = this.parentName;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["description"] = this.description;
        data["isGrantedByDefault"] = this.isGrantedByDefault;
        return data; 
    }

    clone(): FlatPermissionDto {
        const json = this.toJSON();
        let result = new FlatPermissionDto();
        result.init(json);
        return result;
    }
}

export interface IFlatPermissionDto {
    parentName: string | undefined;
    name: string | undefined;
    displayName: string | undefined;
    description: string | undefined;
    isGrantedByDefault: boolean | undefined;
}

export class CreatOrUpdateRolePermissionControlPointDataRuleInput implements ICreatOrUpdateRolePermissionControlPointDataRuleInput {
    roleId: number | undefined;
    /** 控制点名称 汉字 */
    controlPointName: string | undefined;
    dataRuleId: number | undefined;

    constructor(data?: ICreatOrUpdateRolePermissionControlPointDataRuleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.controlPointName = data["controlPointName"];
            this.dataRuleId = data["dataRuleId"];
        }
    }

    static fromJS(data: any): CreatOrUpdateRolePermissionControlPointDataRuleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreatOrUpdateRolePermissionControlPointDataRuleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["controlPointName"] = this.controlPointName;
        data["dataRuleId"] = this.dataRuleId;
        return data; 
    }

    clone(): CreatOrUpdateRolePermissionControlPointDataRuleInput {
        const json = this.toJSON();
        let result = new CreatOrUpdateRolePermissionControlPointDataRuleInput();
        result.init(json);
        return result;
    }
}

export interface ICreatOrUpdateRolePermissionControlPointDataRuleInput {
    roleId: number | undefined;
    /** 控制点名称 汉字 */
    controlPointName: string | undefined;
    dataRuleId: number | undefined;
}

export class GetCurrentLoginInformationsOutput implements IGetCurrentLoginInformationsOutput {
    application: ApplicationInfoDto | undefined;
    user: UserLoginInfoDto | undefined;
    tenant: TenantLoginInfoDto | undefined;

    constructor(data?: IGetCurrentLoginInformationsOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.application = data["application"] ? ApplicationInfoDto.fromJS(data["application"]) : <any>undefined;
            this.user = data["user"] ? UserLoginInfoDto.fromJS(data["user"]) : <any>undefined;
            this.tenant = data["tenant"] ? TenantLoginInfoDto.fromJS(data["tenant"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCurrentLoginInformationsOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetCurrentLoginInformationsOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["application"] = this.application ? this.application.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        data["tenant"] = this.tenant ? this.tenant.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetCurrentLoginInformationsOutput {
        const json = this.toJSON();
        let result = new GetCurrentLoginInformationsOutput();
        result.init(json);
        return result;
    }
}

export interface IGetCurrentLoginInformationsOutput {
    application: ApplicationInfoDto | undefined;
    user: UserLoginInfoDto | undefined;
    tenant: TenantLoginInfoDto | undefined;
}

export class ApplicationInfoDto implements IApplicationInfoDto {
    version: string | undefined;
    releaseDate: moment.Moment | undefined;
    features: { [key: string] : boolean; } | undefined;

    constructor(data?: IApplicationInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.version = data["version"];
            this.releaseDate = data["releaseDate"] ? moment(data["releaseDate"].toString()) : <any>undefined;
            if (data["features"]) {
                this.features = {} as any;
                for (let key in data["features"]) {
                    if (data["features"].hasOwnProperty(key))
                        this.features[key] = data["features"][key];
                }
            }
        }
    }

    static fromJS(data: any): ApplicationInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApplicationInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["version"] = this.version;
        data["releaseDate"] = this.releaseDate ? this.releaseDate.toISOString() : <any>undefined;
        if (this.features) {
            data["features"] = {};
            for (let key in this.features) {
                if (this.features.hasOwnProperty(key))
                    data["features"][key] = this.features[key];
            }
        }
        return data; 
    }

    clone(): ApplicationInfoDto {
        const json = this.toJSON();
        let result = new ApplicationInfoDto();
        result.init(json);
        return result;
    }
}

export interface IApplicationInfoDto {
    version: string | undefined;
    releaseDate: moment.Moment | undefined;
    features: { [key: string] : boolean; } | undefined;
}

export class UserLoginInfoDto implements IUserLoginInfoDto {
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    id: number | undefined;

    constructor(data?: IUserLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.userName = data["userName"];
            this.emailAddress = data["emailAddress"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["userName"] = this.userName;
        data["emailAddress"] = this.emailAddress;
        data["id"] = this.id;
        return data; 
    }

    clone(): UserLoginInfoDto {
        const json = this.toJSON();
        let result = new UserLoginInfoDto();
        result.init(json);
        return result;
    }
}

export interface IUserLoginInfoDto {
    name: string | undefined;
    surname: string | undefined;
    userName: string | undefined;
    emailAddress: string | undefined;
    id: number | undefined;
}

export class TenantLoginInfoDto implements ITenantLoginInfoDto {
    tenancyName: string | undefined;
    name: string | undefined;
    id: number | undefined;

    constructor(data?: ITenantLoginInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantLoginInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantLoginInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }

    clone(): TenantLoginInfoDto {
        const json = this.toJSON();
        let result = new TenantLoginInfoDto();
        result.init(json);
        return result;
    }
}

export interface ITenantLoginInfoDto {
    tenancyName: string | undefined;
    name: string | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfSingleVehicleServiceFeeRuleListDto implements IPagedResultDtoOfSingleVehicleServiceFeeRuleListDto {
    totalCount: number | undefined;
    items: SingleVehicleServiceFeeRuleListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSingleVehicleServiceFeeRuleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SingleVehicleServiceFeeRuleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSingleVehicleServiceFeeRuleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSingleVehicleServiceFeeRuleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSingleVehicleServiceFeeRuleListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSingleVehicleServiceFeeRuleListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSingleVehicleServiceFeeRuleListDto {
    totalCount: number | undefined;
    items: SingleVehicleServiceFeeRuleListDto[] | undefined;
}

export class SingleVehicleServiceFeeRuleListDto implements ISingleVehicleServiceFeeRuleListDto {
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    organizationUnitIdName: string | undefined;
    /** 规则编号 */
    ruleCode: string | undefined;
    /** 规则描述 */
    ruleDescribe: string | undefined;
    /** 吨位上限 */
    tonnageUpper: number | undefined;
    /** 吨位下限 */
    tonnageLower: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 提取方式(纯收、毛收) */
    obtainMode: string | undefined;
    /** 计算标准(单价/比例) */
    obtainStandard: string | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 备注 */
    description: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ISingleVehicleServiceFeeRuleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitIdName = data["organizationUnitIdName"];
            this.ruleCode = data["ruleCode"];
            this.ruleDescribe = data["ruleDescribe"];
            this.tonnageUpper = data["tonnageUpper"];
            this.tonnageLower = data["tonnageLower"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.obtainMode = data["obtainMode"];
            this.obtainStandard = data["obtainStandard"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.description = data["description"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SingleVehicleServiceFeeRuleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleServiceFeeRuleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitIdName"] = this.organizationUnitIdName;
        data["ruleCode"] = this.ruleCode;
        data["ruleDescribe"] = this.ruleDescribe;
        data["tonnageUpper"] = this.tonnageUpper;
        data["tonnageLower"] = this.tonnageLower;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["obtainMode"] = this.obtainMode;
        data["obtainStandard"] = this.obtainStandard;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["description"] = this.description;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): SingleVehicleServiceFeeRuleListDto {
        const json = this.toJSON();
        let result = new SingleVehicleServiceFeeRuleListDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleServiceFeeRuleListDto {
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    organizationUnitIdName: string | undefined;
    /** 规则编号 */
    ruleCode: string | undefined;
    /** 规则描述 */
    ruleDescribe: string | undefined;
    /** 吨位上限 */
    tonnageUpper: number | undefined;
    /** 吨位下限 */
    tonnageLower: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 提取方式(纯收、毛收) */
    obtainMode: string | undefined;
    /** 计算标准(单价/比例) */
    obtainStandard: string | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 备注 */
    description: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetSingleVehicleServiceFeeRuleForEditOutput implements IGetSingleVehicleServiceFeeRuleForEditOutput {
    singleVehicleServiceFeeRule: SingleVehicleServiceFeeRuleEditDto | undefined;

    constructor(data?: IGetSingleVehicleServiceFeeRuleForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.singleVehicleServiceFeeRule = data["singleVehicleServiceFeeRule"] ? SingleVehicleServiceFeeRuleEditDto.fromJS(data["singleVehicleServiceFeeRule"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSingleVehicleServiceFeeRuleForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetSingleVehicleServiceFeeRuleForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["singleVehicleServiceFeeRule"] = this.singleVehicleServiceFeeRule ? this.singleVehicleServiceFeeRule.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetSingleVehicleServiceFeeRuleForEditOutput {
        const json = this.toJSON();
        let result = new GetSingleVehicleServiceFeeRuleForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetSingleVehicleServiceFeeRuleForEditOutput {
    singleVehicleServiceFeeRule: SingleVehicleServiceFeeRuleEditDto | undefined;
}

export class SingleVehicleServiceFeeRuleEditDto implements ISingleVehicleServiceFeeRuleEditDto {
    id: string | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    /** 规则编号 */
    ruleCode: string | undefined;
    /** 规则描述 */
    ruleDescribe: string | undefined;
    /** 吨位上限 */
    tonnageUpper: number | undefined;
    /** 吨位下限 */
    tonnageLower: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 提取方式(车数、吨数、纯收、毛收) */
    obtainMode: string | undefined;
    /** 提取标准 */
    obtainStandard: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 备注 */
    description: string | undefined;

    constructor(data?: ISingleVehicleServiceFeeRuleEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.ruleCode = data["ruleCode"];
            this.ruleDescribe = data["ruleDescribe"];
            this.tonnageUpper = data["tonnageUpper"];
            this.tonnageLower = data["tonnageLower"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.obtainMode = data["obtainMode"];
            this.obtainStandard = data["obtainStandard"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): SingleVehicleServiceFeeRuleEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleServiceFeeRuleEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["ruleCode"] = this.ruleCode;
        data["ruleDescribe"] = this.ruleDescribe;
        data["tonnageUpper"] = this.tonnageUpper;
        data["tonnageLower"] = this.tonnageLower;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["obtainMode"] = this.obtainMode;
        data["obtainStandard"] = this.obtainStandard;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["description"] = this.description;
        return data; 
    }

    clone(): SingleVehicleServiceFeeRuleEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleServiceFeeRuleEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleServiceFeeRuleEditDto {
    id: string | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    /** 规则编号 */
    ruleCode: string | undefined;
    /** 规则描述 */
    ruleDescribe: string | undefined;
    /** 吨位上限 */
    tonnageUpper: number | undefined;
    /** 吨位下限 */
    tonnageLower: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 提取方式(车数、吨数、纯收、毛收) */
    obtainMode: string | undefined;
    /** 提取标准 */
    obtainStandard: number | undefined;
    /** 审核状态（数据字典维护） */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 是否启用 */
    isActive: boolean | undefined;
    /** 备注 */
    description: string | undefined;
}

export class CreateOrEditSingleVehicleServiceFeeRuleInput implements ICreateOrEditSingleVehicleServiceFeeRuleInput {
    singleVehicleServiceFeeRule: SingleVehicleServiceFeeRuleEditDto | undefined;

    constructor(data?: ICreateOrEditSingleVehicleServiceFeeRuleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.singleVehicleServiceFeeRule = data["singleVehicleServiceFeeRule"] ? SingleVehicleServiceFeeRuleEditDto.fromJS(data["singleVehicleServiceFeeRule"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditSingleVehicleServiceFeeRuleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditSingleVehicleServiceFeeRuleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["singleVehicleServiceFeeRule"] = this.singleVehicleServiceFeeRule ? this.singleVehicleServiceFeeRule.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditSingleVehicleServiceFeeRuleInput {
        const json = this.toJSON();
        let result = new CreateOrEditSingleVehicleServiceFeeRuleInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditSingleVehicleServiceFeeRuleInput {
    singleVehicleServiceFeeRule: SingleVehicleServiceFeeRuleEditDto | undefined;
}

export class ServiceFeeRuleListItem implements IServiceFeeRuleListItem {
    value: string | undefined;
    text: string | undefined;

    constructor(data?: IServiceFeeRuleListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.text = data["text"];
        }
    }

    static fromJS(data: any): ServiceFeeRuleListItem {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceFeeRuleListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        return data; 
    }

    clone(): ServiceFeeRuleListItem {
        const json = this.toJSON();
        let result = new ServiceFeeRuleListItem();
        result.init(json);
        return result;
    }
}

export interface IServiceFeeRuleListItem {
    value: string | undefined;
    text: string | undefined;
}

export class PagedResultDtoOfSingleVehicleServiceFeeSettlementEditDto implements IPagedResultDtoOfSingleVehicleServiceFeeSettlementEditDto {
    totalCount: number | undefined;
    items: SingleVehicleServiceFeeSettlementEditDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSingleVehicleServiceFeeSettlementEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SingleVehicleServiceFeeSettlementEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSingleVehicleServiceFeeSettlementEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSingleVehicleServiceFeeSettlementEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSingleVehicleServiceFeeSettlementEditDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSingleVehicleServiceFeeSettlementEditDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSingleVehicleServiceFeeSettlementEditDto {
    totalCount: number | undefined;
    items: SingleVehicleServiceFeeSettlementEditDto[] | undefined;
}

export class SingleVehicleServiceFeeSettlementEditDto implements ISingleVehicleServiceFeeSettlementEditDto {
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 记账开始日期 */
    accountingDateFrom: moment.Moment | undefined;
    /** 记账结束日期 */
    accountingDateTo: moment.Moment | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    vehicleCount: number | undefined;
    ton: number | undefined;
    fee: number | undefined;

    constructor(data?: ISingleVehicleServiceFeeSettlementEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountingDateFrom = data["accountingDateFrom"] ? moment(data["accountingDateFrom"].toString()) : <any>undefined;
            this.accountingDateTo = data["accountingDateTo"] ? moment(data["accountingDateTo"].toString()) : <any>undefined;
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.vehicleCount = data["vehicleCount"];
            this.ton = data["ton"];
            this.fee = data["fee"];
        }
    }

    static fromJS(data: any): SingleVehicleServiceFeeSettlementEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleServiceFeeSettlementEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountingDateFrom"] = this.accountingDateFrom ? this.accountingDateFrom.toISOString() : <any>undefined;
        data["accountingDateTo"] = this.accountingDateTo ? this.accountingDateTo.toISOString() : <any>undefined;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["vehicleCount"] = this.vehicleCount;
        data["ton"] = this.ton;
        data["fee"] = this.fee;
        return data; 
    }

    clone(): SingleVehicleServiceFeeSettlementEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleServiceFeeSettlementEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleServiceFeeSettlementEditDto {
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 记账开始日期 */
    accountingDateFrom: moment.Moment | undefined;
    /** 记账结束日期 */
    accountingDateTo: moment.Moment | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    vehicleCount: number | undefined;
    ton: number | undefined;
    fee: number | undefined;
}

export class CreateSingleVehicleServiceFeeReportInput implements ICreateSingleVehicleServiceFeeReportInput {
    singleVehicleServiceFeeReports: SingleVehicleServiceFeeSettlementEditDto[] | undefined;

    constructor(data?: ICreateSingleVehicleServiceFeeReportInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["singleVehicleServiceFeeReports"] && data["singleVehicleServiceFeeReports"].constructor === Array) {
                this.singleVehicleServiceFeeReports = [] as any;
                for (let item of data["singleVehicleServiceFeeReports"])
                    this.singleVehicleServiceFeeReports.push(SingleVehicleServiceFeeSettlementEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateSingleVehicleServiceFeeReportInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSingleVehicleServiceFeeReportInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.singleVehicleServiceFeeReports && this.singleVehicleServiceFeeReports.constructor === Array) {
            data["singleVehicleServiceFeeReports"] = [];
            for (let item of this.singleVehicleServiceFeeReports)
                data["singleVehicleServiceFeeReports"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateSingleVehicleServiceFeeReportInput {
        const json = this.toJSON();
        let result = new CreateSingleVehicleServiceFeeReportInput();
        result.init(json);
        return result;
    }
}

export interface ICreateSingleVehicleServiceFeeReportInput {
    singleVehicleServiceFeeReports: SingleVehicleServiceFeeSettlementEditDto[] | undefined;
}

export class PagedResultDtoOfSingleVehicleServiceFeeSettlementListDto implements IPagedResultDtoOfSingleVehicleServiceFeeSettlementListDto {
    totalCount: number | undefined;
    items: SingleVehicleServiceFeeSettlementListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSingleVehicleServiceFeeSettlementListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SingleVehicleServiceFeeSettlementListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSingleVehicleServiceFeeSettlementListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSingleVehicleServiceFeeSettlementListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSingleVehicleServiceFeeSettlementListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSingleVehicleServiceFeeSettlementListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSingleVehicleServiceFeeSettlementListDto {
    totalCount: number | undefined;
    items: SingleVehicleServiceFeeSettlementListDto[] | undefined;
}

export class SingleVehicleServiceFeeSettlementListDto implements ISingleVehicleServiceFeeSettlementListDto {
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 记账开始日期 */
    accountingDateFrom: moment.Moment | undefined;
    /** 记账结束日期 */
    accountingDateTo: moment.Moment | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    vehicleCount: number | undefined;
    ton: number | undefined;
    fee: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ISingleVehicleServiceFeeSettlementListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountingDateFrom = data["accountingDateFrom"] ? moment(data["accountingDateFrom"].toString()) : <any>undefined;
            this.accountingDateTo = data["accountingDateTo"] ? moment(data["accountingDateTo"].toString()) : <any>undefined;
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.vehicleCount = data["vehicleCount"];
            this.ton = data["ton"];
            this.fee = data["fee"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SingleVehicleServiceFeeSettlementListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleServiceFeeSettlementListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountingDateFrom"] = this.accountingDateFrom ? this.accountingDateFrom.toISOString() : <any>undefined;
        data["accountingDateTo"] = this.accountingDateTo ? this.accountingDateTo.toISOString() : <any>undefined;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["vehicleCount"] = this.vehicleCount;
        data["ton"] = this.ton;
        data["fee"] = this.fee;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): SingleVehicleServiceFeeSettlementListDto {
        const json = this.toJSON();
        let result = new SingleVehicleServiceFeeSettlementListDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleServiceFeeSettlementListDto {
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 记账开始日期 */
    accountingDateFrom: moment.Moment | undefined;
    /** 记账结束日期 */
    accountingDateTo: moment.Moment | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    vehicleCount: number | undefined;
    ton: number | undefined;
    fee: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfSingleVehicleTransContractRecordListDto implements IPagedResultDtoOfSingleVehicleTransContractRecordListDto {
    totalCount: number | undefined;
    items: SingleVehicleTransContractRecordListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSingleVehicleTransContractRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SingleVehicleTransContractRecordListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSingleVehicleTransContractRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSingleVehicleTransContractRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSingleVehicleTransContractRecordListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSingleVehicleTransContractRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSingleVehicleTransContractRecordListDto {
    totalCount: number | undefined;
    items: SingleVehicleTransContractRecordListDto[] | undefined;
}

export class SingleVehicleTransContractRecordListDto implements ISingleVehicleTransContractRecordListDto {
    id: string | undefined;
    /** 合同日期 */
    contractDate: moment.Moment | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    customerServiceOfficerName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    /** 车主身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 合同状态（数据字典维护） */
    contractStatus: string | undefined;
    contractStatusText: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
    creationTime: moment.Moment | undefined;
    isHaveAttachment: boolean | undefined;

    constructor(data?: ISingleVehicleTransContractRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contractDate = data["contractDate"] ? moment(data["contractDate"].toString()) : <any>undefined;
            this.organizationUnitId = data["organizationUnitId"];
            this.orgUnitName = data["orgUnitName"];
            this.customerServiceOfficer = data["customerServiceOfficer"];
            this.customerServiceOfficerName = data["customerServiceOfficerName"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.useQualifications = data["useQualifications"];
            this.useQualificationsText = data["useQualificationsText"];
            this.contractStatus = data["contractStatus"];
            this.contractStatusText = data["contractStatusText"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.isHaveAttachment = data["isHaveAttachment"];
        }
    }

    static fromJS(data: any): SingleVehicleTransContractRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleTransContractRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contractDate"] = this.contractDate ? this.contractDate.toISOString() : <any>undefined;
        data["organizationUnitId"] = this.organizationUnitId;
        data["orgUnitName"] = this.orgUnitName;
        data["customerServiceOfficer"] = this.customerServiceOfficer;
        data["customerServiceOfficerName"] = this.customerServiceOfficerName;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["useQualifications"] = this.useQualifications;
        data["useQualificationsText"] = this.useQualificationsText;
        data["contractStatus"] = this.contractStatus;
        data["contractStatusText"] = this.contractStatusText;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["isHaveAttachment"] = this.isHaveAttachment;
        return data; 
    }

    clone(): SingleVehicleTransContractRecordListDto {
        const json = this.toJSON();
        let result = new SingleVehicleTransContractRecordListDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleTransContractRecordListDto {
    id: string | undefined;
    /** 合同日期 */
    contractDate: moment.Moment | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    customerServiceOfficerName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    /** 车主身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 合同状态（数据字典维护） */
    contractStatus: string | undefined;
    contractStatusText: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
    creationTime: moment.Moment | undefined;
    isHaveAttachment: boolean | undefined;
}

export class SingleVehicleTransContractRecordEditDto implements ISingleVehicleTransContractRecordEditDto {
    id: string | undefined;
    /** 合同日期 */
    contractDate: moment.Moment | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    /** 车主身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    /** 合同状态（数据字典维护） */
    contractStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ISingleVehicleTransContractRecordEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.contractDate = data["contractDate"] ? moment(data["contractDate"].toString()) : <any>undefined;
            this.organizationUnitId = data["organizationUnitId"];
            this.customerServiceOfficer = data["customerServiceOfficer"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.useQualifications = data["useQualifications"];
            this.contractStatus = data["contractStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): SingleVehicleTransContractRecordEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleTransContractRecordEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["contractDate"] = this.contractDate ? this.contractDate.toISOString() : <any>undefined;
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerServiceOfficer"] = this.customerServiceOfficer;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["useQualifications"] = this.useQualifications;
        data["contractStatus"] = this.contractStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): SingleVehicleTransContractRecordEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleTransContractRecordEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleTransContractRecordEditDto {
    id: string | undefined;
    /** 合同日期 */
    contractDate: moment.Moment | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    /** 车主身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    /** 合同状态（数据字典维护） */
    contractStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class SingleVehicleTransContractEditDto implements ISingleVehicleTransContractEditDto {
    transportOrderSingleVehicleRecord: SingleVehicleTransContractRecordEditDto | undefined;
    singleVehicleServiceFeeItem: SingleVehicleServiceFeeEditDto[] | undefined;

    constructor(data?: ISingleVehicleTransContractEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportOrderSingleVehicleRecord = data["transportOrderSingleVehicleRecord"] ? SingleVehicleTransContractRecordEditDto.fromJS(data["transportOrderSingleVehicleRecord"]) : <any>undefined;
            if (data["singleVehicleServiceFeeItem"] && data["singleVehicleServiceFeeItem"].constructor === Array) {
                this.singleVehicleServiceFeeItem = [] as any;
                for (let item of data["singleVehicleServiceFeeItem"])
                    this.singleVehicleServiceFeeItem.push(SingleVehicleServiceFeeEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SingleVehicleTransContractEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleTransContractEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportOrderSingleVehicleRecord"] = this.transportOrderSingleVehicleRecord ? this.transportOrderSingleVehicleRecord.toJSON() : <any>undefined;
        if (this.singleVehicleServiceFeeItem && this.singleVehicleServiceFeeItem.constructor === Array) {
            data["singleVehicleServiceFeeItem"] = [];
            for (let item of this.singleVehicleServiceFeeItem)
                data["singleVehicleServiceFeeItem"].push(item.toJSON());
        }
        return data; 
    }

    clone(): SingleVehicleTransContractEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleTransContractEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleTransContractEditDto {
    transportOrderSingleVehicleRecord: SingleVehicleTransContractRecordEditDto | undefined;
    singleVehicleServiceFeeItem: SingleVehicleServiceFeeEditDto[] | undefined;
}

export class SingleVehicleServiceFeeEditDto implements ISingleVehicleServiceFeeEditDto {
    /** Id 主键 */
    id: string | undefined;
    singleVehicleTransContractId: string | undefined;
    effectDate: moment.Moment | undefined;
    singleVehicleServiceFeeRuleId: string | undefined;
    isActive: boolean | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ISingleVehicleServiceFeeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.singleVehicleTransContractId = data["singleVehicleTransContractId"];
            this.effectDate = data["effectDate"] ? moment(data["effectDate"].toString()) : <any>undefined;
            this.singleVehicleServiceFeeRuleId = data["singleVehicleServiceFeeRuleId"];
            this.isActive = data["isActive"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): SingleVehicleServiceFeeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleServiceFeeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["singleVehicleTransContractId"] = this.singleVehicleTransContractId;
        data["effectDate"] = this.effectDate ? this.effectDate.toISOString() : <any>undefined;
        data["singleVehicleServiceFeeRuleId"] = this.singleVehicleServiceFeeRuleId;
        data["isActive"] = this.isActive;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): SingleVehicleServiceFeeEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleServiceFeeEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleServiceFeeEditDto {
    /** Id 主键 */
    id: string | undefined;
    singleVehicleTransContractId: string | undefined;
    effectDate: moment.Moment | undefined;
    singleVehicleServiceFeeRuleId: string | undefined;
    isActive: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class SingleVehicleTransContractApprovalEditDto implements ISingleVehicleTransContractApprovalEditDto {
    transportOrderSingleVehicleRecord: SingleVehicleTransContractRecordEditDto | undefined;

    constructor(data?: ISingleVehicleTransContractApprovalEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportOrderSingleVehicleRecord = data["transportOrderSingleVehicleRecord"] ? SingleVehicleTransContractRecordEditDto.fromJS(data["transportOrderSingleVehicleRecord"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SingleVehicleTransContractApprovalEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleTransContractApprovalEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportOrderSingleVehicleRecord"] = this.transportOrderSingleVehicleRecord ? this.transportOrderSingleVehicleRecord.toJSON() : <any>undefined;
        return data; 
    }

    clone(): SingleVehicleTransContractApprovalEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleTransContractApprovalEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleTransContractApprovalEditDto {
    transportOrderSingleVehicleRecord: SingleVehicleTransContractRecordEditDto | undefined;
}

export class PagedResultDtoOfSingleVehicleServiceFeeListDto implements IPagedResultDtoOfSingleVehicleServiceFeeListDto {
    totalCount: number | undefined;
    items: SingleVehicleServiceFeeListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSingleVehicleServiceFeeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SingleVehicleServiceFeeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSingleVehicleServiceFeeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSingleVehicleServiceFeeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSingleVehicleServiceFeeListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSingleVehicleServiceFeeListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSingleVehicleServiceFeeListDto {
    totalCount: number | undefined;
    items: SingleVehicleServiceFeeListDto[] | undefined;
}

export class SingleVehicleServiceFeeListDto implements ISingleVehicleServiceFeeListDto {
    singleVehicleTransContractId: string | undefined;
    effectDate: moment.Moment | undefined;
    singleVehicleServiceFeeRuleId: string | undefined;
    isActive: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;

    constructor(data?: ISingleVehicleServiceFeeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.singleVehicleTransContractId = data["singleVehicleTransContractId"];
            this.effectDate = data["effectDate"] ? moment(data["effectDate"].toString()) : <any>undefined;
            this.singleVehicleServiceFeeRuleId = data["singleVehicleServiceFeeRuleId"];
            this.isActive = data["isActive"];
            this.remark = data["remark"];
            this.creatorUserId = data["creatorUserId"];
            this.beRecorder = data["beRecorder"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SingleVehicleServiceFeeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleServiceFeeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["singleVehicleTransContractId"] = this.singleVehicleTransContractId;
        data["effectDate"] = this.effectDate ? this.effectDate.toISOString() : <any>undefined;
        data["singleVehicleServiceFeeRuleId"] = this.singleVehicleServiceFeeRuleId;
        data["isActive"] = this.isActive;
        data["remark"] = this.remark;
        data["creatorUserId"] = this.creatorUserId;
        data["beRecorder"] = this.beRecorder;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): SingleVehicleServiceFeeListDto {
        const json = this.toJSON();
        let result = new SingleVehicleServiceFeeListDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleServiceFeeListDto {
    singleVehicleTransContractId: string | undefined;
    effectDate: moment.Moment | undefined;
    singleVehicleServiceFeeRuleId: string | undefined;
    isActive: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfSingleVehicleTransOrderRecordListDto implements IPagedResultDtoOfSingleVehicleTransOrderRecordListDto {
    totalCount: number | undefined;
    items: SingleVehicleTransOrderRecordListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSingleVehicleTransOrderRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SingleVehicleTransOrderRecordListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSingleVehicleTransOrderRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSingleVehicleTransOrderRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSingleVehicleTransOrderRecordListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSingleVehicleTransOrderRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSingleVehicleTransOrderRecordListDto {
    totalCount: number | undefined;
    items: SingleVehicleTransOrderRecordListDto[] | undefined;
}

export class SingleVehicleTransOrderRecordListDto implements ISingleVehicleTransOrderRecordListDto {
    /** Id 主键 */
    id: string | undefined;
    /** 客户运输订单Id */
    customerTransOrderRecordId: string | undefined;
    /** 订单日期 */
    orderDate: moment.Moment | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    organizationUnitIdName: string | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    customerServiceOfficerName: string | undefined;
    /** 客户 */
    customerId: number | undefined;
    customerName: string | undefined;
    /** 发货人 */
    shipper: number | undefined;
    shipperName: string | undefined;
    /** 收货人 */
    receiver: number | undefined;
    receiverName: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    recordStatus: string | undefined;
    recordStatusText: string | undefined;
    /** 订单状态说明 */
    statusRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    unloadPlaceTypeText: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    cargoText: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    transportTypeText: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    taskAreaText: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    transportDistanceText: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 单车运价 */
    singleTruckPrice: number | undefined;
    /** 单车计价方式（数据字典维护）按车数、按吨数等 */
    vehiclesPricingMethod: string | undefined;
    vehiclesPricingMethodText: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    payedModeText: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
    creationTime: moment.Moment | undefined;

    constructor(data?: ISingleVehicleTransOrderRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.customerTransOrderRecordId = data["customerTransOrderRecordId"];
            this.orderDate = data["orderDate"] ? moment(data["orderDate"].toString()) : <any>undefined;
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitIdName = data["organizationUnitIdName"];
            this.customerServiceOfficer = data["customerServiceOfficer"];
            this.customerServiceOfficerName = data["customerServiceOfficerName"];
            this.customerId = data["customerId"];
            this.customerName = data["customerName"];
            this.shipper = data["shipper"];
            this.shipperName = data["shipperName"];
            this.receiver = data["receiver"];
            this.receiverName = data["receiverName"];
            this.useQualifications = data["useQualifications"];
            this.useQualificationsText = data["useQualificationsText"];
            this.recordStatus = data["recordStatus"];
            this.recordStatusText = data["recordStatusText"];
            this.statusRemark = data["statusRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceIdName = data["loadPlaceIdName"];
            this.loadPlaceType = data["loadPlaceType"];
            this.loadPlaceTypeText = data["loadPlaceTypeText"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.unloadPlaceType = data["unloadPlaceType"];
            this.unloadPlaceTypeText = data["unloadPlaceTypeText"];
            this.cargo = data["cargo"];
            this.cargoText = data["cargoText"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.cargoVarietyIdName = data["cargoVarietyIdName"];
            this.isBelongMy = data["isBelongMy"];
            this.estimatedStartDate = data["estimatedStartDate"] ? moment(data["estimatedStartDate"].toString()) : <any>undefined;
            this.transportType = data["transportType"];
            this.transportTypeText = data["transportTypeText"];
            this.taskArea = data["taskArea"];
            this.taskAreaText = data["taskAreaText"];
            this.transportDistance = data["transportDistance"];
            this.transportDistanceText = data["transportDistanceText"];
            this.shipName = data["shipName"];
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.singleTruckPrice = data["singleTruckPrice"];
            this.vehiclesPricingMethod = data["vehiclesPricingMethod"];
            this.vehiclesPricingMethodText = data["vehiclesPricingMethodText"];
            this.payedMode = data["payedMode"];
            this.payedModeText = data["payedModeText"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxReceiptTypeText = data["taxReceiptTypeText"];
            this.taxRate = data["taxRate"];
            this.isHaveTax = data["isHaveTax"];
            this.remark = data["remark"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SingleVehicleTransOrderRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleTransOrderRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["customerTransOrderRecordId"] = this.customerTransOrderRecordId;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitIdName"] = this.organizationUnitIdName;
        data["customerServiceOfficer"] = this.customerServiceOfficer;
        data["customerServiceOfficerName"] = this.customerServiceOfficerName;
        data["customerId"] = this.customerId;
        data["customerName"] = this.customerName;
        data["shipper"] = this.shipper;
        data["shipperName"] = this.shipperName;
        data["receiver"] = this.receiver;
        data["receiverName"] = this.receiverName;
        data["useQualifications"] = this.useQualifications;
        data["useQualificationsText"] = this.useQualificationsText;
        data["recordStatus"] = this.recordStatus;
        data["recordStatusText"] = this.recordStatusText;
        data["statusRemark"] = this.statusRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceIdName"] = this.loadPlaceIdName;
        data["loadPlaceType"] = this.loadPlaceType;
        data["loadPlaceTypeText"] = this.loadPlaceTypeText;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["unloadPlaceType"] = this.unloadPlaceType;
        data["unloadPlaceTypeText"] = this.unloadPlaceTypeText;
        data["cargo"] = this.cargo;
        data["cargoText"] = this.cargoText;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["cargoVarietyIdName"] = this.cargoVarietyIdName;
        data["isBelongMy"] = this.isBelongMy;
        data["estimatedStartDate"] = this.estimatedStartDate ? this.estimatedStartDate.toISOString() : <any>undefined;
        data["transportType"] = this.transportType;
        data["transportTypeText"] = this.transportTypeText;
        data["taskArea"] = this.taskArea;
        data["taskAreaText"] = this.taskAreaText;
        data["transportDistance"] = this.transportDistance;
        data["transportDistanceText"] = this.transportDistanceText;
        data["shipName"] = this.shipName;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["singleTruckPrice"] = this.singleTruckPrice;
        data["vehiclesPricingMethod"] = this.vehiclesPricingMethod;
        data["vehiclesPricingMethodText"] = this.vehiclesPricingMethodText;
        data["payedMode"] = this.payedMode;
        data["payedModeText"] = this.payedModeText;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxReceiptTypeText"] = this.taxReceiptTypeText;
        data["taxRate"] = this.taxRate;
        data["isHaveTax"] = this.isHaveTax;
        data["remark"] = this.remark;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): SingleVehicleTransOrderRecordListDto {
        const json = this.toJSON();
        let result = new SingleVehicleTransOrderRecordListDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleTransOrderRecordListDto {
    /** Id 主键 */
    id: string | undefined;
    /** 客户运输订单Id */
    customerTransOrderRecordId: string | undefined;
    /** 订单日期 */
    orderDate: moment.Moment | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    organizationUnitIdName: string | undefined;
    /** 客户服务负责人 */
    customerServiceOfficer: string | undefined;
    customerServiceOfficerName: string | undefined;
    /** 客户 */
    customerId: number | undefined;
    customerName: string | undefined;
    /** 发货人 */
    shipper: number | undefined;
    shipperName: string | undefined;
    /** 收货人 */
    receiver: number | undefined;
    receiverName: string | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    useQualificationsText: string | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    recordStatus: string | undefined;
    recordStatusText: string | undefined;
    /** 订单状态说明 */
    statusRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    loadPlaceTypeText: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    unloadPlaceTypeText: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    cargoText: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    transportTypeText: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    taskAreaText: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    transportDistanceText: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 单车运价 */
    singleTruckPrice: number | undefined;
    /** 单车计价方式（数据字典维护）按车数、按吨数等 */
    vehiclesPricingMethod: string | undefined;
    vehiclesPricingMethodText: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    payedModeText: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    taxReceiptTypeText: string | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
    creationTime: moment.Moment | undefined;
}

export class SingleVehicleTransOrderRecordEditDto implements ISingleVehicleTransOrderRecordEditDto {
    /** Id 主键 */
    id: string | undefined;
    /** 客户运输订单Id */
    customerTransOrderRecordId: string | undefined;
    /** 订单日期 */
    orderDate: moment.Moment | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    /** 客户服务负责人(组织机构) */
    customerServiceOfficer: string | undefined;
    /** 客户 */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    recordStatus: string | undefined;
    /** 订单状态说明 */
    statusRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 单车运价 */
    singleTruckPrice: number | undefined;
    /** 单车计价方式（数据字典维护）按车数、按吨数等 */
    vehiclesPricingMethod: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ISingleVehicleTransOrderRecordEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.customerTransOrderRecordId = data["customerTransOrderRecordId"];
            this.orderDate = data["orderDate"] ? moment(data["orderDate"].toString()) : <any>undefined;
            this.organizationUnitId = data["organizationUnitId"];
            this.customerServiceOfficer = data["customerServiceOfficer"];
            this.customerId = data["customerId"];
            this.shipper = data["shipper"];
            this.receiver = data["receiver"];
            this.useQualifications = data["useQualifications"];
            this.recordStatus = data["recordStatus"];
            this.statusRemark = data["statusRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceType = data["loadPlaceType"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceType = data["unloadPlaceType"];
            this.cargo = data["cargo"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.isBelongMy = data["isBelongMy"];
            this.estimatedStartDate = data["estimatedStartDate"] ? moment(data["estimatedStartDate"].toString()) : <any>undefined;
            this.transportType = data["transportType"];
            this.taskArea = data["taskArea"];
            this.transportDistance = data["transportDistance"];
            this.shipName = data["shipName"];
            this.expectedTotalTon = data["expectedTotalTon"];
            this.expectedSingleTruckTon = data["expectedSingleTruckTon"];
            this.expectedTruckAmount = data["expectedTruckAmount"];
            this.singleTruckPrice = data["singleTruckPrice"];
            this.vehiclesPricingMethod = data["vehiclesPricingMethod"];
            this.payedMode = data["payedMode"];
            this.taxReceiptType = data["taxReceiptType"];
            this.taxRate = data["taxRate"];
            this.isHaveTax = data["isHaveTax"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): SingleVehicleTransOrderRecordEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleTransOrderRecordEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["customerTransOrderRecordId"] = this.customerTransOrderRecordId;
        data["orderDate"] = this.orderDate ? this.orderDate.toISOString() : <any>undefined;
        data["organizationUnitId"] = this.organizationUnitId;
        data["customerServiceOfficer"] = this.customerServiceOfficer;
        data["customerId"] = this.customerId;
        data["shipper"] = this.shipper;
        data["receiver"] = this.receiver;
        data["useQualifications"] = this.useQualifications;
        data["recordStatus"] = this.recordStatus;
        data["statusRemark"] = this.statusRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceType"] = this.loadPlaceType;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceType"] = this.unloadPlaceType;
        data["cargo"] = this.cargo;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["isBelongMy"] = this.isBelongMy;
        data["estimatedStartDate"] = this.estimatedStartDate ? this.estimatedStartDate.toISOString() : <any>undefined;
        data["transportType"] = this.transportType;
        data["taskArea"] = this.taskArea;
        data["transportDistance"] = this.transportDistance;
        data["shipName"] = this.shipName;
        data["expectedTotalTon"] = this.expectedTotalTon;
        data["expectedSingleTruckTon"] = this.expectedSingleTruckTon;
        data["expectedTruckAmount"] = this.expectedTruckAmount;
        data["singleTruckPrice"] = this.singleTruckPrice;
        data["vehiclesPricingMethod"] = this.vehiclesPricingMethod;
        data["payedMode"] = this.payedMode;
        data["taxReceiptType"] = this.taxReceiptType;
        data["taxRate"] = this.taxRate;
        data["isHaveTax"] = this.isHaveTax;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): SingleVehicleTransOrderRecordEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleTransOrderRecordEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleTransOrderRecordEditDto {
    /** Id 主键 */
    id: string | undefined;
    /** 客户运输订单Id */
    customerTransOrderRecordId: string | undefined;
    /** 订单日期 */
    orderDate: moment.Moment | undefined;
    /** 业务单位（组织树） */
    organizationUnitId: number | undefined;
    /** 客户服务负责人(组织机构) */
    customerServiceOfficer: string | undefined;
    /** 客户 */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 使用资质（数据字典维护） */
    useQualifications: string | undefined;
    /** 订单状态（数据字典维护）未确认、确认退回、确认通过、已作废等 */
    recordStatus: string | undefined;
    /** 订单状态说明 */
    statusRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 装车类型（仓库、码头、煤场、采坑、筒仓、其他） */
    loadPlaceType: string | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 卸地类型（仓库、码头、煤场、采坑、筒仓、其他） */
    unloadPlaceType: string | undefined;
    /** 货类 */
    cargo: string | undefined;
    /** 货品-物料 */
    cargoVarietyId: number | undefined;
    /** 是否独家承运 */
    isBelongMy: boolean | undefined;
    /** 预计作业日期 */
    estimatedStartDate: moment.Moment | undefined;
    /** 运输类型 来源:数据字典 */
    transportType: string | undefined;
    /** 作业区域 来源:数据字典 */
    taskArea: string | undefined;
    /** 运输距离 来源:数据字典 */
    transportDistance: string | undefined;
    /** 船名 */
    shipName: string | undefined;
    /** 预计总吨数 */
    expectedTotalTon: number | undefined;
    /** 预计单车吨数 */
    expectedSingleTruckTon: number | undefined;
    /** 预计总车数 */
    expectedTruckAmount: number | undefined;
    /** 单车运价 */
    singleTruckPrice: number | undefined;
    /** 单车计价方式（数据字典维护）按车数、按吨数等 */
    vehiclesPricingMethod: string | undefined;
    /** 付款方式（数据字典维护）-结算方式（现金、预付、承兑、其他） */
    payedMode: string | undefined;
    /** 开票类型（不开票、运输类增值税发票） */
    taxReceiptType: string | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class SingleVehicleTransOrderEditDto implements ISingleVehicleTransOrderEditDto {
    transportOrderSingleVehicleRecord: SingleVehicleTransOrderRecordEditDto | undefined;

    constructor(data?: ISingleVehicleTransOrderEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportOrderSingleVehicleRecord = data["transportOrderSingleVehicleRecord"] ? SingleVehicleTransOrderRecordEditDto.fromJS(data["transportOrderSingleVehicleRecord"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SingleVehicleTransOrderEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleTransOrderEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportOrderSingleVehicleRecord"] = this.transportOrderSingleVehicleRecord ? this.transportOrderSingleVehicleRecord.toJSON() : <any>undefined;
        return data; 
    }

    clone(): SingleVehicleTransOrderEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleTransOrderEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleTransOrderEditDto {
    transportOrderSingleVehicleRecord: SingleVehicleTransOrderRecordEditDto | undefined;
}

export class SingleVehicleTransOrderApprovalEditDto implements ISingleVehicleTransOrderApprovalEditDto {
    transportOrderSingleVehicleRecord: SingleVehicleTransOrderRecordEditDto | undefined;

    constructor(data?: ISingleVehicleTransOrderApprovalEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportOrderSingleVehicleRecord = data["transportOrderSingleVehicleRecord"] ? SingleVehicleTransOrderRecordEditDto.fromJS(data["transportOrderSingleVehicleRecord"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SingleVehicleTransOrderApprovalEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleTransOrderApprovalEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportOrderSingleVehicleRecord"] = this.transportOrderSingleVehicleRecord ? this.transportOrderSingleVehicleRecord.toJSON() : <any>undefined;
        return data; 
    }

    clone(): SingleVehicleTransOrderApprovalEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleTransOrderApprovalEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleTransOrderApprovalEditDto {
    transportOrderSingleVehicleRecord: SingleVehicleTransOrderRecordEditDto | undefined;
}

export class PagedResultDtoOfSupplierListDto implements IPagedResultDtoOfSupplierListDto {
    totalCount: number | undefined;
    items: SupplierListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSupplierListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SupplierListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSupplierListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSupplierListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSupplierListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSupplierListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSupplierListDto {
    totalCount: number | undefined;
    items: SupplierListDto[] | undefined;
}

export class SupplierListDto implements ISupplierListDto {
    code: string | undefined;
    name: string | undefined;
    type: string | undefined;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    description: string | undefined;
    organizationUnitName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ISupplierListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.type = data["type"];
            this.isInner = data["isInner"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.taxRegistrationNumber = data["taxRegistrationNumber"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.unifiedSocialCreditCode = data["unifiedSocialCreditCode"];
            this.organizationCodeCertificate = data["organizationCodeCertificate"];
            this.businessLicence = data["businessLicence"];
            this.taxpayerIdentityNumber = data["taxpayerIdentityNumber"];
            this.bankAccount = data["bankAccount"];
            this.legalPerson = data["legalPerson"];
            this.legalResidentIdentity = data["legalResidentIdentity"];
            this.isEnable = data["isEnable"];
            this.description = data["description"];
            this.organizationUnitName = data["organizationUnitName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SupplierListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupplierListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["isInner"] = this.isInner;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["taxRegistrationNumber"] = this.taxRegistrationNumber;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["unifiedSocialCreditCode"] = this.unifiedSocialCreditCode;
        data["organizationCodeCertificate"] = this.organizationCodeCertificate;
        data["businessLicence"] = this.businessLicence;
        data["taxpayerIdentityNumber"] = this.taxpayerIdentityNumber;
        data["bankAccount"] = this.bankAccount;
        data["legalPerson"] = this.legalPerson;
        data["legalResidentIdentity"] = this.legalResidentIdentity;
        data["isEnable"] = this.isEnable;
        data["description"] = this.description;
        data["organizationUnitName"] = this.organizationUnitName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): SupplierListDto {
        const json = this.toJSON();
        let result = new SupplierListDto();
        result.init(json);
        return result;
    }
}

export interface ISupplierListDto {
    code: string | undefined;
    name: string | undefined;
    type: string | undefined;
    /** 是否为内部客户 */
    isInner: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    description: string | undefined;
    organizationUnitName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class ListResultDtoOfSupplierListDto implements IListResultDtoOfSupplierListDto {
    items: SupplierListDto[] | undefined;

    constructor(data?: IListResultDtoOfSupplierListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SupplierListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfSupplierListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfSupplierListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfSupplierListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfSupplierListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfSupplierListDto {
    items: SupplierListDto[] | undefined;
}

export class GetSupplierForEditOutput implements IGetSupplierForEditOutput {
    supplier: SupplierEditDto | undefined;

    constructor(data?: IGetSupplierForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.supplier = data["supplier"] ? SupplierEditDto.fromJS(data["supplier"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSupplierForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetSupplierForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["supplier"] = this.supplier ? this.supplier.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetSupplierForEditOutput {
        const json = this.toJSON();
        let result = new GetSupplierForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetSupplierForEditOutput {
    supplier: SupplierEditDto | undefined;
}

export class SupplierEditDto implements ISupplierEditDto {
    id: number | undefined;
    organizationUnitId: number | undefined;
    code: string;
    name: string;
    type: string;
    /** 是否为内部供应商 */
    isInner: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 备注 */
    description: string | undefined;

    constructor(data?: ISupplierEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.code = data["code"];
            this.name = data["name"];
            this.type = data["type"];
            this.isInner = data["isInner"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.taxRegistrationNumber = data["taxRegistrationNumber"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.unifiedSocialCreditCode = data["unifiedSocialCreditCode"];
            this.organizationCodeCertificate = data["organizationCodeCertificate"];
            this.businessLicence = data["businessLicence"];
            this.taxpayerIdentityNumber = data["taxpayerIdentityNumber"];
            this.bankAccount = data["bankAccount"];
            this.legalPerson = data["legalPerson"];
            this.legalResidentIdentity = data["legalResidentIdentity"];
            this.isEnable = data["isEnable"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): SupplierEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupplierEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["isInner"] = this.isInner;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["taxRegistrationNumber"] = this.taxRegistrationNumber;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["unifiedSocialCreditCode"] = this.unifiedSocialCreditCode;
        data["organizationCodeCertificate"] = this.organizationCodeCertificate;
        data["businessLicence"] = this.businessLicence;
        data["taxpayerIdentityNumber"] = this.taxpayerIdentityNumber;
        data["bankAccount"] = this.bankAccount;
        data["legalPerson"] = this.legalPerson;
        data["legalResidentIdentity"] = this.legalResidentIdentity;
        data["isEnable"] = this.isEnable;
        data["description"] = this.description;
        return data; 
    }

    clone(): SupplierEditDto {
        const json = this.toJSON();
        let result = new SupplierEditDto();
        result.init(json);
        return result;
    }
}

export interface ISupplierEditDto {
    id: number | undefined;
    organizationUnitId: number | undefined;
    code: string;
    name: string;
    type: string;
    /** 是否为内部供应商 */
    isInner: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 备注 */
    description: string | undefined;
}

export class CreateOrEditSupplierInput implements ICreateOrEditSupplierInput {
    supplier: SupplierEditDto | undefined;

    constructor(data?: ICreateOrEditSupplierInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.supplier = data["supplier"] ? SupplierEditDto.fromJS(data["supplier"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditSupplierInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditSupplierInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["supplier"] = this.supplier ? this.supplier.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditSupplierInput {
        const json = this.toJSON();
        let result = new CreateOrEditSupplierInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditSupplierInput {
    supplier: SupplierEditDto | undefined;
}

export class PagedResultDtoOfSupplierThirdPartyListDto implements IPagedResultDtoOfSupplierThirdPartyListDto {
    totalCount: number | undefined;
    items: SupplierThirdPartyListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSupplierThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SupplierThirdPartyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSupplierThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSupplierThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSupplierThirdPartyListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSupplierThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSupplierThirdPartyListDto {
    totalCount: number | undefined;
    items: SupplierThirdPartyListDto[] | undefined;
}

export class SupplierThirdPartyListDto implements ISupplierThirdPartyListDto {
    thirdPartyCode: string | undefined;
    /** 客户号 */
    supplierId: number | undefined;
    supplierName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ISupplierThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartyCode = data["thirdPartyCode"];
            this.supplierId = data["supplierId"];
            this.supplierName = data["supplierName"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SupplierThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupplierThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["supplierId"] = this.supplierId;
        data["supplierName"] = this.supplierName;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): SupplierThirdPartyListDto {
        const json = this.toJSON();
        let result = new SupplierThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface ISupplierThirdPartyListDto {
    thirdPartyCode: string | undefined;
    /** 客户号 */
    supplierId: number | undefined;
    supplierName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class SupplierThirdPartyEditDto implements ISupplierThirdPartyEditDto {
    id: string | undefined;
    /** 第三方组织机构号 */
    thirdPartyCode: string;
    /** 客户号 */
    supplierId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;

    constructor(data?: ISupplierThirdPartyEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.supplierId = data["supplierId"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
        }
    }

    static fromJS(data: any): SupplierThirdPartyEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SupplierThirdPartyEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["supplierId"] = this.supplierId;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        return data; 
    }

    clone(): SupplierThirdPartyEditDto {
        const json = this.toJSON();
        let result = new SupplierThirdPartyEditDto();
        result.init(json);
        return result;
    }
}

export interface ISupplierThirdPartyEditDto {
    id: string | undefined;
    /** 第三方组织机构号 */
    thirdPartyCode: string;
    /** 客户号 */
    supplierId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;
}

export class PagedResultDtoOfSystemThirdPartyListDto implements IPagedResultDtoOfSystemThirdPartyListDto {
    totalCount: number | undefined;
    items: SystemThirdPartyListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSystemThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SystemThirdPartyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSystemThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSystemThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSystemThirdPartyListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSystemThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSystemThirdPartyListDto {
    totalCount: number | undefined;
    items: SystemThirdPartyListDto[] | undefined;
}

export class SystemThirdPartyListDto implements ISystemThirdPartyListDto {
    /** 编号 */
    code: string | undefined;
    /** 第三方编号 */
    thirdParCode: string | undefined;
    thirdPartySystem: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ISystemThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.thirdParCode = data["thirdParCode"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.isActive = data["isActive"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SystemThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SystemThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["thirdParCode"] = this.thirdParCode;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["isActive"] = this.isActive;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): SystemThirdPartyListDto {
        const json = this.toJSON();
        let result = new SystemThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface ISystemThirdPartyListDto {
    /** 编号 */
    code: string | undefined;
    /** 第三方编号 */
    thirdParCode: string | undefined;
    thirdPartySystem: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class SystemThirdPartyEditDto implements ISystemThirdPartyEditDto {
    id: string | undefined;
    /** 编号 */
    code: string;
    /** 第三方编号 */
    thirdParCode: string;
    thirdPartySystem: string;
    /** 激活状态 */
    isActive: boolean;

    constructor(data?: ISystemThirdPartyEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.thirdParCode = data["thirdParCode"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): SystemThirdPartyEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SystemThirdPartyEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["thirdParCode"] = this.thirdParCode;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["isActive"] = this.isActive;
        return data; 
    }

    clone(): SystemThirdPartyEditDto {
        const json = this.toJSON();
        let result = new SystemThirdPartyEditDto();
        result.init(json);
        return result;
    }
}

export interface ISystemThirdPartyEditDto {
    id: string | undefined;
    /** 编号 */
    code: string;
    /** 第三方编号 */
    thirdParCode: string;
    thirdPartySystem: string;
    /** 激活状态 */
    isActive: boolean;
}

export class SystemListItem implements ISystemListItem {
    value: string | undefined;
    text: string | undefined;

    constructor(data?: ISystemListItem) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.text = data["text"];
        }
    }

    static fromJS(data: any): SystemListItem {
        data = typeof data === 'object' ? data : {};
        let result = new SystemListItem();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        return data; 
    }

    clone(): SystemListItem {
        const json = this.toJSON();
        let result = new SystemListItem();
        result.init(json);
        return result;
    }
}

export interface ISystemListItem {
    value: string | undefined;
    text: string | undefined;
}

export class PagedResultDtoOfTenantDto implements IPagedResultDtoOfTenantDto {
    totalCount: number | undefined;
    items: TenantDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TenantDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTenantDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTenantDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTenantDto {
    totalCount: number | undefined;
    items: TenantDto[] | undefined;
}

export class TenantDto implements ITenantDto {
    tenancyName: string;
    name: string;
    isActive: boolean | undefined;
    /** 分配的租户权限 */
    grantedPermissionNames: string[] | undefined;
    id: number | undefined;

    constructor(data?: ITenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.isActive = data["isActive"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new TenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["isActive"] = this.isActive;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        data["id"] = this.id;
        return data; 
    }

    clone(): TenantDto {
        const json = this.toJSON();
        let result = new TenantDto();
        result.init(json);
        return result;
    }
}

export interface ITenantDto {
    tenancyName: string;
    name: string;
    isActive: boolean | undefined;
    /** 分配的租户权限 */
    grantedPermissionNames: string[] | undefined;
    id: number | undefined;
}

export class CreateTenantDto implements ICreateTenantDto {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    connectionString: string | undefined;
    isActive: boolean | undefined;
    /** 分配的租户权限 */
    grantedPermissionNames: string[] | undefined;

    constructor(data?: ICreateTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.adminEmailAddress = data["adminEmailAddress"];
            this.connectionString = data["connectionString"];
            this.isActive = data["isActive"];
            if (data["grantedPermissionNames"] && data["grantedPermissionNames"].constructor === Array) {
                this.grantedPermissionNames = [] as any;
                for (let item of data["grantedPermissionNames"])
                    this.grantedPermissionNames.push(item);
            }
        }
    }

    static fromJS(data: any): CreateTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["adminEmailAddress"] = this.adminEmailAddress;
        data["connectionString"] = this.connectionString;
        data["isActive"] = this.isActive;
        if (this.grantedPermissionNames && this.grantedPermissionNames.constructor === Array) {
            data["grantedPermissionNames"] = [];
            for (let item of this.grantedPermissionNames)
                data["grantedPermissionNames"].push(item);
        }
        return data; 
    }

    clone(): CreateTenantDto {
        const json = this.toJSON();
        let result = new CreateTenantDto();
        result.init(json);
        return result;
    }
}

export interface ICreateTenantDto {
    tenancyName: string;
    name: string;
    adminEmailAddress: string;
    connectionString: string | undefined;
    isActive: boolean | undefined;
    /** 分配的租户权限 */
    grantedPermissionNames: string[] | undefined;
}

export class PagedResultDtoOfTimerTaskConfigListDto implements IPagedResultDtoOfTimerTaskConfigListDto {
    totalCount: number | undefined;
    items: TimerTaskConfigListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTimerTaskConfigListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TimerTaskConfigListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTimerTaskConfigListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTimerTaskConfigListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTimerTaskConfigListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTimerTaskConfigListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTimerTaskConfigListDto {
    totalCount: number | undefined;
    items: TimerTaskConfigListDto[] | undefined;
}

export class TimerTaskConfigListDto implements ITimerTaskConfigListDto {
    isActive: boolean | undefined;
    name: string | undefined;
    cronExpression: string | undefined;
    executionFunction: string | undefined;
    id: string | undefined;

    constructor(data?: ITimerTaskConfigListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isActive = data["isActive"];
            this.name = data["name"];
            this.cronExpression = data["cronExpression"];
            this.executionFunction = data["executionFunction"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TimerTaskConfigListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TimerTaskConfigListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["cronExpression"] = this.cronExpression;
        data["executionFunction"] = this.executionFunction;
        data["id"] = this.id;
        return data; 
    }

    clone(): TimerTaskConfigListDto {
        const json = this.toJSON();
        let result = new TimerTaskConfigListDto();
        result.init(json);
        return result;
    }
}

export interface ITimerTaskConfigListDto {
    isActive: boolean | undefined;
    name: string | undefined;
    cronExpression: string | undefined;
    executionFunction: string | undefined;
    id: string | undefined;
}

export class TimerTaskConfigEditDto implements ITimerTaskConfigEditDto {
    id: string | undefined;
    isActive: boolean | undefined;
    name: string | undefined;
    cronExpression: string | undefined;
    executionFunction: string | undefined;

    constructor(data?: ITimerTaskConfigEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.isActive = data["isActive"];
            this.name = data["name"];
            this.cronExpression = data["cronExpression"];
            this.executionFunction = data["executionFunction"];
        }
    }

    static fromJS(data: any): TimerTaskConfigEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TimerTaskConfigEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["isActive"] = this.isActive;
        data["name"] = this.name;
        data["cronExpression"] = this.cronExpression;
        data["executionFunction"] = this.executionFunction;
        return data; 
    }

    clone(): TimerTaskConfigEditDto {
        const json = this.toJSON();
        let result = new TimerTaskConfigEditDto();
        result.init(json);
        return result;
    }
}

export interface ITimerTaskConfigEditDto {
    id: string | undefined;
    isActive: boolean | undefined;
    name: string | undefined;
    cronExpression: string | undefined;
    executionFunction: string | undefined;
}

export class AuthenticateModel implements IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    rememberClient: boolean | undefined;

    constructor(data?: IAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userNameOrEmailAddress = data["userNameOrEmailAddress"];
            this.password = data["password"];
            this.rememberClient = data["rememberClient"];
        }
    }

    static fromJS(data: any): AuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userNameOrEmailAddress"] = this.userNameOrEmailAddress;
        data["password"] = this.password;
        data["rememberClient"] = this.rememberClient;
        return data; 
    }

    clone(): AuthenticateModel {
        const json = this.toJSON();
        let result = new AuthenticateModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateModel {
    userNameOrEmailAddress: string;
    password: string;
    rememberClient: boolean | undefined;
}

export class AuthenticateResultModel implements IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number | undefined;
    userId: number | undefined;

    constructor(data?: IAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): AuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        return data; 
    }

    clone(): AuthenticateResultModel {
        const json = this.toJSON();
        let result = new AuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number | undefined;
    userId: number | undefined;
}

export class ExternalLoginProviderInfoModel implements IExternalLoginProviderInfoModel {
    name: string | undefined;
    clientId: string | undefined;

    constructor(data?: IExternalLoginProviderInfoModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.clientId = data["clientId"];
        }
    }

    static fromJS(data: any): ExternalLoginProviderInfoModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalLoginProviderInfoModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["clientId"] = this.clientId;
        return data; 
    }

    clone(): ExternalLoginProviderInfoModel {
        const json = this.toJSON();
        let result = new ExternalLoginProviderInfoModel();
        result.init(json);
        return result;
    }
}

export interface IExternalLoginProviderInfoModel {
    name: string | undefined;
    clientId: string | undefined;
}

export class ExternalAuthenticateModel implements IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;

    constructor(data?: IExternalAuthenticateModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.authProvider = data["authProvider"];
            this.providerKey = data["providerKey"];
            this.providerAccessCode = data["providerAccessCode"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authProvider"] = this.authProvider;
        data["providerKey"] = this.providerKey;
        data["providerAccessCode"] = this.providerAccessCode;
        return data; 
    }

    clone(): ExternalAuthenticateModel {
        const json = this.toJSON();
        let result = new ExternalAuthenticateModel();
        result.init(json);
        return result;
    }
}

export interface IExternalAuthenticateModel {
    authProvider: string;
    providerKey: string;
    providerAccessCode: string;
}

export class ExternalAuthenticateResultModel implements IExternalAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number | undefined;
    waitingForActivation: boolean | undefined;

    constructor(data?: IExternalAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.waitingForActivation = data["waitingForActivation"];
        }
    }

    static fromJS(data: any): ExternalAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new ExternalAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["waitingForActivation"] = this.waitingForActivation;
        return data; 
    }

    clone(): ExternalAuthenticateResultModel {
        const json = this.toJSON();
        let result = new ExternalAuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IExternalAuthenticateResultModel {
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number | undefined;
    waitingForActivation: boolean | undefined;
}

export class PagedResultDtoOfTransportDataValidScopeSettingListDto implements IPagedResultDtoOfTransportDataValidScopeSettingListDto {
    totalCount: number | undefined;
    items: TransportDataValidScopeSettingListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportDataValidScopeSettingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportDataValidScopeSettingListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportDataValidScopeSettingListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportDataValidScopeSettingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportDataValidScopeSettingListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportDataValidScopeSettingListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportDataValidScopeSettingListDto {
    totalCount: number | undefined;
    items: TransportDataValidScopeSettingListDto[] | undefined;
}

export class TransportDataValidScopeSettingListDto implements ITransportDataValidScopeSettingListDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 业务单位-名称 */
    organizationUnitName: string | undefined;
    /** 应用范围 */
    applyScope: string | undefined;
    /** 应用范围-文本 */
    applyScopeText: string | undefined;
    /** 数据类型 */
    dataType: TransportDataValidScopeSettingListDtoDataType | undefined;
    /** 下限值 */
    lowerLimit: number | undefined;
    /** 上限值 */
    upperLimit: number | undefined;
    /** 启用状态 */
    isActive: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
    id: string | undefined;

    constructor(data?: ITransportDataValidScopeSettingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.applyScope = data["applyScope"];
            this.applyScopeText = data["applyScopeText"];
            this.dataType = data["dataType"];
            this.lowerLimit = data["lowerLimit"];
            this.upperLimit = data["upperLimit"];
            this.isActive = data["isActive"];
            this.remark = data["remark"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportDataValidScopeSettingListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportDataValidScopeSettingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["applyScope"] = this.applyScope;
        data["applyScopeText"] = this.applyScopeText;
        data["dataType"] = this.dataType;
        data["lowerLimit"] = this.lowerLimit;
        data["upperLimit"] = this.upperLimit;
        data["isActive"] = this.isActive;
        data["remark"] = this.remark;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportDataValidScopeSettingListDto {
        const json = this.toJSON();
        let result = new TransportDataValidScopeSettingListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportDataValidScopeSettingListDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 业务单位-名称 */
    organizationUnitName: string | undefined;
    /** 应用范围 */
    applyScope: string | undefined;
    /** 应用范围-文本 */
    applyScopeText: string | undefined;
    /** 数据类型 */
    dataType: TransportDataValidScopeSettingListDtoDataType | undefined;
    /** 下限值 */
    lowerLimit: number | undefined;
    /** 上限值 */
    upperLimit: number | undefined;
    /** 启用状态 */
    isActive: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
    id: string | undefined;
}

export class TransportDataValidScopeSettingEditDto implements ITransportDataValidScopeSettingEditDto {
    id: string | undefined;
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 应用范围 */
    applyScope: string | undefined;
    /** 数据类型 */
    dataType: TransportDataValidScopeSettingEditDtoDataType | undefined;
    /** 下限值 */
    lowerLimit: number | undefined;
    /** 上限值 */
    upperLimit: number | undefined;
    /** 启用状态 */
    isActive: boolean | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: ITransportDataValidScopeSettingEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.applyScope = data["applyScope"];
            this.dataType = data["dataType"];
            this.lowerLimit = data["lowerLimit"];
            this.upperLimit = data["upperLimit"];
            this.isActive = data["isActive"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): TransportDataValidScopeSettingEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportDataValidScopeSettingEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["applyScope"] = this.applyScope;
        data["dataType"] = this.dataType;
        data["lowerLimit"] = this.lowerLimit;
        data["upperLimit"] = this.upperLimit;
        data["isActive"] = this.isActive;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): TransportDataValidScopeSettingEditDto {
        const json = this.toJSON();
        let result = new TransportDataValidScopeSettingEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportDataValidScopeSettingEditDto {
    id: string | undefined;
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 应用范围 */
    applyScope: string | undefined;
    /** 数据类型 */
    dataType: TransportDataValidScopeSettingEditDtoDataType | undefined;
    /** 下限值 */
    lowerLimit: number | undefined;
    /** 上限值 */
    upperLimit: number | undefined;
    /** 启用状态 */
    isActive: boolean | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class PagedResultDtoOfTransportMeteringListDto implements IPagedResultDtoOfTransportMeteringListDto {
    totalCount: number | undefined;
    items: TransportMeteringListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportMeteringListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportMeteringListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportMeteringListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportMeteringListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportMeteringListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportMeteringListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportMeteringListDto {
    totalCount: number | undefined;
    items: TransportMeteringListDto[] | undefined;
}

export class TransportMeteringListDto implements ITransportMeteringListDto {
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    inStockNumber: string | undefined;
    unloadForInStockNumber: string | undefined;
    purchaseOrderCode: string | undefined;
    purchaseOrderItemCode: number | undefined;
    vouchersType: string | undefined;
    company: string | undefined;
    factory: string | undefined;
    stockNumber: string | undefined;
    deliveryOrderCode: string | undefined;
    /** 煤种编号 */
    coalCode: string | undefined;
    vehicleCode: string | undefined;
    /** 车队编号 */
    vehicleQueueCode: string | undefined;
    /** 出库毛重 */
    outInStockGrossWeigh: number | undefined;
    /** 创建人 */
    generatePerson: string | undefined;
    /** MES生成时间字符串 */
    generateTime: string | undefined;
    /** IC卡号 */
    icNumber: string | undefined;
    /** RFID卡号 */
    rfidNumber: string | undefined;
    /** 供应商号 */
    supplierNumber: string | undefined;
    /** 运输净重 */
    transNetWeigh: number | undefined;
    /** 运价 */
    transPrice: number | undefined;
    /** 煤价 */
    coalPrice: number | undefined;
    /** 参考运费 */
    withTransFee: number | undefined;
    /** 运费 */
    transFee: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 损耗超标扣吨 */
    deductionTon: number | undefined;
    /** 损耗超标扣款 */
    deductionFee: number | undefined;
    /** 超损耗范围 */
    deductionTonAres: number | undefined;
    /** 运输供应商 */
    transSupplierNumber: string | undefined;
    /** 车辆归属 */
    vehicleOwnership: string | undefined;
    /** 废煤标识 */
    wasteCoalMark: string | undefined;
    mainVehiclePlate: string | undefined;
    driverName: string | undefined;
    driverIDNumber: string | undefined;
    dataType: TransportMeteringListDtoDataType | undefined;
    readonly dataTypeText: string | undefined;
    customerId: number | undefined;
    customerIdName: string | undefined;
    shipper: number | undefined;
    shipperName: string | undefined;
    receiver: number | undefined;
    receiverName: string | undefined;
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    cargoCategory: string | undefined;
    cargoCategoryText: string | undefined;
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 称重时间 */
    weighDate: moment.Moment | undefined;
    /** 回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 毛重 */
    grossWeigh: number | undefined;
    /** 皮重 */
    skinWeigh: number | undefined;
    /** 净重 */
    netWeigh: number | undefined;
    thirdPartyCode: string | undefined;
    thirdPartyVehicleNumber: string | undefined;
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    remark: string | undefined;
    orderId: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITransportMeteringListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.orgUnitName = data["orgUnitName"];
            this.inStockNumber = data["inStockNumber"];
            this.unloadForInStockNumber = data["unloadForInStockNumber"];
            this.purchaseOrderCode = data["purchaseOrderCode"];
            this.purchaseOrderItemCode = data["purchaseOrderItemCode"];
            this.vouchersType = data["vouchersType"];
            this.company = data["company"];
            this.factory = data["factory"];
            this.stockNumber = data["stockNumber"];
            this.deliveryOrderCode = data["deliveryOrderCode"];
            this.coalCode = data["coalCode"];
            this.vehicleCode = data["vehicleCode"];
            this.vehicleQueueCode = data["vehicleQueueCode"];
            this.outInStockGrossWeigh = data["outInStockGrossWeigh"];
            this.generatePerson = data["generatePerson"];
            this.generateTime = data["generateTime"];
            this.icNumber = data["icNumber"];
            this.rfidNumber = data["rfidNumber"];
            this.supplierNumber = data["supplierNumber"];
            this.transNetWeigh = data["transNetWeigh"];
            this.transPrice = data["transPrice"];
            this.coalPrice = data["coalPrice"];
            this.withTransFee = data["withTransFee"];
            this.transFee = data["transFee"];
            this.reduceTransFee = data["reduceTransFee"];
            this.addTransFee = data["addTransFee"];
            this.deductionTon = data["deductionTon"];
            this.deductionFee = data["deductionFee"];
            this.deductionTonAres = data["deductionTonAres"];
            this.transSupplierNumber = data["transSupplierNumber"];
            this.vehicleOwnership = data["vehicleOwnership"];
            this.wasteCoalMark = data["wasteCoalMark"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.dataType = data["dataType"];
            (<any>this).dataTypeText = data["dataTypeText"];
            this.customerId = data["customerId"];
            this.customerIdName = data["customerIdName"];
            this.shipper = data["shipper"];
            this.shipperName = data["shipperName"];
            this.receiver = data["receiver"];
            this.receiverName = data["receiverName"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceIdName = data["loadPlaceIdName"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.cargoCategory = data["cargoCategory"];
            this.cargoCategoryText = data["cargoCategoryText"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.cargoVarietyIdName = data["cargoVarietyIdName"];
            this.weighDate = data["weighDate"] ? moment(data["weighDate"].toString()) : <any>undefined;
            this.skinbackDate = data["skinbackDate"] ? moment(data["skinbackDate"].toString()) : <any>undefined;
            this.grossWeigh = data["grossWeigh"];
            this.skinWeigh = data["skinWeigh"];
            this.netWeigh = data["netWeigh"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.thirdPartyVehicleNumber = data["thirdPartyVehicleNumber"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
            this.orderId = data["orderId"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportMeteringListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportMeteringListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["orgUnitName"] = this.orgUnitName;
        data["inStockNumber"] = this.inStockNumber;
        data["unloadForInStockNumber"] = this.unloadForInStockNumber;
        data["purchaseOrderCode"] = this.purchaseOrderCode;
        data["purchaseOrderItemCode"] = this.purchaseOrderItemCode;
        data["vouchersType"] = this.vouchersType;
        data["company"] = this.company;
        data["factory"] = this.factory;
        data["stockNumber"] = this.stockNumber;
        data["deliveryOrderCode"] = this.deliveryOrderCode;
        data["coalCode"] = this.coalCode;
        data["vehicleCode"] = this.vehicleCode;
        data["vehicleQueueCode"] = this.vehicleQueueCode;
        data["outInStockGrossWeigh"] = this.outInStockGrossWeigh;
        data["generatePerson"] = this.generatePerson;
        data["generateTime"] = this.generateTime;
        data["icNumber"] = this.icNumber;
        data["rfidNumber"] = this.rfidNumber;
        data["supplierNumber"] = this.supplierNumber;
        data["transNetWeigh"] = this.transNetWeigh;
        data["transPrice"] = this.transPrice;
        data["coalPrice"] = this.coalPrice;
        data["withTransFee"] = this.withTransFee;
        data["transFee"] = this.transFee;
        data["reduceTransFee"] = this.reduceTransFee;
        data["addTransFee"] = this.addTransFee;
        data["deductionTon"] = this.deductionTon;
        data["deductionFee"] = this.deductionFee;
        data["deductionTonAres"] = this.deductionTonAres;
        data["transSupplierNumber"] = this.transSupplierNumber;
        data["vehicleOwnership"] = this.vehicleOwnership;
        data["wasteCoalMark"] = this.wasteCoalMark;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["dataType"] = this.dataType;
        data["dataTypeText"] = this.dataTypeText;
        data["customerId"] = this.customerId;
        data["customerIdName"] = this.customerIdName;
        data["shipper"] = this.shipper;
        data["shipperName"] = this.shipperName;
        data["receiver"] = this.receiver;
        data["receiverName"] = this.receiverName;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceIdName"] = this.loadPlaceIdName;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["cargoCategory"] = this.cargoCategory;
        data["cargoCategoryText"] = this.cargoCategoryText;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["cargoVarietyIdName"] = this.cargoVarietyIdName;
        data["weighDate"] = this.weighDate ? this.weighDate.toISOString() : <any>undefined;
        data["skinbackDate"] = this.skinbackDate ? this.skinbackDate.toISOString() : <any>undefined;
        data["grossWeigh"] = this.grossWeigh;
        data["skinWeigh"] = this.skinWeigh;
        data["netWeigh"] = this.netWeigh;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["thirdPartyVehicleNumber"] = this.thirdPartyVehicleNumber;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["orderId"] = this.orderId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportMeteringListDto {
        const json = this.toJSON();
        let result = new TransportMeteringListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportMeteringListDto {
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    inStockNumber: string | undefined;
    unloadForInStockNumber: string | undefined;
    purchaseOrderCode: string | undefined;
    purchaseOrderItemCode: number | undefined;
    vouchersType: string | undefined;
    company: string | undefined;
    factory: string | undefined;
    stockNumber: string | undefined;
    deliveryOrderCode: string | undefined;
    /** 煤种编号 */
    coalCode: string | undefined;
    vehicleCode: string | undefined;
    /** 车队编号 */
    vehicleQueueCode: string | undefined;
    /** 出库毛重 */
    outInStockGrossWeigh: number | undefined;
    /** 创建人 */
    generatePerson: string | undefined;
    /** MES生成时间字符串 */
    generateTime: string | undefined;
    /** IC卡号 */
    icNumber: string | undefined;
    /** RFID卡号 */
    rfidNumber: string | undefined;
    /** 供应商号 */
    supplierNumber: string | undefined;
    /** 运输净重 */
    transNetWeigh: number | undefined;
    /** 运价 */
    transPrice: number | undefined;
    /** 煤价 */
    coalPrice: number | undefined;
    /** 参考运费 */
    withTransFee: number | undefined;
    /** 运费 */
    transFee: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 损耗超标扣吨 */
    deductionTon: number | undefined;
    /** 损耗超标扣款 */
    deductionFee: number | undefined;
    /** 超损耗范围 */
    deductionTonAres: number | undefined;
    /** 运输供应商 */
    transSupplierNumber: string | undefined;
    /** 车辆归属 */
    vehicleOwnership: string | undefined;
    /** 废煤标识 */
    wasteCoalMark: string | undefined;
    mainVehiclePlate: string | undefined;
    driverName: string | undefined;
    driverIDNumber: string | undefined;
    dataType: TransportMeteringListDtoDataType | undefined;
    dataTypeText: string | undefined;
    customerId: number | undefined;
    customerIdName: string | undefined;
    shipper: number | undefined;
    shipperName: string | undefined;
    receiver: number | undefined;
    receiverName: string | undefined;
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    cargoCategory: string | undefined;
    cargoCategoryText: string | undefined;
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 称重时间 */
    weighDate: moment.Moment | undefined;
    /** 回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 毛重 */
    grossWeigh: number | undefined;
    /** 皮重 */
    skinWeigh: number | undefined;
    /** 净重 */
    netWeigh: number | undefined;
    thirdPartyCode: string | undefined;
    thirdPartyVehicleNumber: string | undefined;
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    remark: string | undefined;
    orderId: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetTransportMeteringForEditOutput implements IGetTransportMeteringForEditOutput {
    transportSingleVehicleDailyCost: TransportMeteringEditDto | undefined;

    constructor(data?: IGetTransportMeteringForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleDailyCost = data["transportSingleVehicleDailyCost"] ? TransportMeteringEditDto.fromJS(data["transportSingleVehicleDailyCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTransportMeteringForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransportMeteringForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleDailyCost"] = this.transportSingleVehicleDailyCost ? this.transportSingleVehicleDailyCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetTransportMeteringForEditOutput {
        const json = this.toJSON();
        let result = new GetTransportMeteringForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTransportMeteringForEditOutput {
    transportSingleVehicleDailyCost: TransportMeteringEditDto | undefined;
}

export class TransportMeteringEditDto implements ITransportMeteringEditDto {
    id: string | undefined;
    organizationUnitId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 主车车牌号 */
    mainVehiclePlate: string | undefined;
    /** 司机 */
    driverName: string;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 审核状态（数据字典维护）未审核、审核退回、审核通过、已作废等 */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 客户 */
    customerId: number;
    /** 发货人 */
    shipper: number;
    /** 收货人 */
    receiver: number;
    /** 装地 */
    loadPlaceId: number;
    /** 卸地 */
    unloadPlaceId: number;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number;
    /** 数据类型 */
    dataType: TransportMeteringEditDtoDataType | undefined;
    /** 入库凭证号- */
    inStockNumber: string | undefined;
    /** -
            卸车凭证号 */
    unloadForInStockNumber: string | undefined;
    /** 采购订单编号- */
    purchaseOrderCode: string | undefined;
    /** 采购订单项目号- */
    purchaseOrderItemCode: number | undefined;
    /** 凭证类型- */
    vouchersType: string | undefined;
    /** 公司 */
    company: string | undefined;
    /** 工厂 */
    factory: string | undefined;
    /** 库存地点 */
    stockNumber: string | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 煤种编号 */
    coalCode: string | undefined;
    /** 毛重 */
    grossWeigh: number | undefined;
    /** 皮重 */
    skinWeigh: number | undefined;
    /** 出库毛重 */
    outInStockGrossWeigh: number | undefined;
    /** 净重 */
    netWeigh: number | undefined;
    /** 创建人 */
    generatePerson: string | undefined;
    /** MES生成时间字符串 */
    generateTime: string | undefined;
    /** 回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 车队编号 */
    vehicleQueueCode: string | undefined;
    /** IC卡号 */
    icNumber: string | undefined;
    /** RFID卡号 */
    rfidNumber: string | undefined;
    /** 供应商号 */
    supplierNumber: string | undefined;
    /** 运输净重 */
    transNetWeigh: number | undefined;
    /** 运价 */
    transPrice: number | undefined;
    /** 煤价 */
    coalPrice: number | undefined;
    /** 参考运费 */
    withTransFee: number | undefined;
    /** 运费 */
    transFee: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 损耗超标扣吨 */
    deductionTon: number | undefined;
    /** 损耗超标扣款 */
    deductionFee: number | undefined;
    /** 超损耗范围 */
    deductionTonAres: number | undefined;
    /** 运输供应商 */
    transSupplierNumber: string | undefined;
    /** 车辆归属 */
    vehicleOwnership: string | undefined;
    /** 废煤标识 */
    wasteCoalMark: string | undefined;
    /** 称重时间 */
    weighDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 第三方系统编号 */
    thirdPartyCode: string | undefined;
    /** 第三方车辆编号 */
    thirdPartyVehicleNumber: string | undefined;
    orderId: string | undefined;
    /** 1:单车订单 2：每日货源计划 */
    source: number | undefined;

    constructor(data?: ITransportMeteringEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.customerId = data["customerId"];
            this.shipper = data["shipper"];
            this.receiver = data["receiver"];
            this.loadPlaceId = data["loadPlaceId"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.cargoCategory = data["cargoCategory"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.dataType = data["dataType"];
            this.inStockNumber = data["inStockNumber"];
            this.unloadForInStockNumber = data["unloadForInStockNumber"];
            this.purchaseOrderCode = data["purchaseOrderCode"];
            this.purchaseOrderItemCode = data["purchaseOrderItemCode"];
            this.vouchersType = data["vouchersType"];
            this.company = data["company"];
            this.factory = data["factory"];
            this.stockNumber = data["stockNumber"];
            this.deliveryOrderCode = data["deliveryOrderCode"];
            this.coalCode = data["coalCode"];
            this.grossWeigh = data["grossWeigh"];
            this.skinWeigh = data["skinWeigh"];
            this.outInStockGrossWeigh = data["outInStockGrossWeigh"];
            this.netWeigh = data["netWeigh"];
            this.generatePerson = data["generatePerson"];
            this.generateTime = data["generateTime"];
            this.skinbackDate = data["skinbackDate"] ? moment(data["skinbackDate"].toString()) : <any>undefined;
            this.vehicleQueueCode = data["vehicleQueueCode"];
            this.icNumber = data["icNumber"];
            this.rfidNumber = data["rfidNumber"];
            this.supplierNumber = data["supplierNumber"];
            this.transNetWeigh = data["transNetWeigh"];
            this.transPrice = data["transPrice"];
            this.coalPrice = data["coalPrice"];
            this.withTransFee = data["withTransFee"];
            this.transFee = data["transFee"];
            this.reduceTransFee = data["reduceTransFee"];
            this.addTransFee = data["addTransFee"];
            this.deductionTon = data["deductionTon"];
            this.deductionFee = data["deductionFee"];
            this.deductionTonAres = data["deductionTonAres"];
            this.transSupplierNumber = data["transSupplierNumber"];
            this.vehicleOwnership = data["vehicleOwnership"];
            this.wasteCoalMark = data["wasteCoalMark"];
            this.weighDate = data["weighDate"] ? moment(data["weighDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.thirdPartyVehicleNumber = data["thirdPartyVehicleNumber"];
            this.orderId = data["orderId"];
            this.source = data["source"];
        }
    }

    static fromJS(data: any): TransportMeteringEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportMeteringEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["customerId"] = this.customerId;
        data["shipper"] = this.shipper;
        data["receiver"] = this.receiver;
        data["loadPlaceId"] = this.loadPlaceId;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["cargoCategory"] = this.cargoCategory;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["dataType"] = this.dataType;
        data["inStockNumber"] = this.inStockNumber;
        data["unloadForInStockNumber"] = this.unloadForInStockNumber;
        data["purchaseOrderCode"] = this.purchaseOrderCode;
        data["purchaseOrderItemCode"] = this.purchaseOrderItemCode;
        data["vouchersType"] = this.vouchersType;
        data["company"] = this.company;
        data["factory"] = this.factory;
        data["stockNumber"] = this.stockNumber;
        data["deliveryOrderCode"] = this.deliveryOrderCode;
        data["coalCode"] = this.coalCode;
        data["grossWeigh"] = this.grossWeigh;
        data["skinWeigh"] = this.skinWeigh;
        data["outInStockGrossWeigh"] = this.outInStockGrossWeigh;
        data["netWeigh"] = this.netWeigh;
        data["generatePerson"] = this.generatePerson;
        data["generateTime"] = this.generateTime;
        data["skinbackDate"] = this.skinbackDate ? this.skinbackDate.toISOString() : <any>undefined;
        data["vehicleQueueCode"] = this.vehicleQueueCode;
        data["icNumber"] = this.icNumber;
        data["rfidNumber"] = this.rfidNumber;
        data["supplierNumber"] = this.supplierNumber;
        data["transNetWeigh"] = this.transNetWeigh;
        data["transPrice"] = this.transPrice;
        data["coalPrice"] = this.coalPrice;
        data["withTransFee"] = this.withTransFee;
        data["transFee"] = this.transFee;
        data["reduceTransFee"] = this.reduceTransFee;
        data["addTransFee"] = this.addTransFee;
        data["deductionTon"] = this.deductionTon;
        data["deductionFee"] = this.deductionFee;
        data["deductionTonAres"] = this.deductionTonAres;
        data["transSupplierNumber"] = this.transSupplierNumber;
        data["vehicleOwnership"] = this.vehicleOwnership;
        data["wasteCoalMark"] = this.wasteCoalMark;
        data["weighDate"] = this.weighDate ? this.weighDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["thirdPartyVehicleNumber"] = this.thirdPartyVehicleNumber;
        data["orderId"] = this.orderId;
        data["source"] = this.source;
        return data; 
    }

    clone(): TransportMeteringEditDto {
        const json = this.toJSON();
        let result = new TransportMeteringEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportMeteringEditDto {
    id: string | undefined;
    organizationUnitId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 主车车牌号 */
    mainVehiclePlate: string | undefined;
    /** 司机 */
    driverName: string;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 审核状态（数据字典维护）未审核、审核退回、审核通过、已作废等 */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 客户 */
    customerId: number;
    /** 发货人 */
    shipper: number;
    /** 收货人 */
    receiver: number;
    /** 装地 */
    loadPlaceId: number;
    /** 卸地 */
    unloadPlaceId: number;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number;
    /** 数据类型 */
    dataType: TransportMeteringEditDtoDataType | undefined;
    /** 入库凭证号- */
    inStockNumber: string | undefined;
    /** -
            卸车凭证号 */
    unloadForInStockNumber: string | undefined;
    /** 采购订单编号- */
    purchaseOrderCode: string | undefined;
    /** 采购订单项目号- */
    purchaseOrderItemCode: number | undefined;
    /** 凭证类型- */
    vouchersType: string | undefined;
    /** 公司 */
    company: string | undefined;
    /** 工厂 */
    factory: string | undefined;
    /** 库存地点 */
    stockNumber: string | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 煤种编号 */
    coalCode: string | undefined;
    /** 毛重 */
    grossWeigh: number | undefined;
    /** 皮重 */
    skinWeigh: number | undefined;
    /** 出库毛重 */
    outInStockGrossWeigh: number | undefined;
    /** 净重 */
    netWeigh: number | undefined;
    /** 创建人 */
    generatePerson: string | undefined;
    /** MES生成时间字符串 */
    generateTime: string | undefined;
    /** 回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 车队编号 */
    vehicleQueueCode: string | undefined;
    /** IC卡号 */
    icNumber: string | undefined;
    /** RFID卡号 */
    rfidNumber: string | undefined;
    /** 供应商号 */
    supplierNumber: string | undefined;
    /** 运输净重 */
    transNetWeigh: number | undefined;
    /** 运价 */
    transPrice: number | undefined;
    /** 煤价 */
    coalPrice: number | undefined;
    /** 参考运费 */
    withTransFee: number | undefined;
    /** 运费 */
    transFee: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 损耗超标扣吨 */
    deductionTon: number | undefined;
    /** 损耗超标扣款 */
    deductionFee: number | undefined;
    /** 超损耗范围 */
    deductionTonAres: number | undefined;
    /** 运输供应商 */
    transSupplierNumber: string | undefined;
    /** 车辆归属 */
    vehicleOwnership: string | undefined;
    /** 废煤标识 */
    wasteCoalMark: string | undefined;
    /** 称重时间 */
    weighDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 第三方系统编号 */
    thirdPartyCode: string | undefined;
    /** 第三方车辆编号 */
    thirdPartyVehicleNumber: string | undefined;
    orderId: string | undefined;
    /** 1:单车订单 2：每日货源计划 */
    source: number | undefined;
}

export class CreateOrEditTransportMeteringInput implements ICreateOrEditTransportMeteringInput {
    transportSingleVehicleDailyCost: TransportMeteringEditDto | undefined;

    constructor(data?: ICreateOrEditTransportMeteringInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleDailyCost = data["transportSingleVehicleDailyCost"] ? TransportMeteringEditDto.fromJS(data["transportSingleVehicleDailyCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditTransportMeteringInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTransportMeteringInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleDailyCost"] = this.transportSingleVehicleDailyCost ? this.transportSingleVehicleDailyCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditTransportMeteringInput {
        const json = this.toJSON();
        let result = new CreateOrEditTransportMeteringInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditTransportMeteringInput {
    transportSingleVehicleDailyCost: TransportMeteringEditDto | undefined;
}

export class ApproalTransportMeteringEditDto implements IApproalTransportMeteringEditDto {
    id: string | undefined;
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;

    constructor(data?: IApproalTransportMeteringEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.idStr = data["idStr"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ApproalTransportMeteringEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApproalTransportMeteringEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["idStr"] = this.idStr;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): ApproalTransportMeteringEditDto {
        const json = this.toJSON();
        let result = new ApproalTransportMeteringEditDto();
        result.init(json);
        return result;
    }
}

export interface IApproalTransportMeteringEditDto {
    id: string | undefined;
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
}

export class TransportMeteringsIdInput implements ITransportMeteringsIdInput {
    idStr: string | undefined;

    constructor(data?: ITransportMeteringsIdInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idStr = data["idStr"];
        }
    }

    static fromJS(data: any): TransportMeteringsIdInput {
        data = typeof data === 'object' ? data : {};
        let result = new TransportMeteringsIdInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idStr"] = this.idStr;
        return data; 
    }

    clone(): TransportMeteringsIdInput {
        const json = this.toJSON();
        let result = new TransportMeteringsIdInput();
        result.init(json);
        return result;
    }
}

export interface ITransportMeteringsIdInput {
    idStr: string | undefined;
}

export class PagedResultDtoOfTransportPlaceListDto implements IPagedResultDtoOfTransportPlaceListDto {
    totalCount: number | undefined;
    items: TransportPlaceListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportPlaceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportPlaceListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportPlaceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportPlaceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportPlaceListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportPlaceListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportPlaceListDto {
    totalCount: number | undefined;
    items: TransportPlaceListDto[] | undefined;
}

export class TransportPlaceListDto implements ITransportPlaceListDto {
    code: string | undefined;
    name: string | undefined;
    financialMappingNumber: string | undefined;
    description: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    areaNumber: string | undefined;
    areaNumberText: string | undefined;
    transportPlaceTypeId: number | undefined;
    transportPlaceTypeValue: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ITransportPlaceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.code = data["code"];
            this.name = data["name"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.description = data["description"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.order = data["order"];
            this.areaNumber = data["areaNumber"];
            this.areaNumberText = data["areaNumberText"];
            this.transportPlaceTypeId = data["transportPlaceTypeId"];
            this.transportPlaceTypeValue = data["transportPlaceTypeValue"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportPlaceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["name"] = this.name;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["description"] = this.description;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["order"] = this.order;
        data["areaNumber"] = this.areaNumber;
        data["areaNumberText"] = this.areaNumberText;
        data["transportPlaceTypeId"] = this.transportPlaceTypeId;
        data["transportPlaceTypeValue"] = this.transportPlaceTypeValue;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportPlaceListDto {
        const json = this.toJSON();
        let result = new TransportPlaceListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceListDto {
    code: string | undefined;
    name: string | undefined;
    financialMappingNumber: string | undefined;
    description: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    areaNumber: string | undefined;
    areaNumberText: string | undefined;
    transportPlaceTypeId: number | undefined;
    transportPlaceTypeValue: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class ListResultDtoOfTransportPlaceTypeListDto implements IListResultDtoOfTransportPlaceTypeListDto {
    items: TransportPlaceTypeListDto[] | undefined;

    constructor(data?: IListResultDtoOfTransportPlaceTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportPlaceTypeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTransportPlaceTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfTransportPlaceTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfTransportPlaceTypeListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfTransportPlaceTypeListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfTransportPlaceTypeListDto {
    items: TransportPlaceTypeListDto[] | undefined;
}

export class TransportPlaceTypeListDto implements ITransportPlaceTypeListDto {
    /** 编码 */
    value: string | undefined;
    /** 名称 */
    text: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 排序码 */
    order: number | undefined;
    /** 父级Id */
    parentId: number | undefined;
    /** 子项 */
    children: TransportPlaceTypeListDto[] | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ITransportPlaceTypeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.text = data["text"];
            this.description = data["description"];
            this.order = data["order"];
            this.parentId = data["parentId"];
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [] as any;
                for (let item of data["children"])
                    this.children.push(TransportPlaceTypeListDto.fromJS(item));
            }
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportPlaceTypeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceTypeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        data["description"] = this.description;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportPlaceTypeListDto {
        const json = this.toJSON();
        let result = new TransportPlaceTypeListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceTypeListDto {
    /** 编码 */
    value: string | undefined;
    /** 名称 */
    text: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 排序码 */
    order: number | undefined;
    /** 父级Id */
    parentId: number | undefined;
    /** 子项 */
    children: TransportPlaceTypeListDto[] | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class ListResultDtoOfTransportPlaceListByMobileDto implements IListResultDtoOfTransportPlaceListByMobileDto {
    items: TransportPlaceListByMobileDto[] | undefined;

    constructor(data?: IListResultDtoOfTransportPlaceListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportPlaceListByMobileDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTransportPlaceListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfTransportPlaceListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfTransportPlaceListByMobileDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfTransportPlaceListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfTransportPlaceListByMobileDto {
    items: TransportPlaceListByMobileDto[] | undefined;
}

export class TransportPlaceListByMobileDto implements ITransportPlaceListByMobileDto {
    /** 编码 */
    value: string | undefined;
    /** 名称 */
    text: string | undefined;
    /** 父级Id */
    parentId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ITransportPlaceListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.value = data["value"];
            this.text = data["text"];
            this.parentId = data["parentId"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportPlaceListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["text"] = this.text;
        data["parentId"] = this.parentId;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportPlaceListByMobileDto {
        const json = this.toJSON();
        let result = new TransportPlaceListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceListByMobileDto {
    /** 编码 */
    value: string | undefined;
    /** 名称 */
    text: string | undefined;
    /** 父级Id */
    parentId: number | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class GetTransportPlaceTypeForEditOutput implements IGetTransportPlaceTypeForEditOutput {
    transportPlaceType: TransportPlaceTypeEditDto | undefined;

    constructor(data?: IGetTransportPlaceTypeForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportPlaceType = data["transportPlaceType"] ? TransportPlaceTypeEditDto.fromJS(data["transportPlaceType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTransportPlaceTypeForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransportPlaceTypeForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportPlaceType"] = this.transportPlaceType ? this.transportPlaceType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetTransportPlaceTypeForEditOutput {
        const json = this.toJSON();
        let result = new GetTransportPlaceTypeForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTransportPlaceTypeForEditOutput {
    transportPlaceType: TransportPlaceTypeEditDto | undefined;
}

export class TransportPlaceTypeEditDto implements ITransportPlaceTypeEditDto {
    id: number | undefined;
    value: string;
    text: string;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    parent: TransportPlaceTypeListDto | undefined;

    constructor(data?: ITransportPlaceTypeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.value = data["value"];
            this.text = data["text"];
            this.description = data["description"];
            this.order = data["order"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? TransportPlaceTypeListDto.fromJS(data["parent"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TransportPlaceTypeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceTypeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["value"] = this.value;
        data["text"] = this.text;
        data["description"] = this.description;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        return data; 
    }

    clone(): TransportPlaceTypeEditDto {
        const json = this.toJSON();
        let result = new TransportPlaceTypeEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceTypeEditDto {
    id: number | undefined;
    value: string;
    text: string;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    parent: TransportPlaceTypeListDto | undefined;
}

export class GetTransportPlaceForEditOutput implements IGetTransportPlaceForEditOutput {
    transportPlace: TransportPlaceEditDto | undefined;

    constructor(data?: IGetTransportPlaceForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportPlace = data["transportPlace"] ? TransportPlaceEditDto.fromJS(data["transportPlace"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTransportPlaceForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransportPlaceForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportPlace"] = this.transportPlace ? this.transportPlace.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetTransportPlaceForEditOutput {
        const json = this.toJSON();
        let result = new GetTransportPlaceForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTransportPlaceForEditOutput {
    transportPlace: TransportPlaceEditDto | undefined;
}

export class TransportPlaceEditDto implements ITransportPlaceEditDto {
    id: number | undefined;
    code: string;
    name: string;
    financialMappingNumber: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    areaNumber: string | undefined;
    /** 备注 */
    description: string | undefined;
    transportPlaceTypeId: number | undefined;
    transportPlaceType: TransportPlaceTypeListDto | undefined;

    constructor(data?: ITransportPlaceEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.order = data["order"];
            this.areaNumber = data["areaNumber"];
            this.description = data["description"];
            this.transportPlaceTypeId = data["transportPlaceTypeId"];
            this.transportPlaceType = data["transportPlaceType"] ? TransportPlaceTypeListDto.fromJS(data["transportPlaceType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TransportPlaceEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["order"] = this.order;
        data["areaNumber"] = this.areaNumber;
        data["description"] = this.description;
        data["transportPlaceTypeId"] = this.transportPlaceTypeId;
        data["transportPlaceType"] = this.transportPlaceType ? this.transportPlaceType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): TransportPlaceEditDto {
        const json = this.toJSON();
        let result = new TransportPlaceEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceEditDto {
    id: number | undefined;
    code: string;
    name: string;
    financialMappingNumber: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    areaNumber: string | undefined;
    /** 备注 */
    description: string | undefined;
    transportPlaceTypeId: number | undefined;
    transportPlaceType: TransportPlaceTypeListDto | undefined;
}

export class CreateOrEditTransportPlaceInput implements ICreateOrEditTransportPlaceInput {
    transportPlace: TransportPlaceEditForSaveDto | undefined;

    constructor(data?: ICreateOrEditTransportPlaceInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportPlace = data["transportPlace"] ? TransportPlaceEditForSaveDto.fromJS(data["transportPlace"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditTransportPlaceInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTransportPlaceInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportPlace"] = this.transportPlace ? this.transportPlace.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditTransportPlaceInput {
        const json = this.toJSON();
        let result = new CreateOrEditTransportPlaceInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditTransportPlaceInput {
    transportPlace: TransportPlaceEditForSaveDto | undefined;
}

export class TransportPlaceEditForSaveDto implements ITransportPlaceEditForSaveDto {
    id: number | undefined;
    code: string;
    name: string;
    financialMappingNumber: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    areaNumber: string | undefined;
    /** 备注 */
    description: string | undefined;
    transportPlaceTypeId: number | undefined;

    constructor(data?: ITransportPlaceEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.order = data["order"];
            this.areaNumber = data["areaNumber"];
            this.description = data["description"];
            this.transportPlaceTypeId = data["transportPlaceTypeId"];
        }
    }

    static fromJS(data: any): TransportPlaceEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["order"] = this.order;
        data["areaNumber"] = this.areaNumber;
        data["description"] = this.description;
        data["transportPlaceTypeId"] = this.transportPlaceTypeId;
        return data; 
    }

    clone(): TransportPlaceEditForSaveDto {
        const json = this.toJSON();
        let result = new TransportPlaceEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceEditForSaveDto {
    id: number | undefined;
    code: string;
    name: string;
    financialMappingNumber: string | undefined;
    /** 是否启用 */
    isEnable: boolean | undefined;
    /** 是否系统默认 */
    isDefault: boolean | undefined;
    order: number | undefined;
    areaNumber: string | undefined;
    /** 备注 */
    description: string | undefined;
    transportPlaceTypeId: number | undefined;
}

export class CreateOrUpdateTransportPlaceTypeInput implements ICreateOrUpdateTransportPlaceTypeInput {
    transportPlaceType: TransportPlaceTypeEditDto | undefined;

    constructor(data?: ICreateOrUpdateTransportPlaceTypeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportPlaceType = data["transportPlaceType"] ? TransportPlaceTypeEditDto.fromJS(data["transportPlaceType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateTransportPlaceTypeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateTransportPlaceTypeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportPlaceType"] = this.transportPlaceType ? this.transportPlaceType.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateTransportPlaceTypeInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateTransportPlaceTypeInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateTransportPlaceTypeInput {
    transportPlaceType: TransportPlaceTypeEditDto | undefined;
}

export class CreateTransportPlaceFromExcelInput implements ICreateTransportPlaceFromExcelInput {
    fileContent: string | undefined;

    constructor(data?: ICreateTransportPlaceFromExcelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileContent = data["fileContent"];
        }
    }

    static fromJS(data: any): CreateTransportPlaceFromExcelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTransportPlaceFromExcelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileContent"] = this.fileContent;
        return data; 
    }

    clone(): CreateTransportPlaceFromExcelInput {
        const json = this.toJSON();
        let result = new CreateTransportPlaceFromExcelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateTransportPlaceFromExcelInput {
    fileContent: string | undefined;
}

export class TransportPlaceImportingReturnDto implements ITransportPlaceImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;

    constructor(data?: ITransportPlaceImportingReturnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): TransportPlaceImportingReturnDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceImportingReturnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): TransportPlaceImportingReturnDto {
        const json = this.toJSON();
        let result = new TransportPlaceImportingReturnDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;
}

export class PagedResultDtoOfTransportPlaceThirdPartyListDto implements IPagedResultDtoOfTransportPlaceThirdPartyListDto {
    totalCount: number | undefined;
    items: TransportPlaceThirdPartyListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportPlaceThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportPlaceThirdPartyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportPlaceThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportPlaceThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportPlaceThirdPartyListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportPlaceThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportPlaceThirdPartyListDto {
    totalCount: number | undefined;
    items: TransportPlaceThirdPartyListDto[] | undefined;
}

export class TransportPlaceThirdPartyListDto implements ITransportPlaceThirdPartyListDto {
    thirdPartyCode: string | undefined;
    /** 客户号 */
    transportPlaceId: number | undefined;
    transportPlaceName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITransportPlaceThirdPartyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartyCode = data["thirdPartyCode"];
            this.transportPlaceId = data["transportPlaceId"];
            this.transportPlaceName = data["transportPlaceName"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportPlaceThirdPartyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceThirdPartyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["transportPlaceId"] = this.transportPlaceId;
        data["transportPlaceName"] = this.transportPlaceName;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportPlaceThirdPartyListDto {
        const json = this.toJSON();
        let result = new TransportPlaceThirdPartyListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceThirdPartyListDto {
    thirdPartyCode: string | undefined;
    /** 客户号 */
    transportPlaceId: number | undefined;
    transportPlaceName: string | undefined;
    /** 激活状态 */
    isActive: boolean | undefined;
    thirdPartySystem: string | undefined;
    thirdPartySystemName: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class TransportPlaceThirdPartyEditDto implements ITransportPlaceThirdPartyEditDto {
    id: string | undefined;
    /** 第三方组织机构号 */
    thirdPartyCode: string;
    /** 客户号 */
    transportPlaceId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;

    constructor(data?: ITransportPlaceThirdPartyEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.transportPlaceId = data["transportPlaceId"];
            this.isActive = data["isActive"];
            this.thirdPartySystem = data["thirdPartySystem"];
        }
    }

    static fromJS(data: any): TransportPlaceThirdPartyEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceThirdPartyEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["transportPlaceId"] = this.transportPlaceId;
        data["isActive"] = this.isActive;
        data["thirdPartySystem"] = this.thirdPartySystem;
        return data; 
    }

    clone(): TransportPlaceThirdPartyEditDto {
        const json = this.toJSON();
        let result = new TransportPlaceThirdPartyEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceThirdPartyEditDto {
    id: string | undefined;
    /** 第三方组织机构号 */
    thirdPartyCode: string;
    /** 客户号 */
    transportPlaceId: number;
    /** 激活状态 */
    isActive: boolean;
    thirdPartySystem: string;
}

export class PagedResultDtoOfTransportSendGoodsListDto implements IPagedResultDtoOfTransportSendGoodsListDto {
    totalCount: number | undefined;
    items: TransportSendGoodsListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportSendGoodsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportSendGoodsListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportSendGoodsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportSendGoodsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportSendGoodsListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportSendGoodsListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportSendGoodsListDto {
    totalCount: number | undefined;
    items: TransportSendGoodsListDto[] | undefined;
}

export class TransportSendGoodsListDto implements ITransportSendGoodsListDto {
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    driverName: string | undefined;
    dataType: TransportSendGoodsListDtoDataType | undefined;
    readonly dataTypeText: string | undefined;
    customerId: number | undefined;
    customerIdName: string | undefined;
    shipper: number | undefined;
    shipperName: string | undefined;
    receiver: number | undefined;
    receiverName: string | undefined;
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    cargoCategory: string | undefined;
    cargoCategoryText: string | undefined;
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 称重时间 */
    weighDate: moment.Moment | undefined;
    /** 回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 毛重 */
    grossWeigh: number | undefined;
    /** 皮重 */
    skinWeigh: number | undefined;
    /** 净重 */
    netWeigh: number | undefined;
    thirdPartyCode: string | undefined;
    thirdPartyVehicleNumber: string | undefined;
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    remark: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITransportSendGoodsListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.orgUnitName = data["orgUnitName"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.dataType = data["dataType"];
            (<any>this).dataTypeText = data["dataTypeText"];
            this.customerId = data["customerId"];
            this.customerIdName = data["customerIdName"];
            this.shipper = data["shipper"];
            this.shipperName = data["shipperName"];
            this.receiver = data["receiver"];
            this.receiverName = data["receiverName"];
            this.loadPlaceId = data["loadPlaceId"];
            this.loadPlaceIdName = data["loadPlaceIdName"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.unloadPlaceIdName = data["unloadPlaceIdName"];
            this.cargoCategory = data["cargoCategory"];
            this.cargoCategoryText = data["cargoCategoryText"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.cargoVarietyIdName = data["cargoVarietyIdName"];
            this.weighDate = data["weighDate"] ? moment(data["weighDate"].toString()) : <any>undefined;
            this.skinbackDate = data["skinbackDate"] ? moment(data["skinbackDate"].toString()) : <any>undefined;
            this.grossWeigh = data["grossWeigh"];
            this.skinWeigh = data["skinWeigh"];
            this.netWeigh = data["netWeigh"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.thirdPartyVehicleNumber = data["thirdPartyVehicleNumber"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportSendGoodsListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSendGoodsListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["orgUnitName"] = this.orgUnitName;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["dataType"] = this.dataType;
        data["dataTypeText"] = this.dataTypeText;
        data["customerId"] = this.customerId;
        data["customerIdName"] = this.customerIdName;
        data["shipper"] = this.shipper;
        data["shipperName"] = this.shipperName;
        data["receiver"] = this.receiver;
        data["receiverName"] = this.receiverName;
        data["loadPlaceId"] = this.loadPlaceId;
        data["loadPlaceIdName"] = this.loadPlaceIdName;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["unloadPlaceIdName"] = this.unloadPlaceIdName;
        data["cargoCategory"] = this.cargoCategory;
        data["cargoCategoryText"] = this.cargoCategoryText;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["cargoVarietyIdName"] = this.cargoVarietyIdName;
        data["weighDate"] = this.weighDate ? this.weighDate.toISOString() : <any>undefined;
        data["skinbackDate"] = this.skinbackDate ? this.skinbackDate.toISOString() : <any>undefined;
        data["grossWeigh"] = this.grossWeigh;
        data["skinWeigh"] = this.skinWeigh;
        data["netWeigh"] = this.netWeigh;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["thirdPartyVehicleNumber"] = this.thirdPartyVehicleNumber;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportSendGoodsListDto {
        const json = this.toJSON();
        let result = new TransportSendGoodsListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSendGoodsListDto {
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    driverName: string | undefined;
    dataType: TransportSendGoodsListDtoDataType | undefined;
    dataTypeText: string | undefined;
    customerId: number | undefined;
    customerIdName: string | undefined;
    shipper: number | undefined;
    shipperName: string | undefined;
    receiver: number | undefined;
    receiverName: string | undefined;
    loadPlaceId: number | undefined;
    loadPlaceIdName: string | undefined;
    unloadPlaceId: number | undefined;
    unloadPlaceIdName: string | undefined;
    cargoCategory: string | undefined;
    cargoCategoryText: string | undefined;
    cargoVarietyId: number | undefined;
    cargoVarietyIdName: string | undefined;
    /** 称重时间 */
    weighDate: moment.Moment | undefined;
    /** 回皮时间 */
    skinbackDate: moment.Moment | undefined;
    /** 毛重 */
    grossWeigh: number | undefined;
    /** 皮重 */
    skinWeigh: number | undefined;
    /** 净重 */
    netWeigh: number | undefined;
    thirdPartyCode: string | undefined;
    thirdPartyVehicleNumber: string | undefined;
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    remark: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetTransportSendGoodsListForEditOutput implements IGetTransportSendGoodsListForEditOutput {
    transportSingleVehicleDailyCost: TransportSendGoodsListEditDto | undefined;

    constructor(data?: IGetTransportSendGoodsListForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleDailyCost = data["transportSingleVehicleDailyCost"] ? TransportSendGoodsListEditDto.fromJS(data["transportSingleVehicleDailyCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTransportSendGoodsListForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransportSendGoodsListForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleDailyCost"] = this.transportSingleVehicleDailyCost ? this.transportSingleVehicleDailyCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetTransportSendGoodsListForEditOutput {
        const json = this.toJSON();
        let result = new GetTransportSendGoodsListForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTransportSendGoodsListForEditOutput {
    transportSingleVehicleDailyCost: TransportSendGoodsListEditDto | undefined;
}

export class TransportSendGoodsListEditDto implements ITransportSendGoodsListEditDto {
    tenantId: number | undefined;
    id: string | undefined;
    organizationUnitId: number | undefined;
    /** 出库单号- */
    outStockNumber: string | undefined;
    /** -
            装车凭证号 */
    loadForOutStockNumber: string | undefined;
    /** 工厂 */
    factory: string | undefined;
    /** 库存地点 */
    stockNumber: string | undefined;
    /** MES生成时间字符串 */
    generateTime: string | undefined;
    /** 操作日期 */
    generateDate: moment.Moment | undefined;
    /** 创建人 */
    generatePerson: string | undefined;
    /** 客户号-MES */
    customerCode: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 主车车牌号 */
    mainVehiclePlate: string | undefined;
    /** 煤种编号 */
    coalCode: string | undefined;
    /** 煤种描述 */
    coalText: string | undefined;
    /** 毛重 */
    grossWeigh: number | undefined;
    /** 皮重 */
    skinWeigh: number | undefined;
    /** 净重 */
    netWeigh: number | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 公司 */
    company: string | undefined;
    /** 运输供应商 */
    transSupplierNumber: string | undefined;
    /** 客户 */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
    /** 审核状态（数据字典维护）未审核、审核退回、审核通过、已作废等 */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 数据类型 */
    dataType: TransportSendGoodsListEditDtoDataType | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 第三方系统编号 */
    thirdPartyCode: string | undefined;
    /** 第三方车辆编号 */
    thirdPartyVehicleNumber: string | undefined;

    constructor(data?: ITransportSendGoodsListEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.outStockNumber = data["outStockNumber"];
            this.loadForOutStockNumber = data["loadForOutStockNumber"];
            this.factory = data["factory"];
            this.stockNumber = data["stockNumber"];
            this.generateTime = data["generateTime"];
            this.generateDate = data["generateDate"] ? moment(data["generateDate"].toString()) : <any>undefined;
            this.generatePerson = data["generatePerson"];
            this.customerCode = data["customerCode"];
            this.driverName = data["driverName"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.coalCode = data["coalCode"];
            this.coalText = data["coalText"];
            this.grossWeigh = data["grossWeigh"];
            this.skinWeigh = data["skinWeigh"];
            this.netWeigh = data["netWeigh"];
            this.deliveryOrderCode = data["deliveryOrderCode"];
            this.company = data["company"];
            this.transSupplierNumber = data["transSupplierNumber"];
            this.customerId = data["customerId"];
            this.shipper = data["shipper"];
            this.receiver = data["receiver"];
            this.loadPlaceId = data["loadPlaceId"];
            this.unloadPlaceId = data["unloadPlaceId"];
            this.cargoCategory = data["cargoCategory"];
            this.cargoVarietyId = data["cargoVarietyId"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.dataType = data["dataType"];
            this.remark = data["remark"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.thirdPartyVehicleNumber = data["thirdPartyVehicleNumber"];
        }
    }

    static fromJS(data: any): TransportSendGoodsListEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSendGoodsListEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["outStockNumber"] = this.outStockNumber;
        data["loadForOutStockNumber"] = this.loadForOutStockNumber;
        data["factory"] = this.factory;
        data["stockNumber"] = this.stockNumber;
        data["generateTime"] = this.generateTime;
        data["generateDate"] = this.generateDate ? this.generateDate.toISOString() : <any>undefined;
        data["generatePerson"] = this.generatePerson;
        data["customerCode"] = this.customerCode;
        data["driverName"] = this.driverName;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["coalCode"] = this.coalCode;
        data["coalText"] = this.coalText;
        data["grossWeigh"] = this.grossWeigh;
        data["skinWeigh"] = this.skinWeigh;
        data["netWeigh"] = this.netWeigh;
        data["deliveryOrderCode"] = this.deliveryOrderCode;
        data["company"] = this.company;
        data["transSupplierNumber"] = this.transSupplierNumber;
        data["customerId"] = this.customerId;
        data["shipper"] = this.shipper;
        data["receiver"] = this.receiver;
        data["loadPlaceId"] = this.loadPlaceId;
        data["unloadPlaceId"] = this.unloadPlaceId;
        data["cargoCategory"] = this.cargoCategory;
        data["cargoVarietyId"] = this.cargoVarietyId;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["dataType"] = this.dataType;
        data["remark"] = this.remark;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["thirdPartyVehicleNumber"] = this.thirdPartyVehicleNumber;
        return data; 
    }

    clone(): TransportSendGoodsListEditDto {
        const json = this.toJSON();
        let result = new TransportSendGoodsListEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSendGoodsListEditDto {
    tenantId: number | undefined;
    id: string | undefined;
    organizationUnitId: number | undefined;
    /** 出库单号- */
    outStockNumber: string | undefined;
    /** -
            装车凭证号 */
    loadForOutStockNumber: string | undefined;
    /** 工厂 */
    factory: string | undefined;
    /** 库存地点 */
    stockNumber: string | undefined;
    /** MES生成时间字符串 */
    generateTime: string | undefined;
    /** 操作日期 */
    generateDate: moment.Moment | undefined;
    /** 创建人 */
    generatePerson: string | undefined;
    /** 客户号-MES */
    customerCode: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 主车车牌号 */
    mainVehiclePlate: string | undefined;
    /** 煤种编号 */
    coalCode: string | undefined;
    /** 煤种描述 */
    coalText: string | undefined;
    /** 毛重 */
    grossWeigh: number | undefined;
    /** 皮重 */
    skinWeigh: number | undefined;
    /** 净重 */
    netWeigh: number | undefined;
    /** 提货单号 */
    deliveryOrderCode: string | undefined;
    /** 公司 */
    company: string | undefined;
    /** 运输供应商 */
    transSupplierNumber: string | undefined;
    /** 客户 */
    customerId: number | undefined;
    /** 发货人 */
    shipper: number | undefined;
    /** 收货人 */
    receiver: number | undefined;
    /** 装地 */
    loadPlaceId: number | undefined;
    /** 卸地 */
    unloadPlaceId: number | undefined;
    /** 货类（数据字典） */
    cargoCategory: string | undefined;
    /** 货品（物料） */
    cargoVarietyId: number | undefined;
    /** 审核状态（数据字典维护）未审核、审核退回、审核通过、已作废等 */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 数据类型 */
    dataType: TransportSendGoodsListEditDtoDataType | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 第三方系统编号 */
    thirdPartyCode: string | undefined;
    /** 第三方车辆编号 */
    thirdPartyVehicleNumber: string | undefined;
}

export class CreateOrEditTransportSendGoodsListInput implements ICreateOrEditTransportSendGoodsListInput {
    transportSingleVehicleDailyCost: TransportSendGoodsListEditDto | undefined;

    constructor(data?: ICreateOrEditTransportSendGoodsListInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleDailyCost = data["transportSingleVehicleDailyCost"] ? TransportSendGoodsListEditDto.fromJS(data["transportSingleVehicleDailyCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditTransportSendGoodsListInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTransportSendGoodsListInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleDailyCost"] = this.transportSingleVehicleDailyCost ? this.transportSingleVehicleDailyCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditTransportSendGoodsListInput {
        const json = this.toJSON();
        let result = new CreateOrEditTransportSendGoodsListInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditTransportSendGoodsListInput {
    transportSingleVehicleDailyCost: TransportSendGoodsListEditDto | undefined;
}

export class ApproalTransportSendGoodsListEditDto implements IApproalTransportSendGoodsListEditDto {
    id: string | undefined;
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;

    constructor(data?: IApproalTransportSendGoodsListEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.idStr = data["idStr"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ApproalTransportSendGoodsListEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApproalTransportSendGoodsListEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["idStr"] = this.idStr;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): ApproalTransportSendGoodsListEditDto {
        const json = this.toJSON();
        let result = new ApproalTransportSendGoodsListEditDto();
        result.init(json);
        return result;
    }
}

export interface IApproalTransportSendGoodsListEditDto {
    id: string | undefined;
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
}

export class CreateOrUpdateTransportSingleVehicleAllocationCostInput implements ICreateOrUpdateTransportSingleVehicleAllocationCostInput {
    transportSingleVehicleAllocationCostCreateOrUpdate: TransportSingleVehicleAllocationCostEditDto | undefined;

    constructor(data?: ICreateOrUpdateTransportSingleVehicleAllocationCostInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleAllocationCostCreateOrUpdate = data["transportSingleVehicleAllocationCostCreateOrUpdate"] ? TransportSingleVehicleAllocationCostEditDto.fromJS(data["transportSingleVehicleAllocationCostCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateTransportSingleVehicleAllocationCostInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateTransportSingleVehicleAllocationCostInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleAllocationCostCreateOrUpdate"] = this.transportSingleVehicleAllocationCostCreateOrUpdate ? this.transportSingleVehicleAllocationCostCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateTransportSingleVehicleAllocationCostInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateTransportSingleVehicleAllocationCostInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateTransportSingleVehicleAllocationCostInput {
    transportSingleVehicleAllocationCostCreateOrUpdate: TransportSingleVehicleAllocationCostEditDto | undefined;
}

export class TransportSingleVehicleAllocationCostEditDto implements ITransportSingleVehicleAllocationCostEditDto {
    id: string | undefined;
    /** 车号 */
    vehicleCode: string;
    /** 司机 */
    driverName: string;
    /** 费用项目（车贷、保险、GPS年费等） */
    expenseItem: string;
    /** 记费类型（订单、作业、单车、其他） */
    expenseType: string;
    /** 分摊开始日期 */
    allocationDateStart: moment.Moment;
    /** 分摊结束日期 */
    allocationDateEnd: moment.Moment;
    /** 会计日期 */
    accountDate: moment.Moment;
    /** 摊销金额 */
    allocationAmount: number;
    /** 摊销方式（按年\月\日或者取结算周期） */
    allocationMethod: string;
    /** 分摊状态 */
    allocationStatus: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 运输公司 */
    organizationUnitId: number;

    constructor(data?: ITransportSingleVehicleAllocationCostEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.driverName = data["driverName"];
            this.expenseItem = data["expenseItem"];
            this.expenseType = data["expenseType"];
            this.allocationDateStart = data["allocationDateStart"] ? moment(data["allocationDateStart"].toString()) : <any>undefined;
            this.allocationDateEnd = data["allocationDateEnd"] ? moment(data["allocationDateEnd"].toString()) : <any>undefined;
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.allocationAmount = data["allocationAmount"];
            this.allocationMethod = data["allocationMethod"];
            this.allocationStatus = data["allocationStatus"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): TransportSingleVehicleAllocationCostEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSingleVehicleAllocationCostEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["driverName"] = this.driverName;
        data["expenseItem"] = this.expenseItem;
        data["expenseType"] = this.expenseType;
        data["allocationDateStart"] = this.allocationDateStart ? this.allocationDateStart.toISOString() : <any>undefined;
        data["allocationDateEnd"] = this.allocationDateEnd ? this.allocationDateEnd.toISOString() : <any>undefined;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["allocationAmount"] = this.allocationAmount;
        data["allocationMethod"] = this.allocationMethod;
        data["allocationStatus"] = this.allocationStatus;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }

    clone(): TransportSingleVehicleAllocationCostEditDto {
        const json = this.toJSON();
        let result = new TransportSingleVehicleAllocationCostEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSingleVehicleAllocationCostEditDto {
    id: string | undefined;
    /** 车号 */
    vehicleCode: string;
    /** 司机 */
    driverName: string;
    /** 费用项目（车贷、保险、GPS年费等） */
    expenseItem: string;
    /** 记费类型（订单、作业、单车、其他） */
    expenseType: string;
    /** 分摊开始日期 */
    allocationDateStart: moment.Moment;
    /** 分摊结束日期 */
    allocationDateEnd: moment.Moment;
    /** 会计日期 */
    accountDate: moment.Moment;
    /** 摊销金额 */
    allocationAmount: number;
    /** 摊销方式（按年\月\日或者取结算周期） */
    allocationMethod: string;
    /** 分摊状态 */
    allocationStatus: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 运输公司 */
    organizationUnitId: number;
}

export class GetTransportSingleVehicleAllocationCostForEditOutput implements IGetTransportSingleVehicleAllocationCostForEditOutput {
    transportSingleVehicleAllocationCostEdit: TransportSingleVehicleAllocationCostEditDto | undefined;

    constructor(data?: IGetTransportSingleVehicleAllocationCostForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleAllocationCostEdit = data["transportSingleVehicleAllocationCostEdit"] ? TransportSingleVehicleAllocationCostEditDto.fromJS(data["transportSingleVehicleAllocationCostEdit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTransportSingleVehicleAllocationCostForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransportSingleVehicleAllocationCostForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleAllocationCostEdit"] = this.transportSingleVehicleAllocationCostEdit ? this.transportSingleVehicleAllocationCostEdit.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetTransportSingleVehicleAllocationCostForEditOutput {
        const json = this.toJSON();
        let result = new GetTransportSingleVehicleAllocationCostForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTransportSingleVehicleAllocationCostForEditOutput {
    transportSingleVehicleAllocationCostEdit: TransportSingleVehicleAllocationCostEditDto | undefined;
}

export class PagedResultDtoOfTransportSingleVehicleAllocationCostListDto implements IPagedResultDtoOfTransportSingleVehicleAllocationCostListDto {
    totalCount: number | undefined;
    items: TransportSingleVehicleAllocationCostListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportSingleVehicleAllocationCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportSingleVehicleAllocationCostListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportSingleVehicleAllocationCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportSingleVehicleAllocationCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportSingleVehicleAllocationCostListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportSingleVehicleAllocationCostListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportSingleVehicleAllocationCostListDto {
    totalCount: number | undefined;
    items: TransportSingleVehicleAllocationCostListDto[] | undefined;
}

export class TransportSingleVehicleAllocationCostListDto implements ITransportSingleVehicleAllocationCostListDto {
    /** 车号 */
    vehicleCode: string | undefined;
    /** 司机 */
    driverName: string | undefined;
    /** 费用项目（车贷、保险、GPS年费等） */
    expenseItem: string | undefined;
    /** 费用项目显示文本 */
    expenseItemText: string | undefined;
    /** 计费类型（订单、作业、单车、其他） */
    expenseType: string | undefined;
    /** 计费类型显示文本 */
    expenseTypeText: string | undefined;
    /** 分摊开始日期 */
    allocationDateStart: moment.Moment | undefined;
    /** 分摊结束日期 */
    allocationDateEnd: moment.Moment | undefined;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 摊销金额 */
    allocationAmount: number | undefined;
    /** 摊销方式（按年\月\日或者取结算周期） */
    allocationMethod: string | undefined;
    /** 摊销方式显示文本 */
    allocationMethodText: string | undefined;
    /** 分摊状态 */
    allocationStatus: string | undefined;
    /** 分摊状态显示文本 */
    allocationStatusText: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 运输公司 */
    organizationUnitId: number | undefined;
    /** 运输公司显示文本 */
    organizationUnitIdText: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITransportSingleVehicleAllocationCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.driverName = data["driverName"];
            this.expenseItem = data["expenseItem"];
            this.expenseItemText = data["expenseItemText"];
            this.expenseType = data["expenseType"];
            this.expenseTypeText = data["expenseTypeText"];
            this.allocationDateStart = data["allocationDateStart"] ? moment(data["allocationDateStart"].toString()) : <any>undefined;
            this.allocationDateEnd = data["allocationDateEnd"] ? moment(data["allocationDateEnd"].toString()) : <any>undefined;
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.allocationAmount = data["allocationAmount"];
            this.allocationMethod = data["allocationMethod"];
            this.allocationMethodText = data["allocationMethodText"];
            this.allocationStatus = data["allocationStatus"];
            this.allocationStatusText = data["allocationStatusText"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitIdText = data["organizationUnitIdText"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportSingleVehicleAllocationCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSingleVehicleAllocationCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["driverName"] = this.driverName;
        data["expenseItem"] = this.expenseItem;
        data["expenseItemText"] = this.expenseItemText;
        data["expenseType"] = this.expenseType;
        data["expenseTypeText"] = this.expenseTypeText;
        data["allocationDateStart"] = this.allocationDateStart ? this.allocationDateStart.toISOString() : <any>undefined;
        data["allocationDateEnd"] = this.allocationDateEnd ? this.allocationDateEnd.toISOString() : <any>undefined;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["allocationAmount"] = this.allocationAmount;
        data["allocationMethod"] = this.allocationMethod;
        data["allocationMethodText"] = this.allocationMethodText;
        data["allocationStatus"] = this.allocationStatus;
        data["allocationStatusText"] = this.allocationStatusText;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitIdText"] = this.organizationUnitIdText;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportSingleVehicleAllocationCostListDto {
        const json = this.toJSON();
        let result = new TransportSingleVehicleAllocationCostListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSingleVehicleAllocationCostListDto {
    /** 车号 */
    vehicleCode: string | undefined;
    /** 司机 */
    driverName: string | undefined;
    /** 费用项目（车贷、保险、GPS年费等） */
    expenseItem: string | undefined;
    /** 费用项目显示文本 */
    expenseItemText: string | undefined;
    /** 计费类型（订单、作业、单车、其他） */
    expenseType: string | undefined;
    /** 计费类型显示文本 */
    expenseTypeText: string | undefined;
    /** 分摊开始日期 */
    allocationDateStart: moment.Moment | undefined;
    /** 分摊结束日期 */
    allocationDateEnd: moment.Moment | undefined;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 摊销金额 */
    allocationAmount: number | undefined;
    /** 摊销方式（按年\月\日或者取结算周期） */
    allocationMethod: string | undefined;
    /** 摊销方式显示文本 */
    allocationMethodText: string | undefined;
    /** 分摊状态 */
    allocationStatus: string | undefined;
    /** 分摊状态显示文本 */
    allocationStatusText: string | undefined;
    /** 备注 */
    description: string | undefined;
    /** 运输公司 */
    organizationUnitId: number | undefined;
    /** 运输公司显示文本 */
    organizationUnitIdText: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfTransportDailyAllocationListDto implements IPagedResultDtoOfTransportDailyAllocationListDto {
    totalCount: number | undefined;
    items: TransportDailyAllocationListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportDailyAllocationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportDailyAllocationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportDailyAllocationListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportDailyAllocationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportDailyAllocationListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportDailyAllocationListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportDailyAllocationListDto {
    totalCount: number | undefined;
    items: TransportDailyAllocationListDto[] | undefined;
}

export class TransportDailyAllocationListDto implements ITransportDailyAllocationListDto {
    vehicleCode: string | undefined;
    driverName: string | undefined;
    /** 费用项目（车贷、保险、GPS年费等） */
    expenseItem: string | undefined;
    /** 费用项目显示文本 */
    expenseItemText: string | undefined;
    /** 记费类型（订单、作业、单车、其他） */
    expenseType: string | undefined;
    /** 计费类型显示文本 */
    expenseTypeText: string | undefined;
    allocationDate: moment.Moment | undefined;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 摊销金额 */
    allocationAmount: number | undefined;
    /** 摊销方式（按年\月\日或者取结算周期） */
    allocationMethod: string | undefined;
    /** 摊销方式显示文本 */
    allocationMethodText: string | undefined;
    description: string | undefined;
    organizationUnitId: number | undefined;
    /** 运输公司显示文本 */
    organizationUnitIdText: string | undefined;

    constructor(data?: ITransportDailyAllocationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.driverName = data["driverName"];
            this.expenseItem = data["expenseItem"];
            this.expenseItemText = data["expenseItemText"];
            this.expenseType = data["expenseType"];
            this.expenseTypeText = data["expenseTypeText"];
            this.allocationDate = data["allocationDate"] ? moment(data["allocationDate"].toString()) : <any>undefined;
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.allocationAmount = data["allocationAmount"];
            this.allocationMethod = data["allocationMethod"];
            this.allocationMethodText = data["allocationMethodText"];
            this.description = data["description"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitIdText = data["organizationUnitIdText"];
        }
    }

    static fromJS(data: any): TransportDailyAllocationListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportDailyAllocationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["driverName"] = this.driverName;
        data["expenseItem"] = this.expenseItem;
        data["expenseItemText"] = this.expenseItemText;
        data["expenseType"] = this.expenseType;
        data["expenseTypeText"] = this.expenseTypeText;
        data["allocationDate"] = this.allocationDate ? this.allocationDate.toISOString() : <any>undefined;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["allocationAmount"] = this.allocationAmount;
        data["allocationMethod"] = this.allocationMethod;
        data["allocationMethodText"] = this.allocationMethodText;
        data["description"] = this.description;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitIdText"] = this.organizationUnitIdText;
        return data; 
    }

    clone(): TransportDailyAllocationListDto {
        const json = this.toJSON();
        let result = new TransportDailyAllocationListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportDailyAllocationListDto {
    vehicleCode: string | undefined;
    driverName: string | undefined;
    /** 费用项目（车贷、保险、GPS年费等） */
    expenseItem: string | undefined;
    /** 费用项目显示文本 */
    expenseItemText: string | undefined;
    /** 记费类型（订单、作业、单车、其他） */
    expenseType: string | undefined;
    /** 计费类型显示文本 */
    expenseTypeText: string | undefined;
    allocationDate: moment.Moment | undefined;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 摊销金额 */
    allocationAmount: number | undefined;
    /** 摊销方式（按年\月\日或者取结算周期） */
    allocationMethod: string | undefined;
    /** 摊销方式显示文本 */
    allocationMethodText: string | undefined;
    description: string | undefined;
    organizationUnitId: number | undefined;
    /** 运输公司显示文本 */
    organizationUnitIdText: string | undefined;
}

export class PagedResultDtoOfTransportSingleVehicleDailyCostListDto implements IPagedResultDtoOfTransportSingleVehicleDailyCostListDto {
    totalCount: number | undefined;
    items: TransportSingleVehicleDailyCostListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportSingleVehicleDailyCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportSingleVehicleDailyCostListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportSingleVehicleDailyCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportSingleVehicleDailyCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportSingleVehicleDailyCostListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportSingleVehicleDailyCostListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportSingleVehicleDailyCostListDto {
    totalCount: number | undefined;
    items: TransportSingleVehicleDailyCostListDto[] | undefined;
}

export class TransportSingleVehicleDailyCostListDto implements ITransportSingleVehicleDailyCostListDto {
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    driverName: string | undefined;
    driverIDNumber: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    expenseOccurTypeName: string | undefined;
    /** 入账日期 */
    accountingDate: moment.Moment | undefined;
    /** 发生日期 */
    happenDate: moment.Moment | undefined;
    /** 费用项目（过路过桥费、加水等） */
    expenseItem: string | undefined;
    expenseItemName: string | undefined;
    /** 抵扣类型 */
    deductionType: string | undefined;
    deductionTypeName: string | undefined;
    /** 金额 */
    amount: number | undefined;
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    description: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITransportSingleVehicleDailyCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.expenseOccurType = data["expenseOccurType"];
            this.expenseOccurTypeName = data["expenseOccurTypeName"];
            this.accountingDate = data["accountingDate"] ? moment(data["accountingDate"].toString()) : <any>undefined;
            this.happenDate = data["happenDate"] ? moment(data["happenDate"].toString()) : <any>undefined;
            this.expenseItem = data["expenseItem"];
            this.expenseItemName = data["expenseItemName"];
            this.deductionType = data["deductionType"];
            this.deductionTypeName = data["deductionTypeName"];
            this.amount = data["amount"];
            this.organizationUnitId = data["organizationUnitId"];
            this.orgUnitName = data["orgUnitName"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportSingleVehicleDailyCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSingleVehicleDailyCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["expenseOccurType"] = this.expenseOccurType;
        data["expenseOccurTypeName"] = this.expenseOccurTypeName;
        data["accountingDate"] = this.accountingDate ? this.accountingDate.toISOString() : <any>undefined;
        data["happenDate"] = this.happenDate ? this.happenDate.toISOString() : <any>undefined;
        data["expenseItem"] = this.expenseItem;
        data["expenseItemName"] = this.expenseItemName;
        data["deductionType"] = this.deductionType;
        data["deductionTypeName"] = this.deductionTypeName;
        data["amount"] = this.amount;
        data["organizationUnitId"] = this.organizationUnitId;
        data["orgUnitName"] = this.orgUnitName;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportSingleVehicleDailyCostListDto {
        const json = this.toJSON();
        let result = new TransportSingleVehicleDailyCostListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSingleVehicleDailyCostListDto {
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    driverName: string | undefined;
    driverIDNumber: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    expenseOccurTypeName: string | undefined;
    /** 入账日期 */
    accountingDate: moment.Moment | undefined;
    /** 发生日期 */
    happenDate: moment.Moment | undefined;
    /** 费用项目（过路过桥费、加水等） */
    expenseItem: string | undefined;
    expenseItemName: string | undefined;
    /** 抵扣类型 */
    deductionType: string | undefined;
    deductionTypeName: string | undefined;
    /** 金额 */
    amount: number | undefined;
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    description: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetTransportSingleVehicleDailyCostForEditOutput implements IGetTransportSingleVehicleDailyCostForEditOutput {
    transportSingleVehicleDailyCost: TransportSingleVehicleDailyCostEditDto | undefined;

    constructor(data?: IGetTransportSingleVehicleDailyCostForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleDailyCost = data["transportSingleVehicleDailyCost"] ? TransportSingleVehicleDailyCostEditDto.fromJS(data["transportSingleVehicleDailyCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTransportSingleVehicleDailyCostForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransportSingleVehicleDailyCostForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleDailyCost"] = this.transportSingleVehicleDailyCost ? this.transportSingleVehicleDailyCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetTransportSingleVehicleDailyCostForEditOutput {
        const json = this.toJSON();
        let result = new GetTransportSingleVehicleDailyCostForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTransportSingleVehicleDailyCostForEditOutput {
    transportSingleVehicleDailyCost: TransportSingleVehicleDailyCostEditDto | undefined;
}

export class TransportSingleVehicleDailyCostEditDto implements ITransportSingleVehicleDailyCostEditDto {
    id: string | undefined;
    vehicleCode: string;
    /** 车牌号 */
    mainVehiclePlate: string;
    driverName: string;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string;
    /** 入账日期 */
    accountingDate: moment.Moment;
    /** 发生日期 */
    happenDate: moment.Moment;
    /** 费用项目（过路过桥费、加水等） */
    expenseItem: string;
    /** 抵扣类型 */
    deductionType: string;
    /** 应收总金额 */
    amount: number;
    organizationUnitId: number;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    description: string | undefined;

    constructor(data?: ITransportSingleVehicleDailyCostEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.expenseOccurType = data["expenseOccurType"];
            this.accountingDate = data["accountingDate"] ? moment(data["accountingDate"].toString()) : <any>undefined;
            this.happenDate = data["happenDate"] ? moment(data["happenDate"].toString()) : <any>undefined;
            this.expenseItem = data["expenseItem"];
            this.deductionType = data["deductionType"];
            this.amount = data["amount"];
            this.organizationUnitId = data["organizationUnitId"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.description = data["description"];
        }
    }

    static fromJS(data: any): TransportSingleVehicleDailyCostEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSingleVehicleDailyCostEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["expenseOccurType"] = this.expenseOccurType;
        data["accountingDate"] = this.accountingDate ? this.accountingDate.toISOString() : <any>undefined;
        data["happenDate"] = this.happenDate ? this.happenDate.toISOString() : <any>undefined;
        data["expenseItem"] = this.expenseItem;
        data["deductionType"] = this.deductionType;
        data["amount"] = this.amount;
        data["organizationUnitId"] = this.organizationUnitId;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        return data; 
    }

    clone(): TransportSingleVehicleDailyCostEditDto {
        const json = this.toJSON();
        let result = new TransportSingleVehicleDailyCostEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSingleVehicleDailyCostEditDto {
    id: string | undefined;
    vehicleCode: string;
    /** 车牌号 */
    mainVehiclePlate: string;
    driverName: string;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string;
    /** 入账日期 */
    accountingDate: moment.Moment;
    /** 发生日期 */
    happenDate: moment.Moment;
    /** 费用项目（过路过桥费、加水等） */
    expenseItem: string;
    /** 抵扣类型 */
    deductionType: string;
    /** 应收总金额 */
    amount: number;
    organizationUnitId: number;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
    description: string | undefined;
}

export class CreateOrEditTransportSingleVehicleDailyCostInput implements ICreateOrEditTransportSingleVehicleDailyCostInput {
    transportSingleVehicleDailyCost: TransportSingleVehicleDailyCostEditDto | undefined;

    constructor(data?: ICreateOrEditTransportSingleVehicleDailyCostInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleDailyCost = data["transportSingleVehicleDailyCost"] ? TransportSingleVehicleDailyCostEditDto.fromJS(data["transportSingleVehicleDailyCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditTransportSingleVehicleDailyCostInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTransportSingleVehicleDailyCostInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleDailyCost"] = this.transportSingleVehicleDailyCost ? this.transportSingleVehicleDailyCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditTransportSingleVehicleDailyCostInput {
        const json = this.toJSON();
        let result = new CreateOrEditTransportSingleVehicleDailyCostInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditTransportSingleVehicleDailyCostInput {
    transportSingleVehicleDailyCost: TransportSingleVehicleDailyCostEditDto | undefined;
}

export class ApproalTransportSingleVehicleDailyCostEditDto implements IApproalTransportSingleVehicleDailyCostEditDto {
    idStr: string | undefined;
    id: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;

    constructor(data?: IApproalTransportSingleVehicleDailyCostEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idStr = data["idStr"];
            this.id = data["id"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ApproalTransportSingleVehicleDailyCostEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApproalTransportSingleVehicleDailyCostEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idStr"] = this.idStr;
        data["id"] = this.id;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): ApproalTransportSingleVehicleDailyCostEditDto {
        const json = this.toJSON();
        let result = new ApproalTransportSingleVehicleDailyCostEditDto();
        result.init(json);
        return result;
    }
}

export interface IApproalTransportSingleVehicleDailyCostEditDto {
    idStr: string | undefined;
    id: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
}

export class PagedResultDtoOfSingleVehicleFreightReportEditDto implements IPagedResultDtoOfSingleVehicleFreightReportEditDto {
    totalCount: number | undefined;
    items: SingleVehicleFreightReportEditDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSingleVehicleFreightReportEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SingleVehicleFreightReportEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSingleVehicleFreightReportEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSingleVehicleFreightReportEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSingleVehicleFreightReportEditDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSingleVehicleFreightReportEditDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSingleVehicleFreightReportEditDto {
    totalCount: number | undefined;
    items: SingleVehicleFreightReportEditDto[] | undefined;
}

export class SingleVehicleFreightReportEditDto implements ISingleVehicleFreightReportEditDto {
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 记账开始日期 */
    accountingDateFrom: moment.Moment | undefined;
    /** 记账结束日期 */
    accountingDateTo: moment.Moment | undefined;
    /** 超损重量 */
    excessWeight: number | undefined;
    /** 货损金额 */
    damageAmount: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 车数 */
    vehicleCount: number | undefined;
    /** 单车应记运输量 */
    finalNetWeight: number | undefined;
    /** 应记运费金额（毛收） */
    grossIncomeFreight: number | undefined;
    /** 日摊汇总 */
    alloctionFee: number | undefined;
    /** 特殊费用合计 */
    specialFee: number | undefined;
    /** 过路费 */
    roadFee: number | undefined;
    /** 保险分摊费用 */
    insuranceFee: number | undefined;
    /** 保险登记费用 */
    insuranceRegisterFee: number | undefined;
    /** 车贷费用 */
    vehicleLoan: number | undefined;
    /** 修理费 */
    maintenanceFee: number | undefined;
    /** 轮胎更换费 */
    replaceFee: number | undefined;
    /** 燃料费 */
    fuelFee: number | undefined;
    outFuelFee: number | undefined;
    loanFee: number | undefined;
    /** 服务费 */
    coverCharge: number | undefined;
    /** 上月费用合计 */
    lastTotalFee: number | undefined;
    /** 上月单车纯收入 */
    lastNetIncomeFreight: number | undefined;
    /** 费用合计 */
    totalFee: number | undefined;
    /** 单车纯收入 */
    netIncomeFreight: number | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;

    constructor(data?: ISingleVehicleFreightReportEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountingDateFrom = data["accountingDateFrom"] ? moment(data["accountingDateFrom"].toString()) : <any>undefined;
            this.accountingDateTo = data["accountingDateTo"] ? moment(data["accountingDateTo"].toString()) : <any>undefined;
            this.excessWeight = data["excessWeight"];
            this.damageAmount = data["damageAmount"];
            this.reduceTransFee = data["reduceTransFee"];
            this.addTransFee = data["addTransFee"];
            this.vehicleCount = data["vehicleCount"];
            this.finalNetWeight = data["finalNetWeight"];
            this.grossIncomeFreight = data["grossIncomeFreight"];
            this.alloctionFee = data["alloctionFee"];
            this.specialFee = data["specialFee"];
            this.roadFee = data["roadFee"];
            this.insuranceFee = data["insuranceFee"];
            this.insuranceRegisterFee = data["insuranceRegisterFee"];
            this.vehicleLoan = data["vehicleLoan"];
            this.maintenanceFee = data["maintenanceFee"];
            this.replaceFee = data["replaceFee"];
            this.fuelFee = data["fuelFee"];
            this.outFuelFee = data["outFuelFee"];
            this.loanFee = data["loanFee"];
            this.coverCharge = data["coverCharge"];
            this.lastTotalFee = data["lastTotalFee"];
            this.lastNetIncomeFreight = data["lastNetIncomeFreight"];
            this.totalFee = data["totalFee"];
            this.netIncomeFreight = data["netIncomeFreight"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
        }
    }

    static fromJS(data: any): SingleVehicleFreightReportEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleFreightReportEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountingDateFrom"] = this.accountingDateFrom ? this.accountingDateFrom.toISOString() : <any>undefined;
        data["accountingDateTo"] = this.accountingDateTo ? this.accountingDateTo.toISOString() : <any>undefined;
        data["excessWeight"] = this.excessWeight;
        data["damageAmount"] = this.damageAmount;
        data["reduceTransFee"] = this.reduceTransFee;
        data["addTransFee"] = this.addTransFee;
        data["vehicleCount"] = this.vehicleCount;
        data["finalNetWeight"] = this.finalNetWeight;
        data["grossIncomeFreight"] = this.grossIncomeFreight;
        data["alloctionFee"] = this.alloctionFee;
        data["specialFee"] = this.specialFee;
        data["roadFee"] = this.roadFee;
        data["insuranceFee"] = this.insuranceFee;
        data["insuranceRegisterFee"] = this.insuranceRegisterFee;
        data["vehicleLoan"] = this.vehicleLoan;
        data["maintenanceFee"] = this.maintenanceFee;
        data["replaceFee"] = this.replaceFee;
        data["fuelFee"] = this.fuelFee;
        data["outFuelFee"] = this.outFuelFee;
        data["loanFee"] = this.loanFee;
        data["coverCharge"] = this.coverCharge;
        data["lastTotalFee"] = this.lastTotalFee;
        data["lastNetIncomeFreight"] = this.lastNetIncomeFreight;
        data["totalFee"] = this.totalFee;
        data["netIncomeFreight"] = this.netIncomeFreight;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        return data; 
    }

    clone(): SingleVehicleFreightReportEditDto {
        const json = this.toJSON();
        let result = new SingleVehicleFreightReportEditDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleFreightReportEditDto {
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 记账开始日期 */
    accountingDateFrom: moment.Moment | undefined;
    /** 记账结束日期 */
    accountingDateTo: moment.Moment | undefined;
    /** 超损重量 */
    excessWeight: number | undefined;
    /** 货损金额 */
    damageAmount: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 车数 */
    vehicleCount: number | undefined;
    /** 单车应记运输量 */
    finalNetWeight: number | undefined;
    /** 应记运费金额（毛收） */
    grossIncomeFreight: number | undefined;
    /** 日摊汇总 */
    alloctionFee: number | undefined;
    /** 特殊费用合计 */
    specialFee: number | undefined;
    /** 过路费 */
    roadFee: number | undefined;
    /** 保险分摊费用 */
    insuranceFee: number | undefined;
    /** 保险登记费用 */
    insuranceRegisterFee: number | undefined;
    /** 车贷费用 */
    vehicleLoan: number | undefined;
    /** 修理费 */
    maintenanceFee: number | undefined;
    /** 轮胎更换费 */
    replaceFee: number | undefined;
    /** 燃料费 */
    fuelFee: number | undefined;
    outFuelFee: number | undefined;
    loanFee: number | undefined;
    /** 服务费 */
    coverCharge: number | undefined;
    /** 上月费用合计 */
    lastTotalFee: number | undefined;
    /** 上月单车纯收入 */
    lastNetIncomeFreight: number | undefined;
    /** 费用合计 */
    totalFee: number | undefined;
    /** 单车纯收入 */
    netIncomeFreight: number | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
}

export class PagedResultDtoOfVehicleFreightReportSubmitAccountEditDto implements IPagedResultDtoOfVehicleFreightReportSubmitAccountEditDto {
    totalCount: number | undefined;
    items: VehicleFreightReportSubmitAccountEditDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleFreightReportSubmitAccountEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleFreightReportSubmitAccountEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleFreightReportSubmitAccountEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleFreightReportSubmitAccountEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleFreightReportSubmitAccountEditDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleFreightReportSubmitAccountEditDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleFreightReportSubmitAccountEditDto {
    totalCount: number | undefined;
    items: VehicleFreightReportSubmitAccountEditDto[] | undefined;
}

export class VehicleFreightReportSubmitAccountEditDto implements IVehicleFreightReportSubmitAccountEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 记账开始日期 */
    accountingDateFrom: moment.Moment | undefined;
    /** 记账结束日期 */
    accountingDateTo: moment.Moment | undefined;
    /** 超损重量 */
    excessWeight: number | undefined;
    /** 货损金额 */
    damageAmount: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 车数 */
    vehicleCount: number | undefined;
    /** 单车应记运输量 */
    finalNetWeight: number | undefined;
    /** 应记运费金额（毛收） */
    grossIncomeFreight: number | undefined;
    /** 日摊汇总 */
    alloctionFee: number | undefined;
    /** 特殊费用合计 */
    specialFee: number | undefined;
    /** 过路费 */
    roadFee: number | undefined;
    /** 保险分摊费用 */
    insuranceFee: number | undefined;
    /** 保险登记费用 */
    insuranceRegisterFee: number | undefined;
    /** 车贷费用 */
    vehicleLoan: number | undefined;
    /** 修理费 */
    maintenanceFee: number | undefined;
    /** 轮胎更换费 */
    replaceFee: number | undefined;
    /** 燃料费 */
    fuelFee: number | undefined;
    outFuelFee: number | undefined;
    loanFee: number | undefined;
    /** 服务费 */
    coverCharge: number | undefined;
    /** 上月费用合计 */
    lastTotalFee: number | undefined;
    /** 上月单车纯收入 */
    lastNetIncomeFreight: number | undefined;
    /** 费用合计 */
    totalFee: number | undefined;
    /** 单车纯收入 */
    netIncomeFreight: number | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    submitAccountState: VehicleFreightReportSubmitAccountEditDtoSubmitAccountState | undefined;

    constructor(data?: IVehicleFreightReportSubmitAccountEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountingDateFrom = data["accountingDateFrom"] ? moment(data["accountingDateFrom"].toString()) : <any>undefined;
            this.accountingDateTo = data["accountingDateTo"] ? moment(data["accountingDateTo"].toString()) : <any>undefined;
            this.excessWeight = data["excessWeight"];
            this.damageAmount = data["damageAmount"];
            this.reduceTransFee = data["reduceTransFee"];
            this.addTransFee = data["addTransFee"];
            this.vehicleCount = data["vehicleCount"];
            this.finalNetWeight = data["finalNetWeight"];
            this.grossIncomeFreight = data["grossIncomeFreight"];
            this.alloctionFee = data["alloctionFee"];
            this.specialFee = data["specialFee"];
            this.roadFee = data["roadFee"];
            this.insuranceFee = data["insuranceFee"];
            this.insuranceRegisterFee = data["insuranceRegisterFee"];
            this.vehicleLoan = data["vehicleLoan"];
            this.maintenanceFee = data["maintenanceFee"];
            this.replaceFee = data["replaceFee"];
            this.fuelFee = data["fuelFee"];
            this.outFuelFee = data["outFuelFee"];
            this.loanFee = data["loanFee"];
            this.coverCharge = data["coverCharge"];
            this.lastTotalFee = data["lastTotalFee"];
            this.lastNetIncomeFreight = data["lastNetIncomeFreight"];
            this.totalFee = data["totalFee"];
            this.netIncomeFreight = data["netIncomeFreight"];
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.submitAccountState = data["submitAccountState"];
        }
    }

    static fromJS(data: any): VehicleFreightReportSubmitAccountEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleFreightReportSubmitAccountEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountingDateFrom"] = this.accountingDateFrom ? this.accountingDateFrom.toISOString() : <any>undefined;
        data["accountingDateTo"] = this.accountingDateTo ? this.accountingDateTo.toISOString() : <any>undefined;
        data["excessWeight"] = this.excessWeight;
        data["damageAmount"] = this.damageAmount;
        data["reduceTransFee"] = this.reduceTransFee;
        data["addTransFee"] = this.addTransFee;
        data["vehicleCount"] = this.vehicleCount;
        data["finalNetWeight"] = this.finalNetWeight;
        data["grossIncomeFreight"] = this.grossIncomeFreight;
        data["alloctionFee"] = this.alloctionFee;
        data["specialFee"] = this.specialFee;
        data["roadFee"] = this.roadFee;
        data["insuranceFee"] = this.insuranceFee;
        data["insuranceRegisterFee"] = this.insuranceRegisterFee;
        data["vehicleLoan"] = this.vehicleLoan;
        data["maintenanceFee"] = this.maintenanceFee;
        data["replaceFee"] = this.replaceFee;
        data["fuelFee"] = this.fuelFee;
        data["outFuelFee"] = this.outFuelFee;
        data["loanFee"] = this.loanFee;
        data["coverCharge"] = this.coverCharge;
        data["lastTotalFee"] = this.lastTotalFee;
        data["lastNetIncomeFreight"] = this.lastNetIncomeFreight;
        data["totalFee"] = this.totalFee;
        data["netIncomeFreight"] = this.netIncomeFreight;
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["submitAccountState"] = this.submitAccountState;
        return data; 
    }

    clone(): VehicleFreightReportSubmitAccountEditDto {
        const json = this.toJSON();
        let result = new VehicleFreightReportSubmitAccountEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleFreightReportSubmitAccountEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 记账开始日期 */
    accountingDateFrom: moment.Moment | undefined;
    /** 记账结束日期 */
    accountingDateTo: moment.Moment | undefined;
    /** 超损重量 */
    excessWeight: number | undefined;
    /** 货损金额 */
    damageAmount: number | undefined;
    /** 应扣运费 */
    reduceTransFee: number | undefined;
    /** 应补运费 */
    addTransFee: number | undefined;
    /** 车数 */
    vehicleCount: number | undefined;
    /** 单车应记运输量 */
    finalNetWeight: number | undefined;
    /** 应记运费金额（毛收） */
    grossIncomeFreight: number | undefined;
    /** 日摊汇总 */
    alloctionFee: number | undefined;
    /** 特殊费用合计 */
    specialFee: number | undefined;
    /** 过路费 */
    roadFee: number | undefined;
    /** 保险分摊费用 */
    insuranceFee: number | undefined;
    /** 保险登记费用 */
    insuranceRegisterFee: number | undefined;
    /** 车贷费用 */
    vehicleLoan: number | undefined;
    /** 修理费 */
    maintenanceFee: number | undefined;
    /** 轮胎更换费 */
    replaceFee: number | undefined;
    /** 燃料费 */
    fuelFee: number | undefined;
    outFuelFee: number | undefined;
    loanFee: number | undefined;
    /** 服务费 */
    coverCharge: number | undefined;
    /** 上月费用合计 */
    lastTotalFee: number | undefined;
    /** 上月单车纯收入 */
    lastNetIncomeFreight: number | undefined;
    /** 费用合计 */
    totalFee: number | undefined;
    /** 单车纯收入 */
    netIncomeFreight: number | undefined;
    organizationUnitId: number | undefined;
    organizationUnitName: string | undefined;
    submitAccountState: VehicleFreightReportSubmitAccountEditDtoSubmitAccountState | undefined;
}

export class ListResultDtoOfTransportSingleVehicleFreightSubItemCostListDto implements IListResultDtoOfTransportSingleVehicleFreightSubItemCostListDto {
    items: TransportSingleVehicleFreightSubItemCostListDto[] | undefined;

    constructor(data?: IListResultDtoOfTransportSingleVehicleFreightSubItemCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportSingleVehicleFreightSubItemCostListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTransportSingleVehicleFreightSubItemCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfTransportSingleVehicleFreightSubItemCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfTransportSingleVehicleFreightSubItemCostListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfTransportSingleVehicleFreightSubItemCostListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfTransportSingleVehicleFreightSubItemCostListDto {
    items: TransportSingleVehicleFreightSubItemCostListDto[] | undefined;
}

export class TransportSingleVehicleFreightSubItemCostListDto implements ITransportSingleVehicleFreightSubItemCostListDto {
    vehicleCode: string | undefined;
    accountingDate: moment.Moment | undefined;
    /** 费用类型(日摊、作业过程费用、特殊费用) */
    expenseType: TransportSingleVehicleFreightSubItemCostListDtoExpenseType | undefined;
    readonly expenseTypeString: string | undefined;
    /** 费用项目（信息费、装车费、卸车费、过磅费） */
    expenseItem: string;
    expenseItemName: string | undefined;
    amount: number | undefined;

    constructor(data?: ITransportSingleVehicleFreightSubItemCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.accountingDate = data["accountingDate"] ? moment(data["accountingDate"].toString()) : <any>undefined;
            this.expenseType = data["expenseType"];
            (<any>this).expenseTypeString = data["expenseTypeString"];
            this.expenseItem = data["expenseItem"];
            this.expenseItemName = data["expenseItemName"];
            this.amount = data["amount"];
        }
    }

    static fromJS(data: any): TransportSingleVehicleFreightSubItemCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSingleVehicleFreightSubItemCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["accountingDate"] = this.accountingDate ? this.accountingDate.toISOString() : <any>undefined;
        data["expenseType"] = this.expenseType;
        data["expenseTypeString"] = this.expenseTypeString;
        data["expenseItem"] = this.expenseItem;
        data["expenseItemName"] = this.expenseItemName;
        data["amount"] = this.amount;
        return data; 
    }

    clone(): TransportSingleVehicleFreightSubItemCostListDto {
        const json = this.toJSON();
        let result = new TransportSingleVehicleFreightSubItemCostListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSingleVehicleFreightSubItemCostListDto {
    vehicleCode: string | undefined;
    accountingDate: moment.Moment | undefined;
    /** 费用类型(日摊、作业过程费用、特殊费用) */
    expenseType: TransportSingleVehicleFreightSubItemCostListDtoExpenseType | undefined;
    expenseTypeString: string | undefined;
    /** 费用项目（信息费、装车费、卸车费、过磅费） */
    expenseItem: string;
    expenseItemName: string | undefined;
    amount: number | undefined;
}

export class CreateSingleVehicleFreightReportInput implements ICreateSingleVehicleFreightReportInput {
    singleVehicleFreightReports: SingleVehicleFreightReportEditDto[] | undefined;

    constructor(data?: ICreateSingleVehicleFreightReportInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["singleVehicleFreightReports"] && data["singleVehicleFreightReports"].constructor === Array) {
                this.singleVehicleFreightReports = [] as any;
                for (let item of data["singleVehicleFreightReports"])
                    this.singleVehicleFreightReports.push(SingleVehicleFreightReportEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateSingleVehicleFreightReportInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSingleVehicleFreightReportInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.singleVehicleFreightReports && this.singleVehicleFreightReports.constructor === Array) {
            data["singleVehicleFreightReports"] = [];
            for (let item of this.singleVehicleFreightReports)
                data["singleVehicleFreightReports"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateSingleVehicleFreightReportInput {
        const json = this.toJSON();
        let result = new CreateSingleVehicleFreightReportInput();
        result.init(json);
        return result;
    }
}

export interface ICreateSingleVehicleFreightReportInput {
    singleVehicleFreightReports: SingleVehicleFreightReportEditDto[] | undefined;
}

export class PagedResultDtoOfTransportSingleVehicleRoadCostListDto implements IPagedResultDtoOfTransportSingleVehicleRoadCostListDto {
    totalCount: number | undefined;
    items: TransportSingleVehicleRoadCostListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfTransportSingleVehicleRoadCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportSingleVehicleRoadCostListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTransportSingleVehicleRoadCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTransportSingleVehicleRoadCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfTransportSingleVehicleRoadCostListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfTransportSingleVehicleRoadCostListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfTransportSingleVehicleRoadCostListDto {
    totalCount: number | undefined;
    items: TransportSingleVehicleRoadCostListDto[] | undefined;
}

export class TransportSingleVehicleRoadCostListDto implements ITransportSingleVehicleRoadCostListDto {
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    /** 入账日期 */
    accountingDate: moment.Moment | undefined;
    /** 发生日期 */
    happenDate: moment.Moment | undefined;
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    /** 司机 */
    driverName: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    expenseOccurTypeName: string | undefined;
    /** 费用项目（过路过桥费、加水等） */
    expenseItem: string | undefined;
    expenseItemName: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 通行次数 */
    passNumber: number | undefined;
    /** 原始金额 */
    amount: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额 */
    noTaxAmount: number | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    customerIdName: string | undefined;
    /** 客户付款方式（数据字典维护） */
    payedMode: string | undefined;
    payedModeName: string | undefined;
    /** 单车结算方式（数据字典维护） */
    deductionType: string | undefined;
    deductionTypeName: string | undefined;
    /** 审核状态（数据字典维护）未审核、审核退回、审核通过、已作废等 */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 第三方系统编号 */
    thirdPartyCode: string | undefined;
    /** 第三方车辆编号 */
    thirdPartyVehicleNumber: string | undefined;
    /** 数据类型 */
    dataType: TransportSingleVehicleRoadCostListDtoDataType | undefined;
    readonly dataTypeText: string | undefined;
    description: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITransportSingleVehicleRoadCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.orgUnitName = data["orgUnitName"];
            this.accountingDate = data["accountingDate"] ? moment(data["accountingDate"].toString()) : <any>undefined;
            this.happenDate = data["happenDate"] ? moment(data["happenDate"].toString()) : <any>undefined;
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.expenseOccurType = data["expenseOccurType"];
            this.expenseOccurTypeName = data["expenseOccurTypeName"];
            this.expenseItem = data["expenseItem"];
            this.expenseItemName = data["expenseItemName"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.passNumber = data["passNumber"];
            this.amount = data["amount"];
            this.taxAmount = data["taxAmount"];
            this.noTaxAmount = data["noTaxAmount"];
            this.customerId = data["customerId"];
            this.customerIdName = data["customerIdName"];
            this.payedMode = data["payedMode"];
            this.payedModeName = data["payedModeName"];
            this.deductionType = data["deductionType"];
            this.deductionTypeName = data["deductionTypeName"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.thirdPartyCode = data["thirdPartyCode"];
            this.thirdPartyVehicleNumber = data["thirdPartyVehicleNumber"];
            this.dataType = data["dataType"];
            (<any>this).dataTypeText = data["dataTypeText"];
            this.description = data["description"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportSingleVehicleRoadCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSingleVehicleRoadCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["orgUnitName"] = this.orgUnitName;
        data["accountingDate"] = this.accountingDate ? this.accountingDate.toISOString() : <any>undefined;
        data["happenDate"] = this.happenDate ? this.happenDate.toISOString() : <any>undefined;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["expenseOccurType"] = this.expenseOccurType;
        data["expenseOccurTypeName"] = this.expenseOccurTypeName;
        data["expenseItem"] = this.expenseItem;
        data["expenseItemName"] = this.expenseItemName;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["passNumber"] = this.passNumber;
        data["amount"] = this.amount;
        data["taxAmount"] = this.taxAmount;
        data["noTaxAmount"] = this.noTaxAmount;
        data["customerId"] = this.customerId;
        data["customerIdName"] = this.customerIdName;
        data["payedMode"] = this.payedMode;
        data["payedModeName"] = this.payedModeName;
        data["deductionType"] = this.deductionType;
        data["deductionTypeName"] = this.deductionTypeName;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["thirdPartyVehicleNumber"] = this.thirdPartyVehicleNumber;
        data["dataType"] = this.dataType;
        data["dataTypeText"] = this.dataTypeText;
        data["description"] = this.description;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportSingleVehicleRoadCostListDto {
        const json = this.toJSON();
        let result = new TransportSingleVehicleRoadCostListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSingleVehicleRoadCostListDto {
    organizationUnitId: number | undefined;
    orgUnitName: string | undefined;
    /** 入账日期 */
    accountingDate: moment.Moment | undefined;
    /** 发生日期 */
    happenDate: moment.Moment | undefined;
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    /** 司机 */
    driverName: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string | undefined;
    expenseOccurTypeName: string | undefined;
    /** 费用项目（过路过桥费、加水等） */
    expenseItem: string | undefined;
    expenseItemName: string | undefined;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number | undefined;
    /** 通行次数 */
    passNumber: number | undefined;
    /** 原始金额 */
    amount: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额 */
    noTaxAmount: number | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    customerIdName: string | undefined;
    /** 客户付款方式（数据字典维护） */
    payedMode: string | undefined;
    payedModeName: string | undefined;
    /** 单车结算方式（数据字典维护） */
    deductionType: string | undefined;
    deductionTypeName: string | undefined;
    /** 审核状态（数据字典维护）未审核、审核退回、审核通过、已作废等 */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 第三方系统编号 */
    thirdPartyCode: string | undefined;
    /** 第三方车辆编号 */
    thirdPartyVehicleNumber: string | undefined;
    /** 数据类型 */
    dataType: TransportSingleVehicleRoadCostListDtoDataType | undefined;
    dataTypeText: string | undefined;
    description: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetTransportSingleVehicleRoadCostForEditOutput implements IGetTransportSingleVehicleRoadCostForEditOutput {
    transportSingleVehicleDailyCost: TransportSingleVehicleRoadCostEditDto | undefined;

    constructor(data?: IGetTransportSingleVehicleRoadCostForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleDailyCost = data["transportSingleVehicleDailyCost"] ? TransportSingleVehicleRoadCostEditDto.fromJS(data["transportSingleVehicleDailyCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTransportSingleVehicleRoadCostForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetTransportSingleVehicleRoadCostForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleDailyCost"] = this.transportSingleVehicleDailyCost ? this.transportSingleVehicleDailyCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetTransportSingleVehicleRoadCostForEditOutput {
        const json = this.toJSON();
        let result = new GetTransportSingleVehicleRoadCostForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetTransportSingleVehicleRoadCostForEditOutput {
    transportSingleVehicleDailyCost: TransportSingleVehicleRoadCostEditDto | undefined;
}

export class TransportSingleVehicleRoadCostEditDto implements ITransportSingleVehicleRoadCostEditDto {
    id: string | undefined;
    organizationUnitId: number;
    /** 入账日期 */
    accountingDate: moment.Moment;
    /** 发生日期 */
    happenDate: moment.Moment;
    vehicleCode: string;
    mainVehiclePlate: string;
    /** 司机姓名 */
    driverName: string;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string;
    /** 费用项目（过路过桥费、加水等） */
    expenseItem: string;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number;
    /** 通行次数 */
    passNumber: number;
    /** 原始金额 */
    amount: number;
    /** 含税金额 */
    taxAmount: number;
    /** 不含税金额 */
    noTaxAmount: number;
    /** 费用客户 */
    customerId: number;
    /** 客户付款方式（数据字典维护） */
    payedMode: string;
    /** 单车结算方式（数据字典维护） */
    deductionType: string;
    /** 审核状态（数据字典维护）未审核、审核退回、审核通过、已作废等 */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 第三方系统编号 */
    thirdPartyCode: string | undefined;
    /** 第三方车辆编号 */
    thirdPartyVehicleNumber: string | undefined;
    /** 数据类型 */
    dataType: TransportSingleVehicleRoadCostEditDtoDataType | undefined;
    description: string | undefined;

    constructor(data?: ITransportSingleVehicleRoadCostEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.accountingDate = data["accountingDate"] ? moment(data["accountingDate"].toString()) : <any>undefined;
            this.happenDate = data["happenDate"] ? moment(data["happenDate"].toString()) : <any>undefined;
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.driverName = data["driverName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.expenseOccurType = data["expenseOccurType"];
            this.expenseItem = data["expenseItem"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.passNumber = data["passNumber"];
            this.amount = data["amount"];
            this.taxAmount = data["taxAmount"];
            this.noTaxAmount = data["noTaxAmount"];
            this.customerId = data["customerId"];
            this.payedMode = data["payedMode"];
            this.deductionType = data["deductionType"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
            this.thirdPartyCode = data["thirdPartyCode"];
            this.thirdPartyVehicleNumber = data["thirdPartyVehicleNumber"];
            this.dataType = data["dataType"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): TransportSingleVehicleRoadCostEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportSingleVehicleRoadCostEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["accountingDate"] = this.accountingDate ? this.accountingDate.toISOString() : <any>undefined;
        data["happenDate"] = this.happenDate ? this.happenDate.toISOString() : <any>undefined;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["driverName"] = this.driverName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["expenseOccurType"] = this.expenseOccurType;
        data["expenseItem"] = this.expenseItem;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["passNumber"] = this.passNumber;
        data["amount"] = this.amount;
        data["taxAmount"] = this.taxAmount;
        data["noTaxAmount"] = this.noTaxAmount;
        data["customerId"] = this.customerId;
        data["payedMode"] = this.payedMode;
        data["deductionType"] = this.deductionType;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["thirdPartyVehicleNumber"] = this.thirdPartyVehicleNumber;
        data["dataType"] = this.dataType;
        data["description"] = this.description;
        return data; 
    }

    clone(): TransportSingleVehicleRoadCostEditDto {
        const json = this.toJSON();
        let result = new TransportSingleVehicleRoadCostEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportSingleVehicleRoadCostEditDto {
    id: string | undefined;
    organizationUnitId: number;
    /** 入账日期 */
    accountingDate: moment.Moment;
    /** 发生日期 */
    happenDate: moment.Moment;
    vehicleCode: string;
    mainVehiclePlate: string;
    /** 司机姓名 */
    driverName: string;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 费用发生地（装地、卸地、作业途中、整个作业中） */
    expenseOccurType: string;
    /** 费用项目（过路过桥费、加水等） */
    expenseItem: string;
    /** 是否含税 */
    isHaveTax: boolean | undefined;
    /** 税率 */
    taxRate: number;
    /** 通行次数 */
    passNumber: number;
    /** 原始金额 */
    amount: number;
    /** 含税金额 */
    taxAmount: number;
    /** 不含税金额 */
    noTaxAmount: number;
    /** 费用客户 */
    customerId: number;
    /** 客户付款方式（数据字典维护） */
    payedMode: string;
    /** 单车结算方式（数据字典维护） */
    deductionType: string;
    /** 审核状态（数据字典维护）未审核、审核退回、审核通过、已作废等 */
    auditStatus: string | undefined;
    /** 审核说明 */
    auditRemark: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditDate: moment.Moment | undefined;
    /** 第三方系统编号 */
    thirdPartyCode: string | undefined;
    /** 第三方车辆编号 */
    thirdPartyVehicleNumber: string | undefined;
    /** 数据类型 */
    dataType: TransportSingleVehicleRoadCostEditDtoDataType | undefined;
    description: string | undefined;
}

export class CreateOrEditTransportSingleVehicleRoadCostInput implements ICreateOrEditTransportSingleVehicleRoadCostInput {
    transportSingleVehicleRoadCost: TransportSingleVehicleRoadCostEditDto | undefined;

    constructor(data?: ICreateOrEditTransportSingleVehicleRoadCostInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.transportSingleVehicleRoadCost = data["transportSingleVehicleRoadCost"] ? TransportSingleVehicleRoadCostEditDto.fromJS(data["transportSingleVehicleRoadCost"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditTransportSingleVehicleRoadCostInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTransportSingleVehicleRoadCostInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["transportSingleVehicleRoadCost"] = this.transportSingleVehicleRoadCost ? this.transportSingleVehicleRoadCost.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditTransportSingleVehicleRoadCostInput {
        const json = this.toJSON();
        let result = new CreateOrEditTransportSingleVehicleRoadCostInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditTransportSingleVehicleRoadCostInput {
    transportSingleVehicleRoadCost: TransportSingleVehicleRoadCostEditDto | undefined;
}

export class ApproalTransportSingleVehicleRoadCostEditDto implements IApproalTransportSingleVehicleRoadCostEditDto {
    id: string | undefined;
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;

    constructor(data?: IApproalTransportSingleVehicleRoadCostEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.idStr = data["idStr"];
            this.auditStatus = data["auditStatus"];
            this.auditRemark = data["auditRemark"];
            this.auditOperator = data["auditOperator"];
            this.auditDate = data["auditDate"] ? moment(data["auditDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ApproalTransportSingleVehicleRoadCostEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApproalTransportSingleVehicleRoadCostEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["idStr"] = this.idStr;
        data["auditStatus"] = this.auditStatus;
        data["auditRemark"] = this.auditRemark;
        data["auditOperator"] = this.auditOperator;
        data["auditDate"] = this.auditDate ? this.auditDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): ApproalTransportSingleVehicleRoadCostEditDto {
        const json = this.toJSON();
        let result = new ApproalTransportSingleVehicleRoadCostEditDto();
        result.init(json);
        return result;
    }
}

export interface IApproalTransportSingleVehicleRoadCostEditDto {
    id: string | undefined;
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditRemark: string | undefined;
    auditOperator: string | undefined;
    auditDate: moment.Moment | undefined;
}

export class CreateTransportSingleVehicleRoadFromExcelInput implements ICreateTransportSingleVehicleRoadFromExcelInput {
    organizationUnitId: number | undefined;
    happenDate: moment.Moment | undefined;
    accountingDate: moment.Moment | undefined;
    expenseOccurType: string | undefined;
    expenseItem: string | undefined;
    isHaveTax: boolean | undefined;
    taxRate: number | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    /** 客户付款方式（数据字典维护） */
    payedMode: string | undefined;
    /** 单车结算方式（数据字典维护） */
    deductionType: string | undefined;
    fileContent: string | undefined;

    constructor(data?: ICreateTransportSingleVehicleRoadFromExcelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.happenDate = data["happenDate"] ? moment(data["happenDate"].toString()) : <any>undefined;
            this.accountingDate = data["accountingDate"] ? moment(data["accountingDate"].toString()) : <any>undefined;
            this.expenseOccurType = data["expenseOccurType"];
            this.expenseItem = data["expenseItem"];
            this.isHaveTax = data["isHaveTax"];
            this.taxRate = data["taxRate"];
            this.customerId = data["customerId"];
            this.payedMode = data["payedMode"];
            this.deductionType = data["deductionType"];
            this.fileContent = data["fileContent"];
        }
    }

    static fromJS(data: any): CreateTransportSingleVehicleRoadFromExcelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateTransportSingleVehicleRoadFromExcelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["happenDate"] = this.happenDate ? this.happenDate.toISOString() : <any>undefined;
        data["accountingDate"] = this.accountingDate ? this.accountingDate.toISOString() : <any>undefined;
        data["expenseOccurType"] = this.expenseOccurType;
        data["expenseItem"] = this.expenseItem;
        data["isHaveTax"] = this.isHaveTax;
        data["taxRate"] = this.taxRate;
        data["customerId"] = this.customerId;
        data["payedMode"] = this.payedMode;
        data["deductionType"] = this.deductionType;
        data["fileContent"] = this.fileContent;
        return data; 
    }

    clone(): CreateTransportSingleVehicleRoadFromExcelInput {
        const json = this.toJSON();
        let result = new CreateTransportSingleVehicleRoadFromExcelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateTransportSingleVehicleRoadFromExcelInput {
    organizationUnitId: number | undefined;
    happenDate: moment.Moment | undefined;
    accountingDate: moment.Moment | undefined;
    expenseOccurType: string | undefined;
    expenseItem: string | undefined;
    isHaveTax: boolean | undefined;
    taxRate: number | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    /** 客户付款方式（数据字典维护） */
    payedMode: string | undefined;
    /** 单车结算方式（数据字典维护） */
    deductionType: string | undefined;
    fileContent: string | undefined;
}

export class PagedResultDtoOfSingleVehicleRoadCostListDto implements IPagedResultDtoOfSingleVehicleRoadCostListDto {
    totalCount: number | undefined;
    items: SingleVehicleRoadCostListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfSingleVehicleRoadCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(SingleVehicleRoadCostListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfSingleVehicleRoadCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfSingleVehicleRoadCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfSingleVehicleRoadCostListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfSingleVehicleRoadCostListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfSingleVehicleRoadCostListDto {
    totalCount: number | undefined;
    items: SingleVehicleRoadCostListDto[] | undefined;
}

export class SingleVehicleRoadCostListDto implements ISingleVehicleRoadCostListDto {
    /** 发生日期 */
    happenDate: moment.Moment | undefined;
    vehicleCode: string | undefined;
    /** 所属司机 */
    driverName: string | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    /** 费用客户名称 */
    customerIdName: string | undefined;
    id: string | undefined;

    constructor(data?: ISingleVehicleRoadCostListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.happenDate = data["happenDate"] ? moment(data["happenDate"].toString()) : <any>undefined;
            this.vehicleCode = data["vehicleCode"];
            this.driverName = data["driverName"];
            this.taxAmount = data["taxAmount"];
            this.customerId = data["customerId"];
            this.customerIdName = data["customerIdName"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): SingleVehicleRoadCostListDto {
        data = typeof data === 'object' ? data : {};
        let result = new SingleVehicleRoadCostListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["happenDate"] = this.happenDate ? this.happenDate.toISOString() : <any>undefined;
        data["vehicleCode"] = this.vehicleCode;
        data["driverName"] = this.driverName;
        data["taxAmount"] = this.taxAmount;
        data["customerId"] = this.customerId;
        data["customerIdName"] = this.customerIdName;
        data["id"] = this.id;
        return data; 
    }

    clone(): SingleVehicleRoadCostListDto {
        const json = this.toJSON();
        let result = new SingleVehicleRoadCostListDto();
        result.init(json);
        return result;
    }
}

export interface ISingleVehicleRoadCostListDto {
    /** 发生日期 */
    happenDate: moment.Moment | undefined;
    vehicleCode: string | undefined;
    /** 所属司机 */
    driverName: string | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 费用客户 */
    customerId: number | undefined;
    /** 费用客户名称 */
    customerIdName: string | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfUserListDto implements IPagedResultDtoOfUserListDto {
    totalCount: number | undefined;
    items: UserListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(UserListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfUserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfUserListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfUserListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfUserListDto {
    totalCount: number | undefined;
    items: UserListDto[] | undefined;
}

export class UserListDto implements IUserListDto {
    name: string | undefined;
    surname: string | undefined;
    gender: string | undefined;
    genderText: string | undefined;
    userName: string | undefined;
    fullName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    isEmailConfirmed: boolean | undefined;
    lastLoginTime: moment.Moment | undefined;
    isActive: boolean | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;

    constructor(data?: IUserListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.name = data["name"];
            this.surname = data["surname"];
            this.gender = data["gender"];
            this.genderText = data["genderText"];
            this.userName = data["userName"];
            this.fullName = data["fullName"];
            this.emailAddress = data["emailAddress"];
            this.phoneNumber = data["phoneNumber"];
            this.isEmailConfirmed = data["isEmailConfirmed"];
            this.lastLoginTime = data["lastLoginTime"] ? moment(data["lastLoginTime"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserListDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["gender"] = this.gender;
        data["genderText"] = this.genderText;
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["emailAddress"] = this.emailAddress;
        data["phoneNumber"] = this.phoneNumber;
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        data["lastLoginTime"] = this.lastLoginTime ? this.lastLoginTime.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): UserListDto {
        const json = this.toJSON();
        let result = new UserListDto();
        result.init(json);
        return result;
    }
}

export interface IUserListDto {
    name: string | undefined;
    surname: string | undefined;
    gender: string | undefined;
    genderText: string | undefined;
    userName: string | undefined;
    fullName: string | undefined;
    emailAddress: string | undefined;
    phoneNumber: string | undefined;
    isEmailConfirmed: boolean | undefined;
    lastLoginTime: moment.Moment | undefined;
    isActive: boolean | undefined;
    creationTime: moment.Moment | undefined;
    id: number | undefined;
}

export class CreateOrUpdateUserInput implements ICreateOrUpdateUserInput {
    organizationUnitId: number | undefined;
    userCreateOrUpdate: UserEditDto | undefined;

    constructor(data?: ICreateOrUpdateUserInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.userCreateOrUpdate = data["userCreateOrUpdate"] ? UserEditDto.fromJS(data["userCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateUserInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateUserInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["userCreateOrUpdate"] = this.userCreateOrUpdate ? this.userCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateUserInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateUserInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateUserInput {
    organizationUnitId: number | undefined;
    userCreateOrUpdate: UserEditDto | undefined;
}

export class UserEditDto implements IUserEditDto {
    id: number | undefined;
    name: string | undefined;
    surname: string | undefined;
    gender: string | undefined;
    userName: string | undefined;
    fullName: string | undefined;
    phoneNumber: string | undefined;
    password: string | undefined;
    isActive: boolean | undefined;

    constructor(data?: IUserEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.gender = data["gender"];
            this.userName = data["userName"];
            this.fullName = data["fullName"];
            this.phoneNumber = data["phoneNumber"];
            this.password = data["password"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): UserEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["gender"] = this.gender;
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["password"] = this.password;
        data["isActive"] = this.isActive;
        return data; 
    }

    clone(): UserEditDto {
        const json = this.toJSON();
        let result = new UserEditDto();
        result.init(json);
        return result;
    }
}

export interface IUserEditDto {
    id: number | undefined;
    name: string | undefined;
    surname: string | undefined;
    gender: string | undefined;
    userName: string | undefined;
    fullName: string | undefined;
    phoneNumber: string | undefined;
    password: string | undefined;
    isActive: boolean | undefined;
}

export class ResetUserPasswordOutput implements IResetUserPasswordOutput {
    userName: string | undefined;
    password: string | undefined;
    id: number | undefined;

    constructor(data?: IResetUserPasswordOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ResetUserPasswordOutput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetUserPasswordOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["id"] = this.id;
        return data; 
    }

    clone(): ResetUserPasswordOutput {
        const json = this.toJSON();
        let result = new ResetUserPasswordOutput();
        result.init(json);
        return result;
    }
}

export interface IResetUserPasswordOutput {
    userName: string | undefined;
    password: string | undefined;
    id: number | undefined;
}

export class ResetUserPasswordInput implements IResetUserPasswordInput {
    password: string;
    id: number | undefined;

    constructor(data?: IResetUserPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.password = data["password"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): ResetUserPasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ResetUserPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["password"] = this.password;
        data["id"] = this.id;
        return data; 
    }

    clone(): ResetUserPasswordInput {
        const json = this.toJSON();
        let result = new ResetUserPasswordInput();
        result.init(json);
        return result;
    }
}

export interface IResetUserPasswordInput {
    password: string;
    id: number | undefined;
}

export class ChangePersonalPasswordInput implements IChangePersonalPasswordInput {
    oldPassword: string;
    newPassword: string;
    newPasswordConfirm: string;

    constructor(data?: IChangePersonalPasswordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.oldPassword = data["oldPassword"];
            this.newPassword = data["newPassword"];
            this.newPasswordConfirm = data["newPasswordConfirm"];
        }
    }

    static fromJS(data: any): ChangePersonalPasswordInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePersonalPasswordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oldPassword"] = this.oldPassword;
        data["newPassword"] = this.newPassword;
        data["newPasswordConfirm"] = this.newPasswordConfirm;
        return data; 
    }

    clone(): ChangePersonalPasswordInput {
        const json = this.toJSON();
        let result = new ChangePersonalPasswordInput();
        result.init(json);
        return result;
    }
}

export interface IChangePersonalPasswordInput {
    oldPassword: string;
    newPassword: string;
    newPasswordConfirm: string;
}

export class CreateOrUpdateUserRoleInput implements ICreateOrUpdateUserRoleInput {
    userId: number | undefined;
    roleList: Role[] | undefined;

    constructor(data?: ICreateOrUpdateUserRoleInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            if (data["roleList"] && data["roleList"].constructor === Array) {
                this.roleList = [] as any;
                for (let item of data["roleList"])
                    this.roleList.push(Role.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateOrUpdateUserRoleInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateUserRoleInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        if (this.roleList && this.roleList.constructor === Array) {
            data["roleList"] = [];
            for (let item of this.roleList)
                data["roleList"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateOrUpdateUserRoleInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateUserRoleInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateUserRoleInput {
    userId: number | undefined;
    roleList: Role[] | undefined;
}

export class Role implements IRole {
    description: string | undefined;
    normalizedName: string;
    claims: RoleClaim[] | undefined;
    concurrencyStamp: string | undefined;
    deleterUser: User | undefined;
    creatorUser: User | undefined;
    lastModifierUser: User | undefined;
    tenantId: number | undefined;
    name: string;
    displayName: string;
    isStatic: boolean | undefined;
    isDefault: boolean | undefined;
    permissions: RolePermissionSetting[] | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.description = data["description"];
            this.normalizedName = data["normalizedName"];
            if (data["claims"] && data["claims"].constructor === Array) {
                this.claims = [] as any;
                for (let item of data["claims"])
                    this.claims.push(RoleClaim.fromJS(item));
            }
            this.concurrencyStamp = data["concurrencyStamp"];
            this.deleterUser = data["deleterUser"] ? User.fromJS(data["deleterUser"]) : <any>undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : <any>undefined;
            this.lastModifierUser = data["lastModifierUser"] ? User.fromJS(data["lastModifierUser"]) : <any>undefined;
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.displayName = data["displayName"];
            this.isStatic = data["isStatic"];
            this.isDefault = data["isDefault"];
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [] as any;
                for (let item of data["permissions"])
                    this.permissions.push(RolePermissionSetting.fromJS(item));
            }
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Role {
        data = typeof data === 'object' ? data : {};
        let result = new Role();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["normalizedName"] = this.normalizedName;
        if (this.claims && this.claims.constructor === Array) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["deleterUser"] = this.deleterUser ? this.deleterUser.toJSON() : <any>undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
        data["lastModifierUser"] = this.lastModifierUser ? this.lastModifierUser.toJSON() : <any>undefined;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["displayName"] = this.displayName;
        data["isStatic"] = this.isStatic;
        data["isDefault"] = this.isDefault;
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): Role {
        const json = this.toJSON();
        let result = new Role();
        result.init(json);
        return result;
    }
}

export interface IRole {
    description: string | undefined;
    normalizedName: string;
    claims: RoleClaim[] | undefined;
    concurrencyStamp: string | undefined;
    deleterUser: User | undefined;
    creatorUser: User | undefined;
    lastModifierUser: User | undefined;
    tenantId: number | undefined;
    name: string;
    displayName: string;
    isStatic: boolean | undefined;
    isDefault: boolean | undefined;
    permissions: RolePermissionSetting[] | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class RoleClaim implements IRoleClaim {
    tenantId: number | undefined;
    roleId: number | undefined;
    claimType: string | undefined;
    claimValue: string | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IRoleClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.roleId = data["roleId"];
            this.claimType = data["claimType"];
            this.claimValue = data["claimValue"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RoleClaim {
        data = typeof data === 'object' ? data : {};
        let result = new RoleClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["roleId"] = this.roleId;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): RoleClaim {
        const json = this.toJSON();
        let result = new RoleClaim();
        result.init(json);
        return result;
    }
}

export interface IRoleClaim {
    tenantId: number | undefined;
    roleId: number | undefined;
    claimType: string | undefined;
    claimValue: string | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class User implements IUser {
    gender: string | undefined;
    readonly fullName: string | undefined;
    normalizedUserName: string;
    normalizedEmailAddress: string;
    concurrencyStamp: string | undefined;
    tokens: UserToken[] | undefined;
    deleterUser: User | undefined;
    creatorUser: User | undefined;
    lastModifierUser: User | undefined;
    authenticationSource: string | undefined;
    userName: string;
    tenantId: number | undefined;
    emailAddress: string;
    name: string;
    surname: string;
    password: string;
    emailConfirmationCode: string | undefined;
    passwordResetCode: string | undefined;
    lockoutEndDateUtc: moment.Moment | undefined;
    accessFailedCount: number | undefined;
    isLockoutEnabled: boolean | undefined;
    phoneNumber: string | undefined;
    isPhoneNumberConfirmed: boolean | undefined;
    securityStamp: string | undefined;
    isTwoFactorEnabled: boolean | undefined;
    logins: UserLogin[] | undefined;
    roles: UserRole[] | undefined;
    claims: UserClaim[] | undefined;
    permissions: UserPermissionSetting[] | undefined;
    settings: Setting[] | undefined;
    isEmailConfirmed: boolean | undefined;
    isActive: boolean | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IUser) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.gender = data["gender"];
            (<any>this).fullName = data["fullName"];
            this.normalizedUserName = data["normalizedUserName"];
            this.normalizedEmailAddress = data["normalizedEmailAddress"];
            this.concurrencyStamp = data["concurrencyStamp"];
            if (data["tokens"] && data["tokens"].constructor === Array) {
                this.tokens = [] as any;
                for (let item of data["tokens"])
                    this.tokens.push(UserToken.fromJS(item));
            }
            this.deleterUser = data["deleterUser"] ? User.fromJS(data["deleterUser"]) : <any>undefined;
            this.creatorUser = data["creatorUser"] ? User.fromJS(data["creatorUser"]) : <any>undefined;
            this.lastModifierUser = data["lastModifierUser"] ? User.fromJS(data["lastModifierUser"]) : <any>undefined;
            this.authenticationSource = data["authenticationSource"];
            this.userName = data["userName"];
            this.tenantId = data["tenantId"];
            this.emailAddress = data["emailAddress"];
            this.name = data["name"];
            this.surname = data["surname"];
            this.password = data["password"];
            this.emailConfirmationCode = data["emailConfirmationCode"];
            this.passwordResetCode = data["passwordResetCode"];
            this.lockoutEndDateUtc = data["lockoutEndDateUtc"] ? moment(data["lockoutEndDateUtc"].toString()) : <any>undefined;
            this.accessFailedCount = data["accessFailedCount"];
            this.isLockoutEnabled = data["isLockoutEnabled"];
            this.phoneNumber = data["phoneNumber"];
            this.isPhoneNumberConfirmed = data["isPhoneNumberConfirmed"];
            this.securityStamp = data["securityStamp"];
            this.isTwoFactorEnabled = data["isTwoFactorEnabled"];
            if (data["logins"] && data["logins"].constructor === Array) {
                this.logins = [] as any;
                for (let item of data["logins"])
                    this.logins.push(UserLogin.fromJS(item));
            }
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [] as any;
                for (let item of data["roles"])
                    this.roles.push(UserRole.fromJS(item));
            }
            if (data["claims"] && data["claims"].constructor === Array) {
                this.claims = [] as any;
                for (let item of data["claims"])
                    this.claims.push(UserClaim.fromJS(item));
            }
            if (data["permissions"] && data["permissions"].constructor === Array) {
                this.permissions = [] as any;
                for (let item of data["permissions"])
                    this.permissions.push(UserPermissionSetting.fromJS(item));
            }
            if (data["settings"] && data["settings"].constructor === Array) {
                this.settings = [] as any;
                for (let item of data["settings"])
                    this.settings.push(Setting.fromJS(item));
            }
            this.isEmailConfirmed = data["isEmailConfirmed"];
            this.isActive = data["isActive"];
            this.isDeleted = data["isDeleted"];
            this.deleterUserId = data["deleterUserId"];
            this.deletionTime = data["deletionTime"] ? moment(data["deletionTime"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): User {
        data = typeof data === 'object' ? data : {};
        let result = new User();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gender"] = this.gender;
        data["fullName"] = this.fullName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["normalizedEmailAddress"] = this.normalizedEmailAddress;
        data["concurrencyStamp"] = this.concurrencyStamp;
        if (this.tokens && this.tokens.constructor === Array) {
            data["tokens"] = [];
            for (let item of this.tokens)
                data["tokens"].push(item.toJSON());
        }
        data["deleterUser"] = this.deleterUser ? this.deleterUser.toJSON() : <any>undefined;
        data["creatorUser"] = this.creatorUser ? this.creatorUser.toJSON() : <any>undefined;
        data["lastModifierUser"] = this.lastModifierUser ? this.lastModifierUser.toJSON() : <any>undefined;
        data["authenticationSource"] = this.authenticationSource;
        data["userName"] = this.userName;
        data["tenantId"] = this.tenantId;
        data["emailAddress"] = this.emailAddress;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["password"] = this.password;
        data["emailConfirmationCode"] = this.emailConfirmationCode;
        data["passwordResetCode"] = this.passwordResetCode;
        data["lockoutEndDateUtc"] = this.lockoutEndDateUtc ? this.lockoutEndDateUtc.toISOString() : <any>undefined;
        data["accessFailedCount"] = this.accessFailedCount;
        data["isLockoutEnabled"] = this.isLockoutEnabled;
        data["phoneNumber"] = this.phoneNumber;
        data["isPhoneNumberConfirmed"] = this.isPhoneNumberConfirmed;
        data["securityStamp"] = this.securityStamp;
        data["isTwoFactorEnabled"] = this.isTwoFactorEnabled;
        if (this.logins && this.logins.constructor === Array) {
            data["logins"] = [];
            for (let item of this.logins)
                data["logins"].push(item.toJSON());
        }
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(item.toJSON());
        }
        if (this.claims && this.claims.constructor === Array) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item.toJSON());
        }
        if (this.permissions && this.permissions.constructor === Array) {
            data["permissions"] = [];
            for (let item of this.permissions)
                data["permissions"].push(item.toJSON());
        }
        if (this.settings && this.settings.constructor === Array) {
            data["settings"] = [];
            for (let item of this.settings)
                data["settings"].push(item.toJSON());
        }
        data["isEmailConfirmed"] = this.isEmailConfirmed;
        data["isActive"] = this.isActive;
        data["isDeleted"] = this.isDeleted;
        data["deleterUserId"] = this.deleterUserId;
        data["deletionTime"] = this.deletionTime ? this.deletionTime.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): User {
        const json = this.toJSON();
        let result = new User();
        result.init(json);
        return result;
    }
}

export interface IUser {
    gender: string | undefined;
    fullName: string | undefined;
    normalizedUserName: string;
    normalizedEmailAddress: string;
    concurrencyStamp: string | undefined;
    tokens: UserToken[] | undefined;
    deleterUser: User | undefined;
    creatorUser: User | undefined;
    lastModifierUser: User | undefined;
    authenticationSource: string | undefined;
    userName: string;
    tenantId: number | undefined;
    emailAddress: string;
    name: string;
    surname: string;
    password: string;
    emailConfirmationCode: string | undefined;
    passwordResetCode: string | undefined;
    lockoutEndDateUtc: moment.Moment | undefined;
    accessFailedCount: number | undefined;
    isLockoutEnabled: boolean | undefined;
    phoneNumber: string | undefined;
    isPhoneNumberConfirmed: boolean | undefined;
    securityStamp: string | undefined;
    isTwoFactorEnabled: boolean | undefined;
    logins: UserLogin[] | undefined;
    roles: UserRole[] | undefined;
    claims: UserClaim[] | undefined;
    permissions: UserPermissionSetting[] | undefined;
    settings: Setting[] | undefined;
    isEmailConfirmed: boolean | undefined;
    isActive: boolean | undefined;
    isDeleted: boolean | undefined;
    deleterUserId: number | undefined;
    deletionTime: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class RolePermissionSetting implements IRolePermissionSetting {
    roleId: number | undefined;
    tenantId: number | undefined;
    name: string;
    isGranted: boolean | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IRolePermissionSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.roleId = data["roleId"];
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.isGranted = data["isGranted"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): RolePermissionSetting {
        data = typeof data === 'object' ? data : {};
        let result = new RolePermissionSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["roleId"] = this.roleId;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["isGranted"] = this.isGranted;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): RolePermissionSetting {
        const json = this.toJSON();
        let result = new RolePermissionSetting();
        result.init(json);
        return result;
    }
}

export interface IRolePermissionSetting {
    roleId: number | undefined;
    tenantId: number | undefined;
    name: string;
    isGranted: boolean | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class UserToken implements IUserToken {
    tenantId: number | undefined;
    userId: number | undefined;
    loginProvider: string | undefined;
    name: string | undefined;
    value: string | undefined;
    expireDate: moment.Moment | undefined;
    id: number | undefined;

    constructor(data?: IUserToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.loginProvider = data["loginProvider"];
            this.name = data["name"];
            this.value = data["value"];
            this.expireDate = data["expireDate"] ? moment(data["expireDate"].toString()) : <any>undefined;
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserToken {
        data = typeof data === 'object' ? data : {};
        let result = new UserToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["loginProvider"] = this.loginProvider;
        data["name"] = this.name;
        data["value"] = this.value;
        data["expireDate"] = this.expireDate ? this.expireDate.toISOString() : <any>undefined;
        data["id"] = this.id;
        return data; 
    }

    clone(): UserToken {
        const json = this.toJSON();
        let result = new UserToken();
        result.init(json);
        return result;
    }
}

export interface IUserToken {
    tenantId: number | undefined;
    userId: number | undefined;
    loginProvider: string | undefined;
    name: string | undefined;
    value: string | undefined;
    expireDate: moment.Moment | undefined;
    id: number | undefined;
}

export class UserLogin implements IUserLogin {
    tenantId: number | undefined;
    userId: number | undefined;
    loginProvider: string;
    providerKey: string;
    id: number | undefined;

    constructor(data?: IUserLogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.loginProvider = data["loginProvider"];
            this.providerKey = data["providerKey"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserLogin {
        data = typeof data === 'object' ? data : {};
        let result = new UserLogin();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["loginProvider"] = this.loginProvider;
        data["providerKey"] = this.providerKey;
        data["id"] = this.id;
        return data; 
    }

    clone(): UserLogin {
        const json = this.toJSON();
        let result = new UserLogin();
        result.init(json);
        return result;
    }
}

export interface IUserLogin {
    tenantId: number | undefined;
    userId: number | undefined;
    loginProvider: string;
    providerKey: string;
    id: number | undefined;
}

export class UserRole implements IUserRole {
    tenantId: number | undefined;
    userId: number | undefined;
    roleId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IUserRole) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.roleId = data["roleId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserRole {
        data = typeof data === 'object' ? data : {};
        let result = new UserRole();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["roleId"] = this.roleId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): UserRole {
        const json = this.toJSON();
        let result = new UserRole();
        result.init(json);
        return result;
    }
}

export interface IUserRole {
    tenantId: number | undefined;
    userId: number | undefined;
    roleId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class UserClaim implements IUserClaim {
    tenantId: number | undefined;
    userId: number | undefined;
    claimType: string | undefined;
    claimValue: string | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IUserClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.claimType = data["claimType"];
            this.claimValue = data["claimValue"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserClaim {
        data = typeof data === 'object' ? data : {};
        let result = new UserClaim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["claimType"] = this.claimType;
        data["claimValue"] = this.claimValue;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): UserClaim {
        const json = this.toJSON();
        let result = new UserClaim();
        result.init(json);
        return result;
    }
}

export interface IUserClaim {
    tenantId: number | undefined;
    userId: number | undefined;
    claimType: string | undefined;
    claimValue: string | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class UserPermissionSetting implements IUserPermissionSetting {
    userId: number | undefined;
    tenantId: number | undefined;
    name: string;
    isGranted: boolean | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IUserPermissionSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.tenantId = data["tenantId"];
            this.name = data["name"];
            this.isGranted = data["isGranted"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): UserPermissionSetting {
        data = typeof data === 'object' ? data : {};
        let result = new UserPermissionSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["tenantId"] = this.tenantId;
        data["name"] = this.name;
        data["isGranted"] = this.isGranted;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): UserPermissionSetting {
        const json = this.toJSON();
        let result = new UserPermissionSetting();
        result.init(json);
        return result;
    }
}

export interface IUserPermissionSetting {
    userId: number | undefined;
    tenantId: number | undefined;
    name: string;
    isGranted: boolean | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class Setting implements ISetting {
    tenantId: number | undefined;
    userId: number | undefined;
    name: string;
    value: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ISetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.userId = data["userId"];
            this.name = data["name"];
            this.value = data["value"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Setting {
        data = typeof data === 'object' ? data : {};
        let result = new Setting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["userId"] = this.userId;
        data["name"] = this.name;
        data["value"] = this.value;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): Setting {
        const json = this.toJSON();
        let result = new Setting();
        result.init(json);
        return result;
    }
}

export interface ISetting {
    tenantId: number | undefined;
    userId: number | undefined;
    name: string;
    value: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class ProhibitPermissionInput implements IProhibitPermissionInput {
    userId: number | undefined;
    permissionName: string;

    constructor(data?: IProhibitPermissionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userId = data["userId"];
            this.permissionName = data["permissionName"];
        }
    }

    static fromJS(data: any): ProhibitPermissionInput {
        data = typeof data === 'object' ? data : {};
        let result = new ProhibitPermissionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["permissionName"] = this.permissionName;
        return data; 
    }

    clone(): ProhibitPermissionInput {
        const json = this.toJSON();
        let result = new ProhibitPermissionInput();
        result.init(json);
        return result;
    }
}

export interface IProhibitPermissionInput {
    userId: number | undefined;
    permissionName: string;
}

export class ChangeUserOrganizationUnitInput implements IChangeUserOrganizationUnitInput {
    id: number | undefined;
    oldOrganizationUnitId: number | undefined;
    organizationUnitId: number | undefined;

    constructor(data?: IChangeUserOrganizationUnitInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.oldOrganizationUnitId = data["oldOrganizationUnitId"];
            this.organizationUnitId = data["organizationUnitId"];
        }
    }

    static fromJS(data: any): ChangeUserOrganizationUnitInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeUserOrganizationUnitInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["oldOrganizationUnitId"] = this.oldOrganizationUnitId;
        data["organizationUnitId"] = this.organizationUnitId;
        return data; 
    }

    clone(): ChangeUserOrganizationUnitInput {
        const json = this.toJSON();
        let result = new ChangeUserOrganizationUnitInput();
        result.init(json);
        return result;
    }
}

export interface IChangeUserOrganizationUnitInput {
    id: number | undefined;
    oldOrganizationUnitId: number | undefined;
    organizationUnitId: number | undefined;
}

export class UserInfoByMobileDto implements IUserInfoByMobileDto {
    /** 用户名 */
    userName: string | undefined;
    /** 姓名 */
    fullName: string | undefined;
    /** 手机号码 */
    phoneNumber: string | undefined;
    /** 所属组织编码 */
    organizationCode: string | undefined;
    /** 所属组织简称 */
    organizationDisplayName: string | undefined;
    /** 所属组织全称 */
    organizationFullName: string | undefined;
    /** 上层组织 */
    organizationParentId: number | undefined;
    /** 组织类型（公司 = 1,职能部室 = 2,业务部门 = 3,业务班组 =31） */
    organizationType: UserInfoByMobileDtoOrganizationType | undefined;
    /** 组织类型名称 */
    readonly organizationTypeText: string | undefined;

    constructor(data?: IUserInfoByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.fullName = data["fullName"];
            this.phoneNumber = data["phoneNumber"];
            this.organizationCode = data["organizationCode"];
            this.organizationDisplayName = data["organizationDisplayName"];
            this.organizationFullName = data["organizationFullName"];
            this.organizationParentId = data["organizationParentId"];
            this.organizationType = data["organizationType"];
            (<any>this).organizationTypeText = data["organizationTypeText"];
        }
    }

    static fromJS(data: any): UserInfoByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserInfoByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["phoneNumber"] = this.phoneNumber;
        data["organizationCode"] = this.organizationCode;
        data["organizationDisplayName"] = this.organizationDisplayName;
        data["organizationFullName"] = this.organizationFullName;
        data["organizationParentId"] = this.organizationParentId;
        data["organizationType"] = this.organizationType;
        data["organizationTypeText"] = this.organizationTypeText;
        return data; 
    }

    clone(): UserInfoByMobileDto {
        const json = this.toJSON();
        let result = new UserInfoByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IUserInfoByMobileDto {
    /** 用户名 */
    userName: string | undefined;
    /** 姓名 */
    fullName: string | undefined;
    /** 手机号码 */
    phoneNumber: string | undefined;
    /** 所属组织编码 */
    organizationCode: string | undefined;
    /** 所属组织简称 */
    organizationDisplayName: string | undefined;
    /** 所属组织全称 */
    organizationFullName: string | undefined;
    /** 上层组织 */
    organizationParentId: number | undefined;
    /** 组织类型（公司 = 1,职能部室 = 2,业务部门 = 3,业务班组 =31） */
    organizationType: UserInfoByMobileDtoOrganizationType | undefined;
    /** 组织类型名称 */
    organizationTypeText: string | undefined;
}

export class PagedResultDtoOfVehicleAffairRecordListDto implements IPagedResultDtoOfVehicleAffairRecordListDto {
    totalCount: number | undefined;
    items: VehicleAffairRecordListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleAffairRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleAffairRecordListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleAffairRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleAffairRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleAffairRecordListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleAffairRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleAffairRecordListDto {
    totalCount: number | undefined;
    items: VehicleAffairRecordListDto[] | undefined;
}

export class VehicleAffairRecordListDto implements IVehicleAffairRecordListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    originalOUName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 车务类型 */
    vehicleAffairType: string | undefined;
    vehicleAffairTypeText: string | undefined;
    /** 车务状态 */
    vehicleAffairStatus: string | undefined;
    vehicleAffairStatusText: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 车务登记号/证件号 */
    recordNumber: string | undefined;
    /** 办理类型 */
    handleType: string | undefined;
    handleTypeText: string | undefined;
    /** 办理状态 */
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    /** 办理人 */
    handlePerson: string | undefined;
    handlePersonName: string | undefined;
    /** 办理日期/记账日期 */
    accountDate: moment.Moment | undefined;
    /** 办理费用 */
    handleFee: number | undefined;
    /** 签发机构 */
    signingOrganization: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleAffairRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalOUId = data["originalOUId"];
            this.originalOUName = data["originalOUName"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIDNumber = data["driverIDNumber"];
            this.vehicleAffairType = data["vehicleAffairType"];
            this.vehicleAffairTypeText = data["vehicleAffairTypeText"];
            this.vehicleAffairStatus = data["vehicleAffairStatus"];
            this.vehicleAffairStatusText = data["vehicleAffairStatusText"];
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.recordNumber = data["recordNumber"];
            this.handleType = data["handleType"];
            this.handleTypeText = data["handleTypeText"];
            this.handleStatus = data["handleStatus"];
            this.handleStatusText = data["handleStatusText"];
            this.handlePerson = data["handlePerson"];
            this.handlePersonName = data["handlePersonName"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.handleFee = data["handleFee"];
            this.signingOrganization = data["signingOrganization"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleAffairRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleAffairRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalOUId"] = this.originalOUId;
        data["originalOUName"] = this.originalOUName;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIDNumber"] = this.driverIDNumber;
        data["vehicleAffairType"] = this.vehicleAffairType;
        data["vehicleAffairTypeText"] = this.vehicleAffairTypeText;
        data["vehicleAffairStatus"] = this.vehicleAffairStatus;
        data["vehicleAffairStatusText"] = this.vehicleAffairStatusText;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["recordNumber"] = this.recordNumber;
        data["handleType"] = this.handleType;
        data["handleTypeText"] = this.handleTypeText;
        data["handleStatus"] = this.handleStatus;
        data["handleStatusText"] = this.handleStatusText;
        data["handlePerson"] = this.handlePerson;
        data["handlePersonName"] = this.handlePersonName;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["handleFee"] = this.handleFee;
        data["signingOrganization"] = this.signingOrganization;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleAffairRecordListDto {
        const json = this.toJSON();
        let result = new VehicleAffairRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleAffairRecordListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    originalOUName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 车务类型 */
    vehicleAffairType: string | undefined;
    vehicleAffairTypeText: string | undefined;
    /** 车务状态 */
    vehicleAffairStatus: string | undefined;
    vehicleAffairStatusText: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 车务登记号/证件号 */
    recordNumber: string | undefined;
    /** 办理类型 */
    handleType: string | undefined;
    handleTypeText: string | undefined;
    /** 办理状态 */
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    /** 办理人 */
    handlePerson: string | undefined;
    handlePersonName: string | undefined;
    /** 办理日期/记账日期 */
    accountDate: moment.Moment | undefined;
    /** 办理费用 */
    handleFee: number | undefined;
    /** 签发机构 */
    signingOrganization: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CarFieldDto implements ICarFieldDto {
    carfield: string | undefined;
    /** 即将过期数 */
    expirationSoonNumber: number | undefined;
    /** 已过期数 */
    expirationNumber: number | undefined;

    constructor(data?: ICarFieldDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.carfield = data["carfield"];
            this.expirationSoonNumber = data["expirationSoonNumber"];
            this.expirationNumber = data["expirationNumber"];
        }
    }

    static fromJS(data: any): CarFieldDto {
        data = typeof data === 'object' ? data : {};
        let result = new CarFieldDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["carfield"] = this.carfield;
        data["expirationSoonNumber"] = this.expirationSoonNumber;
        data["expirationNumber"] = this.expirationNumber;
        return data; 
    }

    clone(): CarFieldDto {
        const json = this.toJSON();
        let result = new CarFieldDto();
        result.init(json);
        return result;
    }
}

export interface ICarFieldDto {
    carfield: string | undefined;
    /** 即将过期数 */
    expirationSoonNumber: number | undefined;
    /** 已过期数 */
    expirationNumber: number | undefined;
}

export class CreateOrUpdateVehicleAffairRecordInput implements ICreateOrUpdateVehicleAffairRecordInput {
    vehicleAffairRecordCreateOrUpdate: VehicleAffairRecordEditDto | undefined;

    constructor(data?: ICreateOrUpdateVehicleAffairRecordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleAffairRecordCreateOrUpdate = data["vehicleAffairRecordCreateOrUpdate"] ? VehicleAffairRecordEditDto.fromJS(data["vehicleAffairRecordCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateVehicleAffairRecordInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateVehicleAffairRecordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleAffairRecordCreateOrUpdate"] = this.vehicleAffairRecordCreateOrUpdate ? this.vehicleAffairRecordCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateVehicleAffairRecordInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateVehicleAffairRecordInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateVehicleAffairRecordInput {
    vehicleAffairRecordCreateOrUpdate: VehicleAffairRecordEditDto | undefined;
}

export class VehicleAffairRecordEditDto implements IVehicleAffairRecordEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 车务类型（数据字典维护） */
    vehicleAffairType: string | undefined;
    /** 车务状态（数据字典维护） */
    vehicleAffairStatus: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 车务登记号/证件号 */
    recordNumber: string | undefined;
    /** 办理类型（数据字典维护） */
    handleType: string | undefined;
    /** 办理状态（数据字典维护） */
    handleStatus: string | undefined;
    /** 办理人 */
    handlePerson: string | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 办理费用 */
    handleFee: number | undefined;
    /** 签发机构 */
    signingOrganization: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    isShare: boolean | undefined;

    constructor(data?: IVehicleAffairRecordEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.originalOUId = data["originalOUId"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIDNumber = data["driverIDNumber"];
            this.vehicleAffairType = data["vehicleAffairType"];
            this.vehicleAffairStatus = data["vehicleAffairStatus"];
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.recordNumber = data["recordNumber"];
            this.handleType = data["handleType"];
            this.handleStatus = data["handleStatus"];
            this.handlePerson = data["handlePerson"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.handleFee = data["handleFee"];
            this.signingOrganization = data["signingOrganization"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.isShare = data["isShare"];
        }
    }

    static fromJS(data: any): VehicleAffairRecordEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleAffairRecordEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["originalOUId"] = this.originalOUId;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIDNumber"] = this.driverIDNumber;
        data["vehicleAffairType"] = this.vehicleAffairType;
        data["vehicleAffairStatus"] = this.vehicleAffairStatus;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["recordNumber"] = this.recordNumber;
        data["handleType"] = this.handleType;
        data["handleStatus"] = this.handleStatus;
        data["handlePerson"] = this.handlePerson;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["handleFee"] = this.handleFee;
        data["signingOrganization"] = this.signingOrganization;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["isShare"] = this.isShare;
        return data; 
    }

    clone(): VehicleAffairRecordEditDto {
        const json = this.toJSON();
        let result = new VehicleAffairRecordEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleAffairRecordEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 车务类型（数据字典维护） */
    vehicleAffairType: string | undefined;
    /** 车务状态（数据字典维护） */
    vehicleAffairStatus: string | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 车务登记号/证件号 */
    recordNumber: string | undefined;
    /** 办理类型（数据字典维护） */
    handleType: string | undefined;
    /** 办理状态（数据字典维护） */
    handleStatus: string | undefined;
    /** 办理人 */
    handlePerson: string | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 办理费用 */
    handleFee: number | undefined;
    /** 签发机构 */
    signingOrganization: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    isShare: boolean | undefined;
}

export class ListResultDtoOfAbnormalAlarmListDto implements IListResultDtoOfAbnormalAlarmListDto {
    items: AbnormalAlarmListDto[] | undefined;

    constructor(data?: IListResultDtoOfAbnormalAlarmListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(AbnormalAlarmListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfAbnormalAlarmListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfAbnormalAlarmListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfAbnormalAlarmListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfAbnormalAlarmListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfAbnormalAlarmListDto {
    items: AbnormalAlarmListDto[] | undefined;
}

export class AbnormalAlarmListDto implements IAbnormalAlarmListDto {
    vehicleCode: string | undefined;
    beginDate: moment.Moment | undefined;
    /** 截至日期 */
    endDate: moment.Moment | undefined;
    /** 发运站名称 */
    dispatchinName: string | undefined;
    dispatchinCode: string | undefined;
    /** 煤矿名称 */
    coalName: string | undefined;
    coalCode: string | undefined;
    status: string | undefined;
    alarmType: string | undefined;
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IAbnormalAlarmListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.beginDate = data["beginDate"] ? moment(data["beginDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.dispatchinName = data["dispatchinName"];
            this.dispatchinCode = data["dispatchinCode"];
            this.coalName = data["coalName"];
            this.coalCode = data["coalCode"];
            this.status = data["status"];
            this.alarmType = data["alarmType"];
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AbnormalAlarmListDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbnormalAlarmListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["dispatchinName"] = this.dispatchinName;
        data["dispatchinCode"] = this.dispatchinCode;
        data["coalName"] = this.coalName;
        data["coalCode"] = this.coalCode;
        data["status"] = this.status;
        data["alarmType"] = this.alarmType;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): AbnormalAlarmListDto {
        const json = this.toJSON();
        let result = new AbnormalAlarmListDto();
        result.init(json);
        return result;
    }
}

export interface IAbnormalAlarmListDto {
    vehicleCode: string | undefined;
    beginDate: moment.Moment | undefined;
    /** 截至日期 */
    endDate: moment.Moment | undefined;
    /** 发运站名称 */
    dispatchinName: string | undefined;
    dispatchinCode: string | undefined;
    /** 煤矿名称 */
    coalName: string | undefined;
    coalCode: string | undefined;
    status: string | undefined;
    alarmType: string | undefined;
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class ListResultDtoOfTransportPlaceNoticeListDto implements IListResultDtoOfTransportPlaceNoticeListDto {
    items: TransportPlaceNoticeListDto[] | undefined;

    constructor(data?: IListResultDtoOfTransportPlaceNoticeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(TransportPlaceNoticeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfTransportPlaceNoticeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfTransportPlaceNoticeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfTransportPlaceNoticeListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfTransportPlaceNoticeListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfTransportPlaceNoticeListDto {
    items: TransportPlaceNoticeListDto[] | undefined;
}

export class TransportPlaceNoticeListDto implements ITransportPlaceNoticeListDto {
    vehicleCode: string | undefined;
    noticeDate: moment.Moment | undefined;
    /** 发运站名称 */
    dispatchinName: string | undefined;
    dispatchinCode: string | undefined;
    /** 煤矿名称 */
    coalName: string | undefined;
    coalCode: string | undefined;
    status: string | undefined;
    noticeType: string | undefined;
    /** 持续行驶里程 */
    mileage: number | undefined;
    description: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: ITransportPlaceNoticeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.noticeDate = data["noticeDate"] ? moment(data["noticeDate"].toString()) : <any>undefined;
            this.dispatchinName = data["dispatchinName"];
            this.dispatchinCode = data["dispatchinCode"];
            this.coalName = data["coalName"];
            this.coalCode = data["coalCode"];
            this.status = data["status"];
            this.noticeType = data["noticeType"];
            this.mileage = data["mileage"];
            this.description = data["description"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): TransportPlaceNoticeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceNoticeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["noticeDate"] = this.noticeDate ? this.noticeDate.toISOString() : <any>undefined;
        data["dispatchinName"] = this.dispatchinName;
        data["dispatchinCode"] = this.dispatchinCode;
        data["coalName"] = this.coalName;
        data["coalCode"] = this.coalCode;
        data["status"] = this.status;
        data["noticeType"] = this.noticeType;
        data["mileage"] = this.mileage;
        data["description"] = this.description;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): TransportPlaceNoticeListDto {
        const json = this.toJSON();
        let result = new TransportPlaceNoticeListDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceNoticeListDto {
    vehicleCode: string | undefined;
    noticeDate: moment.Moment | undefined;
    /** 发运站名称 */
    dispatchinName: string | undefined;
    dispatchinCode: string | undefined;
    /** 煤矿名称 */
    coalName: string | undefined;
    coalCode: string | undefined;
    status: string | undefined;
    noticeType: string | undefined;
    /** 持续行驶里程 */
    mileage: number | undefined;
    description: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class YLTransportInput implements IYLTransportInput {
    tranportCode: string | undefined;
    systemName: string | undefined;
    detail: string | undefined;

    constructor(data?: IYLTransportInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tranportCode = data["tranportCode"];
            this.systemName = data["systemName"];
            this.detail = data["detail"];
        }
    }

    static fromJS(data: any): YLTransportInput {
        data = typeof data === 'object' ? data : {};
        let result = new YLTransportInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tranportCode"] = this.tranportCode;
        data["systemName"] = this.systemName;
        data["detail"] = this.detail;
        return data; 
    }

    clone(): YLTransportInput {
        const json = this.toJSON();
        let result = new YLTransportInput();
        result.init(json);
        return result;
    }
}

export interface IYLTransportInput {
    tranportCode: string | undefined;
    systemName: string | undefined;
    detail: string | undefined;
}

export class AbnormalAlarmEditDto implements IAbnormalAlarmEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    beginDate: moment.Moment | undefined;
    /** 截至日期 */
    endDate: moment.Moment | undefined;
    /** 发运站名称 */
    dispatchinName: string | undefined;
    dispatchinCode: string | undefined;
    /** 煤矿名称 */
    coalName: string | undefined;
    coalCode: string | undefined;
    status: string | undefined;
    alarmType: string | undefined;
    description: string | undefined;

    constructor(data?: IAbnormalAlarmEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.beginDate = data["beginDate"] ? moment(data["beginDate"].toString()) : <any>undefined;
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.dispatchinName = data["dispatchinName"];
            this.dispatchinCode = data["dispatchinCode"];
            this.coalName = data["coalName"];
            this.coalCode = data["coalCode"];
            this.status = data["status"];
            this.alarmType = data["alarmType"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): AbnormalAlarmEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new AbnormalAlarmEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["beginDate"] = this.beginDate ? this.beginDate.toISOString() : <any>undefined;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["dispatchinName"] = this.dispatchinName;
        data["dispatchinCode"] = this.dispatchinCode;
        data["coalName"] = this.coalName;
        data["coalCode"] = this.coalCode;
        data["status"] = this.status;
        data["alarmType"] = this.alarmType;
        data["description"] = this.description;
        return data; 
    }

    clone(): AbnormalAlarmEditDto {
        const json = this.toJSON();
        let result = new AbnormalAlarmEditDto();
        result.init(json);
        return result;
    }
}

export interface IAbnormalAlarmEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    beginDate: moment.Moment | undefined;
    /** 截至日期 */
    endDate: moment.Moment | undefined;
    /** 发运站名称 */
    dispatchinName: string | undefined;
    dispatchinCode: string | undefined;
    /** 煤矿名称 */
    coalName: string | undefined;
    coalCode: string | undefined;
    status: string | undefined;
    alarmType: string | undefined;
    description: string | undefined;
}

export class TransportPlaceNoticeEditDto implements ITransportPlaceNoticeEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    noticeDate: moment.Moment | undefined;
    /** 发运站名称 */
    dispatchinName: string | undefined;
    dispatchinCode: string | undefined;
    /** 煤矿名称 */
    coalName: string | undefined;
    coalCode: string | undefined;
    status: string | undefined;
    noticeType: string | undefined;
    /** 持续行驶里程 */
    mileage: number | undefined;
    conMileage: number | undefined;
    description: string | undefined;

    constructor(data?: ITransportPlaceNoticeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleCode = data["vehicleCode"];
            this.noticeDate = data["noticeDate"] ? moment(data["noticeDate"].toString()) : <any>undefined;
            this.dispatchinName = data["dispatchinName"];
            this.dispatchinCode = data["dispatchinCode"];
            this.coalName = data["coalName"];
            this.coalCode = data["coalCode"];
            this.status = data["status"];
            this.noticeType = data["noticeType"];
            this.mileage = data["mileage"];
            this.conMileage = data["conMileage"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): TransportPlaceNoticeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new TransportPlaceNoticeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleCode"] = this.vehicleCode;
        data["noticeDate"] = this.noticeDate ? this.noticeDate.toISOString() : <any>undefined;
        data["dispatchinName"] = this.dispatchinName;
        data["dispatchinCode"] = this.dispatchinCode;
        data["coalName"] = this.coalName;
        data["coalCode"] = this.coalCode;
        data["status"] = this.status;
        data["noticeType"] = this.noticeType;
        data["mileage"] = this.mileage;
        data["conMileage"] = this.conMileage;
        data["description"] = this.description;
        return data; 
    }

    clone(): TransportPlaceNoticeEditDto {
        const json = this.toJSON();
        let result = new TransportPlaceNoticeEditDto();
        result.init(json);
        return result;
    }
}

export interface ITransportPlaceNoticeEditDto {
    id: string | undefined;
    vehicleCode: string | undefined;
    noticeDate: moment.Moment | undefined;
    /** 发运站名称 */
    dispatchinName: string | undefined;
    dispatchinCode: string | undefined;
    /** 煤矿名称 */
    coalName: string | undefined;
    coalCode: string | undefined;
    status: string | undefined;
    noticeType: string | undefined;
    /** 持续行驶里程 */
    mileage: number | undefined;
    conMileage: number | undefined;
    description: string | undefined;
}

export class VehicleArchivesReportDto implements IVehicleArchivesReportDto {
    normal: number | undefined;
    newCount: number | undefined;
    stopCount: number | undefined;
    abnormalCount: number | undefined;
    temporary: number | undefined;
    lockCount: number | undefined;
    totalCount: number | undefined;

    constructor(data?: IVehicleArchivesReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.normal = data["normal"];
            this.newCount = data["newCount"];
            this.stopCount = data["stopCount"];
            this.abnormalCount = data["abnormalCount"];
            this.temporary = data["temporary"];
            this.lockCount = data["lockCount"];
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): VehicleArchivesReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchivesReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["normal"] = this.normal;
        data["newCount"] = this.newCount;
        data["stopCount"] = this.stopCount;
        data["abnormalCount"] = this.abnormalCount;
        data["temporary"] = this.temporary;
        data["lockCount"] = this.lockCount;
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): VehicleArchivesReportDto {
        const json = this.toJSON();
        let result = new VehicleArchivesReportDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchivesReportDto {
    normal: number | undefined;
    newCount: number | undefined;
    stopCount: number | undefined;
    abnormalCount: number | undefined;
    temporary: number | undefined;
    lockCount: number | undefined;
    totalCount: number | undefined;
}

export class PagedResultDtoOfVehicleArchivesListDto implements IPagedResultDtoOfVehicleArchivesListDto {
    totalCount: number | undefined;
    items: VehicleArchivesListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleArchivesListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleArchivesListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleArchivesListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleArchivesListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleArchivesListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleArchivesListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleArchivesListDto {
    totalCount: number | undefined;
    items: VehicleArchivesListDto[] | undefined;
}

export class VehicleArchivesListDto implements IVehicleArchivesListDto {
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    ouFullName: string | undefined;
    /** 调度组织 */
    detailedOriginalOUId: number | undefined;
    detailedOUDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    frameNumber: string | undefined;
    engineNumber: string | undefined;
    trailerNumber: string | undefined;
    trailerFrameNumber: string | undefined;
    acquisitionDate: moment.Moment | undefined;
    vehicleBrand: string | undefined;
    vehicleBrandText: string | undefined;
    brandModel: string | undefined;
    brandModelText: string | undefined;
    ownerIDNumber: string | undefined;
    ownerName: string | undefined;
    ownerPhone: string | undefined;
    vehicleOwner: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleBusinessTypeText: string | undefined;
    vehicleType: string | undefined;
    vehicleTypeText: string | undefined;
    models: string | undefined;
    modelsText: string | undefined;
    vehicleState: string | undefined;
    vehicleStateText: string | undefined;
    vehicleGroup: string | undefined;
    vehicleGroupText: string | undefined;
    vehicleQualifications: string | undefined;
    vehicleQualificationsText: string | undefined;
    joiningDate: moment.Moment | undefined;
    expectedroductionDate: moment.Moment | undefined;
    introducer: string | undefined;
    introducerNames: string | undefined;
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    vehicleStateFlag: VehicleArchivesListDtoVehicleStateFlag | undefined;
    /** 载重 */
    carryingCapacity: number | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleArchivesListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.ouFullName = data["ouFullName"];
            this.detailedOriginalOUId = data["detailedOriginalOUId"];
            this.detailedOUDisplayName = data["detailedOUDisplayName"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.frameNumber = data["frameNumber"];
            this.engineNumber = data["engineNumber"];
            this.trailerNumber = data["trailerNumber"];
            this.trailerFrameNumber = data["trailerFrameNumber"];
            this.acquisitionDate = data["acquisitionDate"] ? moment(data["acquisitionDate"].toString()) : <any>undefined;
            this.vehicleBrand = data["vehicleBrand"];
            this.vehicleBrandText = data["vehicleBrandText"];
            this.brandModel = data["brandModel"];
            this.brandModelText = data["brandModelText"];
            this.ownerIDNumber = data["ownerIDNumber"];
            this.ownerName = data["ownerName"];
            this.ownerPhone = data["ownerPhone"];
            this.vehicleOwner = data["vehicleOwner"];
            this.vehicleBusinessType = data["vehicleBusinessType"];
            this.vehicleBusinessTypeText = data["vehicleBusinessTypeText"];
            this.vehicleType = data["vehicleType"];
            this.vehicleTypeText = data["vehicleTypeText"];
            this.models = data["models"];
            this.modelsText = data["modelsText"];
            this.vehicleState = data["vehicleState"];
            this.vehicleStateText = data["vehicleStateText"];
            this.vehicleGroup = data["vehicleGroup"];
            this.vehicleGroupText = data["vehicleGroupText"];
            this.vehicleQualifications = data["vehicleQualifications"];
            this.vehicleQualificationsText = data["vehicleQualificationsText"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
            this.expectedroductionDate = data["expectedroductionDate"] ? moment(data["expectedroductionDate"].toString()) : <any>undefined;
            this.introducer = data["introducer"];
            this.introducerNames = data["introducerNames"];
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.vehicleStateFlag = data["vehicleStateFlag"];
            this.carryingCapacity = data["carryingCapacity"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleArchivesListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchivesListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["ouFullName"] = this.ouFullName;
        data["detailedOriginalOUId"] = this.detailedOriginalOUId;
        data["detailedOUDisplayName"] = this.detailedOUDisplayName;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["frameNumber"] = this.frameNumber;
        data["engineNumber"] = this.engineNumber;
        data["trailerNumber"] = this.trailerNumber;
        data["trailerFrameNumber"] = this.trailerFrameNumber;
        data["acquisitionDate"] = this.acquisitionDate ? this.acquisitionDate.toISOString() : <any>undefined;
        data["vehicleBrand"] = this.vehicleBrand;
        data["vehicleBrandText"] = this.vehicleBrandText;
        data["brandModel"] = this.brandModel;
        data["brandModelText"] = this.brandModelText;
        data["ownerIDNumber"] = this.ownerIDNumber;
        data["ownerName"] = this.ownerName;
        data["ownerPhone"] = this.ownerPhone;
        data["vehicleOwner"] = this.vehicleOwner;
        data["vehicleBusinessType"] = this.vehicleBusinessType;
        data["vehicleBusinessTypeText"] = this.vehicleBusinessTypeText;
        data["vehicleType"] = this.vehicleType;
        data["vehicleTypeText"] = this.vehicleTypeText;
        data["models"] = this.models;
        data["modelsText"] = this.modelsText;
        data["vehicleState"] = this.vehicleState;
        data["vehicleStateText"] = this.vehicleStateText;
        data["vehicleGroup"] = this.vehicleGroup;
        data["vehicleGroupText"] = this.vehicleGroupText;
        data["vehicleQualifications"] = this.vehicleQualifications;
        data["vehicleQualificationsText"] = this.vehicleQualificationsText;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        data["expectedroductionDate"] = this.expectedroductionDate ? this.expectedroductionDate.toISOString() : <any>undefined;
        data["introducer"] = this.introducer;
        data["introducerNames"] = this.introducerNames;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["vehicleStateFlag"] = this.vehicleStateFlag;
        data["carryingCapacity"] = this.carryingCapacity;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleArchivesListDto {
        const json = this.toJSON();
        let result = new VehicleArchivesListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchivesListDto {
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    ouFullName: string | undefined;
    /** 调度组织 */
    detailedOriginalOUId: number | undefined;
    detailedOUDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    mainVehiclePlate: string | undefined;
    frameNumber: string | undefined;
    engineNumber: string | undefined;
    trailerNumber: string | undefined;
    trailerFrameNumber: string | undefined;
    acquisitionDate: moment.Moment | undefined;
    vehicleBrand: string | undefined;
    vehicleBrandText: string | undefined;
    brandModel: string | undefined;
    brandModelText: string | undefined;
    ownerIDNumber: string | undefined;
    ownerName: string | undefined;
    ownerPhone: string | undefined;
    vehicleOwner: string | undefined;
    vehicleBusinessType: string | undefined;
    vehicleBusinessTypeText: string | undefined;
    vehicleType: string | undefined;
    vehicleTypeText: string | undefined;
    models: string | undefined;
    modelsText: string | undefined;
    vehicleState: string | undefined;
    vehicleStateText: string | undefined;
    vehicleGroup: string | undefined;
    vehicleGroupText: string | undefined;
    vehicleQualifications: string | undefined;
    vehicleQualificationsText: string | undefined;
    joiningDate: moment.Moment | undefined;
    expectedroductionDate: moment.Moment | undefined;
    introducer: string | undefined;
    introducerNames: string | undefined;
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    vehicleStateFlag: VehicleArchivesListDtoVehicleStateFlag | undefined;
    /** 载重 */
    carryingCapacity: number | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class VehicleArchivesStatusWarnListDto implements IVehicleArchivesStatusWarnListDto {
    typeFlag: string | undefined;
    vehicleCode: string | undefined;
    handleType: string | undefined;
    handleTypeText: string | undefined;
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    vehicleAffairsStatus: string | undefined;
    vehicleAffairsStatusText: string | undefined;
    vehicleAffairsType: string | undefined;
    vehicleAffairsTypeText: string | undefined;
    vehicleStateFlag: VehicleArchivesStatusWarnListDtoVehicleStateFlag | undefined;
    endDate: moment.Moment | undefined;
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleArchivesStatusWarnListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.typeFlag = data["typeFlag"];
            this.vehicleCode = data["vehicleCode"];
            this.handleType = data["handleType"];
            this.handleTypeText = data["handleTypeText"];
            this.handleStatus = data["handleStatus"];
            this.handleStatusText = data["handleStatusText"];
            this.vehicleAffairsStatus = data["vehicleAffairsStatus"];
            this.vehicleAffairsStatusText = data["vehicleAffairsStatusText"];
            this.vehicleAffairsType = data["vehicleAffairsType"];
            this.vehicleAffairsTypeText = data["vehicleAffairsTypeText"];
            this.vehicleStateFlag = data["vehicleStateFlag"];
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleArchivesStatusWarnListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchivesStatusWarnListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeFlag"] = this.typeFlag;
        data["vehicleCode"] = this.vehicleCode;
        data["handleType"] = this.handleType;
        data["handleTypeText"] = this.handleTypeText;
        data["handleStatus"] = this.handleStatus;
        data["handleStatusText"] = this.handleStatusText;
        data["vehicleAffairsStatus"] = this.vehicleAffairsStatus;
        data["vehicleAffairsStatusText"] = this.vehicleAffairsStatusText;
        data["vehicleAffairsType"] = this.vehicleAffairsType;
        data["vehicleAffairsTypeText"] = this.vehicleAffairsTypeText;
        data["vehicleStateFlag"] = this.vehicleStateFlag;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleArchivesStatusWarnListDto {
        const json = this.toJSON();
        let result = new VehicleArchivesStatusWarnListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchivesStatusWarnListDto {
    typeFlag: string | undefined;
    vehicleCode: string | undefined;
    handleType: string | undefined;
    handleTypeText: string | undefined;
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    vehicleAffairsStatus: string | undefined;
    vehicleAffairsStatusText: string | undefined;
    vehicleAffairsType: string | undefined;
    vehicleAffairsTypeText: string | undefined;
    vehicleStateFlag: VehicleArchivesStatusWarnListDtoVehicleStateFlag | undefined;
    endDate: moment.Moment | undefined;
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfVehicleBusinessStateListDto implements IPagedResultDtoOfVehicleBusinessStateListDto {
    totalCount: number | undefined;
    items: VehicleBusinessStateListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleBusinessStateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleBusinessStateListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleBusinessStateListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleBusinessStateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleBusinessStateListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleBusinessStateListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleBusinessStateListDto {
    totalCount: number | undefined;
    items: VehicleBusinessStateListDto[] | undefined;
}

export class VehicleBusinessStateListDto implements IVehicleBusinessStateListDto {
    businessType: VehicleBusinessStateListDtoBusinessType | undefined;
    vehicleCode: string | undefined;
    handleType: string | undefined;
    handleTypeText: string | undefined;
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    vehicleAffairsStatus: string | undefined;
    vehicleAffairsStatusText: string | undefined;
    vehicleAffairsType: string | undefined;
    vehicleAffairsTypeText: string | undefined;
    vehicleStateFlag: VehicleBusinessStateListDtoVehicleStateFlag | undefined;
    endDate: moment.Moment | undefined;
    description: string | undefined;
    businessCreationTime: moment.Moment | undefined;
    businessCreationUserId: number | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleBusinessStateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.businessType = data["businessType"];
            this.vehicleCode = data["vehicleCode"];
            this.handleType = data["handleType"];
            this.handleTypeText = data["handleTypeText"];
            this.handleStatus = data["handleStatus"];
            this.handleStatusText = data["handleStatusText"];
            this.vehicleAffairsStatus = data["vehicleAffairsStatus"];
            this.vehicleAffairsStatusText = data["vehicleAffairsStatusText"];
            this.vehicleAffairsType = data["vehicleAffairsType"];
            this.vehicleAffairsTypeText = data["vehicleAffairsTypeText"];
            this.vehicleStateFlag = data["vehicleStateFlag"];
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.businessCreationTime = data["businessCreationTime"] ? moment(data["businessCreationTime"].toString()) : <any>undefined;
            this.businessCreationUserId = data["businessCreationUserId"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleBusinessStateListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleBusinessStateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessType"] = this.businessType;
        data["vehicleCode"] = this.vehicleCode;
        data["handleType"] = this.handleType;
        data["handleTypeText"] = this.handleTypeText;
        data["handleStatus"] = this.handleStatus;
        data["handleStatusText"] = this.handleStatusText;
        data["vehicleAffairsStatus"] = this.vehicleAffairsStatus;
        data["vehicleAffairsStatusText"] = this.vehicleAffairsStatusText;
        data["vehicleAffairsType"] = this.vehicleAffairsType;
        data["vehicleAffairsTypeText"] = this.vehicleAffairsTypeText;
        data["vehicleStateFlag"] = this.vehicleStateFlag;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["businessCreationTime"] = this.businessCreationTime ? this.businessCreationTime.toISOString() : <any>undefined;
        data["businessCreationUserId"] = this.businessCreationUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleBusinessStateListDto {
        const json = this.toJSON();
        let result = new VehicleBusinessStateListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleBusinessStateListDto {
    businessType: VehicleBusinessStateListDtoBusinessType | undefined;
    vehicleCode: string | undefined;
    handleType: string | undefined;
    handleTypeText: string | undefined;
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    vehicleAffairsStatus: string | undefined;
    vehicleAffairsStatusText: string | undefined;
    vehicleAffairsType: string | undefined;
    vehicleAffairsTypeText: string | undefined;
    vehicleStateFlag: VehicleBusinessStateListDtoVehicleStateFlag | undefined;
    endDate: moment.Moment | undefined;
    description: string | undefined;
    businessCreationTime: moment.Moment | undefined;
    businessCreationUserId: number | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class ListResultDtoOfVehicleArchivesListDto implements IListResultDtoOfVehicleArchivesListDto {
    items: VehicleArchivesListDto[] | undefined;

    constructor(data?: IListResultDtoOfVehicleArchivesListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleArchivesListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfVehicleArchivesListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfVehicleArchivesListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfVehicleArchivesListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfVehicleArchivesListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfVehicleArchivesListDto {
    items: VehicleArchivesListDto[] | undefined;
}

export class GetVehicleArchivesForEditOutput implements IGetVehicleArchivesForEditOutput {
    vehicleArchives: VehicleArchivesEditDto | undefined;

    constructor(data?: IGetVehicleArchivesForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleArchives = data["vehicleArchives"] ? VehicleArchivesEditDto.fromJS(data["vehicleArchives"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVehicleArchivesForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetVehicleArchivesForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleArchives"] = this.vehicleArchives ? this.vehicleArchives.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetVehicleArchivesForEditOutput {
        const json = this.toJSON();
        let result = new GetVehicleArchivesForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetVehicleArchivesForEditOutput {
    vehicleArchives: VehicleArchivesEditDto | undefined;
}

export class VehicleArchivesEditDto implements IVehicleArchivesEditDto {
    id: string | undefined;
    originalOUId: number;
    /** 调度组织 */
    detailedOriginalOUId: number;
    vehicleBusinessType: string | undefined;
    vehicleCode: string;
    mainVehiclePlate: string;
    vehicleType: string | undefined;
    vehicleState: string | undefined;
    frameNumber: string | undefined;
    engineNumber: string | undefined;
    trailerNumber: string | undefined;
    trailerFrameNumber: string | undefined;
    acquisitionDate: moment.Moment | undefined;
    vehicleBrand: string | undefined;
    brandModel: string | undefined;
    ownerIDNumber: string | undefined;
    ownerName: string | undefined;
    ownerPhone: string | undefined;
    vehicleOwner: string | undefined;
    models: string | undefined;
    vehicleGroup: string | undefined;
    vehicleQualifications: string | undefined;
    joiningDate: moment.Moment | undefined;
    expectedroductionDate: moment.Moment | undefined;
    introducer: string | undefined;
    introducerName: string | undefined;
    description: string | undefined;
    /** 载重 */
    carryingCapacity: number | undefined;

    constructor(data?: IVehicleArchivesEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.originalOUId = data["originalOUId"];
            this.detailedOriginalOUId = data["detailedOriginalOUId"];
            this.vehicleBusinessType = data["vehicleBusinessType"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.vehicleType = data["vehicleType"];
            this.vehicleState = data["vehicleState"];
            this.frameNumber = data["frameNumber"];
            this.engineNumber = data["engineNumber"];
            this.trailerNumber = data["trailerNumber"];
            this.trailerFrameNumber = data["trailerFrameNumber"];
            this.acquisitionDate = data["acquisitionDate"] ? moment(data["acquisitionDate"].toString()) : <any>undefined;
            this.vehicleBrand = data["vehicleBrand"];
            this.brandModel = data["brandModel"];
            this.ownerIDNumber = data["ownerIDNumber"];
            this.ownerName = data["ownerName"];
            this.ownerPhone = data["ownerPhone"];
            this.vehicleOwner = data["vehicleOwner"];
            this.models = data["models"];
            this.vehicleGroup = data["vehicleGroup"];
            this.vehicleQualifications = data["vehicleQualifications"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
            this.expectedroductionDate = data["expectedroductionDate"] ? moment(data["expectedroductionDate"].toString()) : <any>undefined;
            this.introducer = data["introducer"];
            this.introducerName = data["introducerName"];
            this.description = data["description"];
            this.carryingCapacity = data["carryingCapacity"];
        }
    }

    static fromJS(data: any): VehicleArchivesEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchivesEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["originalOUId"] = this.originalOUId;
        data["detailedOriginalOUId"] = this.detailedOriginalOUId;
        data["vehicleBusinessType"] = this.vehicleBusinessType;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["vehicleType"] = this.vehicleType;
        data["vehicleState"] = this.vehicleState;
        data["frameNumber"] = this.frameNumber;
        data["engineNumber"] = this.engineNumber;
        data["trailerNumber"] = this.trailerNumber;
        data["trailerFrameNumber"] = this.trailerFrameNumber;
        data["acquisitionDate"] = this.acquisitionDate ? this.acquisitionDate.toISOString() : <any>undefined;
        data["vehicleBrand"] = this.vehicleBrand;
        data["brandModel"] = this.brandModel;
        data["ownerIDNumber"] = this.ownerIDNumber;
        data["ownerName"] = this.ownerName;
        data["ownerPhone"] = this.ownerPhone;
        data["vehicleOwner"] = this.vehicleOwner;
        data["models"] = this.models;
        data["vehicleGroup"] = this.vehicleGroup;
        data["vehicleQualifications"] = this.vehicleQualifications;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        data["expectedroductionDate"] = this.expectedroductionDate ? this.expectedroductionDate.toISOString() : <any>undefined;
        data["introducer"] = this.introducer;
        data["introducerName"] = this.introducerName;
        data["description"] = this.description;
        data["carryingCapacity"] = this.carryingCapacity;
        return data; 
    }

    clone(): VehicleArchivesEditDto {
        const json = this.toJSON();
        let result = new VehicleArchivesEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchivesEditDto {
    id: string | undefined;
    originalOUId: number;
    /** 调度组织 */
    detailedOriginalOUId: number;
    vehicleBusinessType: string | undefined;
    vehicleCode: string;
    mainVehiclePlate: string;
    vehicleType: string | undefined;
    vehicleState: string | undefined;
    frameNumber: string | undefined;
    engineNumber: string | undefined;
    trailerNumber: string | undefined;
    trailerFrameNumber: string | undefined;
    acquisitionDate: moment.Moment | undefined;
    vehicleBrand: string | undefined;
    brandModel: string | undefined;
    ownerIDNumber: string | undefined;
    ownerName: string | undefined;
    ownerPhone: string | undefined;
    vehicleOwner: string | undefined;
    models: string | undefined;
    vehicleGroup: string | undefined;
    vehicleQualifications: string | undefined;
    joiningDate: moment.Moment | undefined;
    expectedroductionDate: moment.Moment | undefined;
    introducer: string | undefined;
    introducerName: string | undefined;
    description: string | undefined;
    /** 载重 */
    carryingCapacity: number | undefined;
}

export class CreateOrUpdateVehicleArchivesInput implements ICreateOrUpdateVehicleArchivesInput {
    vehicleArchives: VehicleArchivesEditDto | undefined;

    constructor(data?: ICreateOrUpdateVehicleArchivesInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleArchives = data["vehicleArchives"] ? VehicleArchivesEditDto.fromJS(data["vehicleArchives"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateVehicleArchivesInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateVehicleArchivesInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleArchives"] = this.vehicleArchives ? this.vehicleArchives.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateVehicleArchivesInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateVehicleArchivesInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateVehicleArchivesInput {
    vehicleArchives: VehicleArchivesEditDto | undefined;
}

export class VehicleArchivesIdInput implements IVehicleArchivesIdInput {
    idStr: string | undefined;

    constructor(data?: IVehicleArchivesIdInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idStr = data["idStr"];
        }
    }

    static fromJS(data: any): VehicleArchivesIdInput {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchivesIdInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idStr"] = this.idStr;
        return data; 
    }

    clone(): VehicleArchivesIdInput {
        const json = this.toJSON();
        let result = new VehicleArchivesIdInput();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchivesIdInput {
    idStr: string | undefined;
}

export class CreateVehicleArchiveFromExcelInput implements ICreateVehicleArchiveFromExcelInput {
    fileContent: string | undefined;

    constructor(data?: ICreateVehicleArchiveFromExcelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileContent = data["fileContent"];
        }
    }

    static fromJS(data: any): CreateVehicleArchiveFromExcelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVehicleArchiveFromExcelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileContent"] = this.fileContent;
        return data; 
    }

    clone(): CreateVehicleArchiveFromExcelInput {
        const json = this.toJSON();
        let result = new CreateVehicleArchiveFromExcelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateVehicleArchiveFromExcelInput {
    fileContent: string | undefined;
}

export class VehicleArchiveImportingReturnDto implements IVehicleArchiveImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;

    constructor(data?: IVehicleArchiveImportingReturnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): VehicleArchiveImportingReturnDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchiveImportingReturnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): VehicleArchiveImportingReturnDto {
        const json = this.toJSON();
        let result = new VehicleArchiveImportingReturnDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchiveImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;
}

export class PagedResultDtoOfVehicleMoneyListDto implements IPagedResultDtoOfVehicleMoneyListDto {
    totalCount: number | undefined;
    items: VehicleMoneyListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleMoneyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleMoneyListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleMoneyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleMoneyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleMoneyListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleMoneyListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleMoneyListDto {
    totalCount: number | undefined;
    items: VehicleMoneyListDto[] | undefined;
}

export class VehicleMoneyListDto implements IVehicleMoneyListDto {
    id: string | undefined;
    vehicleId: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 保证金变动类型（数据字典维护） */
    vehicleMoneyType: string | undefined;
    vehicleMoneyTypeText: string | undefined;
    /** 应发生金额 */
    shouldMoneyNum: number | undefined;
    /** 变动金额 */
    vehicleMoneyNum: number | undefined;
    /** 保证金余额 */
    vehicleMoneySurplus: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;

    constructor(data?: IVehicleMoneyListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleId = data["vehicleId"];
            this.vehicleCode = data["vehicleCode"];
            this.recordDate = data["recordDate"] ? moment(data["recordDate"].toString()) : <any>undefined;
            this.vehicleMoneyType = data["vehicleMoneyType"];
            this.vehicleMoneyTypeText = data["vehicleMoneyTypeText"];
            this.shouldMoneyNum = data["shouldMoneyNum"];
            this.vehicleMoneyNum = data["vehicleMoneyNum"];
            this.vehicleMoneySurplus = data["vehicleMoneySurplus"];
            this.remark = data["remark"];
            this.creatorUserId = data["creatorUserId"];
            this.beRecorder = data["beRecorder"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleMoneyListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleMoneyListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleId"] = this.vehicleId;
        data["vehicleCode"] = this.vehicleCode;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["vehicleMoneyType"] = this.vehicleMoneyType;
        data["vehicleMoneyTypeText"] = this.vehicleMoneyTypeText;
        data["shouldMoneyNum"] = this.shouldMoneyNum;
        data["vehicleMoneyNum"] = this.vehicleMoneyNum;
        data["vehicleMoneySurplus"] = this.vehicleMoneySurplus;
        data["remark"] = this.remark;
        data["creatorUserId"] = this.creatorUserId;
        data["beRecorder"] = this.beRecorder;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        return data; 
    }

    clone(): VehicleMoneyListDto {
        const json = this.toJSON();
        let result = new VehicleMoneyListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleMoneyListDto {
    id: string | undefined;
    vehicleId: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 保证金变动类型（数据字典维护） */
    vehicleMoneyType: string | undefined;
    vehicleMoneyTypeText: string | undefined;
    /** 应发生金额 */
    shouldMoneyNum: number | undefined;
    /** 变动金额 */
    vehicleMoneyNum: number | undefined;
    /** 保证金余额 */
    vehicleMoneySurplus: number | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 创建人Id， */
    creatorUserId: number | undefined;
    /** 记录人 */
    beRecorder: string | undefined;
    creationTime: moment.Moment | undefined;
}

export class VehicleMoneyEditDto implements IVehicleMoneyEditDto {
    /** Id 主键 */
    id: string | undefined;
    originalOUId: number | undefined;
    vehicleId: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 保证金变动类型（数据字典维护） */
    vehicleMoneyType: string | undefined;
    vehicleMoneyTypeText: string | undefined;
    /** 应发生金额 */
    shouldMoneyNum: number | undefined;
    /** 变动金额 */
    vehicleMoneyNum: number | undefined;
    /** 保证金余额 */
    vehicleMoneySurplus: number | undefined;
    /** 上一条记录的保证金余额 */
    lastVehicleMoneySurplus: number | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IVehicleMoneyEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.originalOUId = data["originalOUId"];
            this.vehicleId = data["vehicleId"];
            this.vehicleCode = data["vehicleCode"];
            this.recordDate = data["recordDate"] ? moment(data["recordDate"].toString()) : <any>undefined;
            this.vehicleMoneyType = data["vehicleMoneyType"];
            this.vehicleMoneyTypeText = data["vehicleMoneyTypeText"];
            this.shouldMoneyNum = data["shouldMoneyNum"];
            this.vehicleMoneyNum = data["vehicleMoneyNum"];
            this.vehicleMoneySurplus = data["vehicleMoneySurplus"];
            this.lastVehicleMoneySurplus = data["lastVehicleMoneySurplus"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): VehicleMoneyEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleMoneyEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["originalOUId"] = this.originalOUId;
        data["vehicleId"] = this.vehicleId;
        data["vehicleCode"] = this.vehicleCode;
        data["recordDate"] = this.recordDate ? this.recordDate.toISOString() : <any>undefined;
        data["vehicleMoneyType"] = this.vehicleMoneyType;
        data["vehicleMoneyTypeText"] = this.vehicleMoneyTypeText;
        data["shouldMoneyNum"] = this.shouldMoneyNum;
        data["vehicleMoneyNum"] = this.vehicleMoneyNum;
        data["vehicleMoneySurplus"] = this.vehicleMoneySurplus;
        data["lastVehicleMoneySurplus"] = this.lastVehicleMoneySurplus;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): VehicleMoneyEditDto {
        const json = this.toJSON();
        let result = new VehicleMoneyEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleMoneyEditDto {
    /** Id 主键 */
    id: string | undefined;
    originalOUId: number | undefined;
    vehicleId: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 登记日期 */
    recordDate: moment.Moment | undefined;
    /** 保证金变动类型（数据字典维护） */
    vehicleMoneyType: string | undefined;
    vehicleMoneyTypeText: string | undefined;
    /** 应发生金额 */
    shouldMoneyNum: number | undefined;
    /** 变动金额 */
    vehicleMoneyNum: number | undefined;
    /** 保证金余额 */
    vehicleMoneySurplus: number | undefined;
    /** 上一条记录的保证金余额 */
    lastVehicleMoneySurplus: number | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class CreateOrUpdateVehicleMoneyInput implements ICreateOrUpdateVehicleMoneyInput {
    vehicleMoney: VehicleMoneyEditDto | undefined;

    constructor(data?: ICreateOrUpdateVehicleMoneyInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleMoney = data["vehicleMoney"] ? VehicleMoneyEditDto.fromJS(data["vehicleMoney"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateVehicleMoneyInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateVehicleMoneyInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleMoney"] = this.vehicleMoney ? this.vehicleMoney.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateVehicleMoneyInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateVehicleMoneyInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateVehicleMoneyInput {
    vehicleMoney: VehicleMoneyEditDto | undefined;
}

export class PagedResultDtoOfVehicleArchivesListByMobileDto implements IPagedResultDtoOfVehicleArchivesListByMobileDto {
    totalCount: number | undefined;
    items: VehicleArchivesListByMobileDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleArchivesListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleArchivesListByMobileDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleArchivesListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleArchivesListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleArchivesListByMobileDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleArchivesListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleArchivesListByMobileDto {
    totalCount: number | undefined;
    items: VehicleArchivesListByMobileDto[] | undefined;
}

export class VehicleArchivesListByMobileDto implements IVehicleArchivesListByMobileDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 所属物流公司 */
    originalOUId: number | undefined;
    /** 所属物流公司名称 */
    ouDisplayName: string | undefined;
    /** 车辆业务类型（数据字典维护：自营 = "101";承包 = "102";加盟 = "103";社会车辆 = "104";） */
    vehicleBusinessType: string | undefined;
    /** 车辆业务类型名称 */
    vehicleBusinessTypeText: string | undefined;
    /** 车辆类型（数据字典维护） */
    vehicleType: string | undefined;
    /** 车辆类型名称 */
    vehicleTypeText: string | undefined;
    /** 车型（数据字典维护） */
    models: string | undefined;
    /** 车型名称 */
    modelsText: string | undefined;
    /** 车辆状态（数据字典维护：新加盟 = "101";正常 = "102";停用 = "103";异常 = "104";退出 = "105";退出前锁定 = "106";临时停车 = "107";其他 = "999";） */
    vehicleState: string | undefined;
    /** 车辆状态名称 */
    vehicleStateText: string | undefined;
    /** 车主身份证号 */
    ownerIDNumber: string | undefined;
    /** 车主姓名 */
    ownerName: string | undefined;
    /** 车主联系方式 */
    ownerPhone: string | undefined;
    /** 车架号 */
    trailerFrameNumber: string | undefined;
    /** 发动机号 */
    engineNumber: string | undefined;
    /** 加盟日期 */
    joiningDate: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleArchivesListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.vehicleBusinessType = data["vehicleBusinessType"];
            this.vehicleBusinessTypeText = data["vehicleBusinessTypeText"];
            this.vehicleType = data["vehicleType"];
            this.vehicleTypeText = data["vehicleTypeText"];
            this.models = data["models"];
            this.modelsText = data["modelsText"];
            this.vehicleState = data["vehicleState"];
            this.vehicleStateText = data["vehicleStateText"];
            this.ownerIDNumber = data["ownerIDNumber"];
            this.ownerName = data["ownerName"];
            this.ownerPhone = data["ownerPhone"];
            this.trailerFrameNumber = data["trailerFrameNumber"];
            this.engineNumber = data["engineNumber"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleArchivesListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchivesListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["vehicleBusinessType"] = this.vehicleBusinessType;
        data["vehicleBusinessTypeText"] = this.vehicleBusinessTypeText;
        data["vehicleType"] = this.vehicleType;
        data["vehicleTypeText"] = this.vehicleTypeText;
        data["models"] = this.models;
        data["modelsText"] = this.modelsText;
        data["vehicleState"] = this.vehicleState;
        data["vehicleStateText"] = this.vehicleStateText;
        data["ownerIDNumber"] = this.ownerIDNumber;
        data["ownerName"] = this.ownerName;
        data["ownerPhone"] = this.ownerPhone;
        data["trailerFrameNumber"] = this.trailerFrameNumber;
        data["engineNumber"] = this.engineNumber;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleArchivesListByMobileDto {
        const json = this.toJSON();
        let result = new VehicleArchivesListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchivesListByMobileDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 所属物流公司 */
    originalOUId: number | undefined;
    /** 所属物流公司名称 */
    ouDisplayName: string | undefined;
    /** 车辆业务类型（数据字典维护：自营 = "101";承包 = "102";加盟 = "103";社会车辆 = "104";） */
    vehicleBusinessType: string | undefined;
    /** 车辆业务类型名称 */
    vehicleBusinessTypeText: string | undefined;
    /** 车辆类型（数据字典维护） */
    vehicleType: string | undefined;
    /** 车辆类型名称 */
    vehicleTypeText: string | undefined;
    /** 车型（数据字典维护） */
    models: string | undefined;
    /** 车型名称 */
    modelsText: string | undefined;
    /** 车辆状态（数据字典维护：新加盟 = "101";正常 = "102";停用 = "103";异常 = "104";退出 = "105";退出前锁定 = "106";临时停车 = "107";其他 = "999";） */
    vehicleState: string | undefined;
    /** 车辆状态名称 */
    vehicleStateText: string | undefined;
    /** 车主身份证号 */
    ownerIDNumber: string | undefined;
    /** 车主姓名 */
    ownerName: string | undefined;
    /** 车主联系方式 */
    ownerPhone: string | undefined;
    /** 车架号 */
    trailerFrameNumber: string | undefined;
    /** 发动机号 */
    engineNumber: string | undefined;
    /** 加盟日期 */
    joiningDate: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class VehicleArchiveDetailDto implements IVehicleArchiveDetailDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 所属物流公司 */
    originalOUId: number | undefined;
    /** 所属物流公司名称 */
    ouDisplayName: string | undefined;
    /** 车辆业务类型（数据字典维护） */
    vehicleBusinessType: string | undefined;
    /** 车辆业务类型名称 */
    vehicleBusinessTypeText: string | undefined;
    /** 车辆类型（数据字典维护） */
    vehicleType: string | undefined;
    /** 车辆类型名称 */
    vehicleTypeText: string | undefined;
    /** 车型（数据字典维护） */
    models: string | undefined;
    /** 车型名称 */
    modelsText: string | undefined;
    /** 车辆状态（数据字典维护） */
    vehicleState: string | undefined;
    /** 车辆状态名称 */
    vehicleStateText: string | undefined;
    /** 车主身份证号 */
    ownerIDNumber: string | undefined;
    /** 车主姓名 */
    ownerName: string | undefined;
    /** 车主联系方式 */
    ownerPhone: string | undefined;
    /** 挂车车架号 */
    trailerFrameNumber: string | undefined;
    /** 发动机号 */
    engineNumber: string | undefined;
    /** 加盟日期 */
    joiningDate: moment.Moment | undefined;

    constructor(data?: IVehicleArchiveDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.vehicleBusinessType = data["vehicleBusinessType"];
            this.vehicleBusinessTypeText = data["vehicleBusinessTypeText"];
            this.vehicleType = data["vehicleType"];
            this.vehicleTypeText = data["vehicleTypeText"];
            this.models = data["models"];
            this.modelsText = data["modelsText"];
            this.vehicleState = data["vehicleState"];
            this.vehicleStateText = data["vehicleStateText"];
            this.ownerIDNumber = data["ownerIDNumber"];
            this.ownerName = data["ownerName"];
            this.ownerPhone = data["ownerPhone"];
            this.trailerFrameNumber = data["trailerFrameNumber"];
            this.engineNumber = data["engineNumber"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleArchiveDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchiveDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["vehicleBusinessType"] = this.vehicleBusinessType;
        data["vehicleBusinessTypeText"] = this.vehicleBusinessTypeText;
        data["vehicleType"] = this.vehicleType;
        data["vehicleTypeText"] = this.vehicleTypeText;
        data["models"] = this.models;
        data["modelsText"] = this.modelsText;
        data["vehicleState"] = this.vehicleState;
        data["vehicleStateText"] = this.vehicleStateText;
        data["ownerIDNumber"] = this.ownerIDNumber;
        data["ownerName"] = this.ownerName;
        data["ownerPhone"] = this.ownerPhone;
        data["trailerFrameNumber"] = this.trailerFrameNumber;
        data["engineNumber"] = this.engineNumber;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): VehicleArchiveDetailDto {
        const json = this.toJSON();
        let result = new VehicleArchiveDetailDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchiveDetailDto {
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    mainVehiclePlate: string | undefined;
    /** 所属物流公司 */
    originalOUId: number | undefined;
    /** 所属物流公司名称 */
    ouDisplayName: string | undefined;
    /** 车辆业务类型（数据字典维护） */
    vehicleBusinessType: string | undefined;
    /** 车辆业务类型名称 */
    vehicleBusinessTypeText: string | undefined;
    /** 车辆类型（数据字典维护） */
    vehicleType: string | undefined;
    /** 车辆类型名称 */
    vehicleTypeText: string | undefined;
    /** 车型（数据字典维护） */
    models: string | undefined;
    /** 车型名称 */
    modelsText: string | undefined;
    /** 车辆状态（数据字典维护） */
    vehicleState: string | undefined;
    /** 车辆状态名称 */
    vehicleStateText: string | undefined;
    /** 车主身份证号 */
    ownerIDNumber: string | undefined;
    /** 车主姓名 */
    ownerName: string | undefined;
    /** 车主联系方式 */
    ownerPhone: string | undefined;
    /** 挂车车架号 */
    trailerFrameNumber: string | undefined;
    /** 发动机号 */
    engineNumber: string | undefined;
    /** 加盟日期 */
    joiningDate: moment.Moment | undefined;
}

export class GetVehicleDriverArchiveInputMobile implements IGetVehicleDriverArchiveInputMobile {
    /** id */
    id: string;

    constructor(data?: IGetVehicleDriverArchiveInputMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): GetVehicleDriverArchiveInputMobile {
        data = typeof data === 'object' ? data : {};
        let result = new GetVehicleDriverArchiveInputMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): GetVehicleDriverArchiveInputMobile {
        const json = this.toJSON();
        let result = new GetVehicleDriverArchiveInputMobile();
        result.init(json);
        return result;
    }
}

export interface IGetVehicleDriverArchiveInputMobile {
    /** id */
    id: string;
}

export class VehicleArchiveOutputToMobile implements IVehicleArchiveOutputToMobile {
    success: boolean | undefined;

    constructor(data?: IVehicleArchiveOutputToMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
        }
    }

    static fromJS(data: any): VehicleArchiveOutputToMobile {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleArchiveOutputToMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        return data; 
    }

    clone(): VehicleArchiveOutputToMobile {
        const json = this.toJSON();
        let result = new VehicleArchiveOutputToMobile();
        result.init(json);
        return result;
    }
}

export interface IVehicleArchiveOutputToMobile {
    success: boolean | undefined;
}

export class PagedResultDtoOfVehicleDispatchAssignListDto implements IPagedResultDtoOfVehicleDispatchAssignListDto {
    totalCount: number | undefined;
    items: VehicleDispatchAssignListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDispatchAssignListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDispatchAssignListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDispatchAssignListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDispatchAssignListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDispatchAssignListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDispatchAssignListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDispatchAssignListDto {
    totalCount: number | undefined;
    items: VehicleDispatchAssignListDto[] | undefined;
}

export class VehicleDispatchAssignListDto implements IVehicleDispatchAssignListDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 所属业务单位名称 */
    organizationUnitName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 派车分组名称 */
    groupText: string | undefined;
    isActive: boolean | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDispatchAssignListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.vehicleCode = data["vehicleCode"];
            this.group = data["group"];
            this.groupText = data["groupText"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDispatchAssignListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDispatchAssignListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["vehicleCode"] = this.vehicleCode;
        data["group"] = this.group;
        data["groupText"] = this.groupText;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDispatchAssignListDto {
        const json = this.toJSON();
        let result = new VehicleDispatchAssignListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDispatchAssignListDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 所属业务单位名称 */
    organizationUnitName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 派车分组名称 */
    groupText: string | undefined;
    isActive: boolean | undefined;
    id: string | undefined;
}

export class VehicleDispatchAssignEditDto implements IVehicleDispatchAssignEditDto {
    id: string | undefined;
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 车辆编码 */
    vehicleCode: string | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;

    constructor(data?: IVehicleDispatchAssignEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.organizationUnitId = data["organizationUnitId"];
            this.vehicleCode = data["vehicleCode"];
            this.group = data["group"];
            this.remark = data["remark"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): VehicleDispatchAssignEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDispatchAssignEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["organizationUnitId"] = this.organizationUnitId;
        data["vehicleCode"] = this.vehicleCode;
        data["group"] = this.group;
        data["remark"] = this.remark;
        data["isActive"] = this.isActive;
        return data; 
    }

    clone(): VehicleDispatchAssignEditDto {
        const json = this.toJSON();
        let result = new VehicleDispatchAssignEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDispatchAssignEditDto {
    id: string | undefined;
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 车辆编码 */
    vehicleCode: string | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
}

export class PagedResultDtoOfVehicleDispatchAssignListForManagerDto implements IPagedResultDtoOfVehicleDispatchAssignListForManagerDto {
    totalCount: number | undefined;
    items: VehicleDispatchAssignListForManagerDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDispatchAssignListForManagerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDispatchAssignListForManagerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDispatchAssignListForManagerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDispatchAssignListForManagerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDispatchAssignListForManagerDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDispatchAssignListForManagerDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDispatchAssignListForManagerDto {
    totalCount: number | undefined;
    items: VehicleDispatchAssignListForManagerDto[] | undefined;
}

export class VehicleDispatchAssignListForManagerDto implements IVehicleDispatchAssignListForManagerDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 所属业务单位名称 */
    organizationUnitName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 派车分组名称 */
    groupText: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDispatchAssignListForManagerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.organizationUnitName = data["organizationUnitName"];
            this.vehicleCode = data["vehicleCode"];
            this.group = data["group"];
            this.groupText = data["groupText"];
            this.isActive = data["isActive"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDispatchAssignListForManagerDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDispatchAssignListForManagerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["organizationUnitName"] = this.organizationUnitName;
        data["vehicleCode"] = this.vehicleCode;
        data["group"] = this.group;
        data["groupText"] = this.groupText;
        data["isActive"] = this.isActive;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDispatchAssignListForManagerDto {
        const json = this.toJSON();
        let result = new VehicleDispatchAssignListForManagerDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDispatchAssignListForManagerDto {
    /** 所属业务单位 */
    organizationUnitId: number | undefined;
    /** 所属业务单位名称 */
    organizationUnitName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 派车分组 */
    group: string | undefined;
    /** 派车分组名称 */
    groupText: string | undefined;
    /** 是否激活 */
    isActive: boolean | undefined;
    id: string | undefined;
}

export class EditVehicleDispatchAssignForMangerInput implements IEditVehicleDispatchAssignForMangerInput {
    /** 所属业务单位 */
    organizationUnitId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 派车分组 */
    group: string;
    /** 是否激活 */
    isActive: boolean;

    constructor(data?: IEditVehicleDispatchAssignForMangerInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.organizationUnitId = data["organizationUnitId"];
            this.vehicleCode = data["vehicleCode"];
            this.group = data["group"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): EditVehicleDispatchAssignForMangerInput {
        data = typeof data === 'object' ? data : {};
        let result = new EditVehicleDispatchAssignForMangerInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["organizationUnitId"] = this.organizationUnitId;
        data["vehicleCode"] = this.vehicleCode;
        data["group"] = this.group;
        data["isActive"] = this.isActive;
        return data; 
    }

    clone(): EditVehicleDispatchAssignForMangerInput {
        const json = this.toJSON();
        let result = new EditVehicleDispatchAssignForMangerInput();
        result.init(json);
        return result;
    }
}

export interface IEditVehicleDispatchAssignForMangerInput {
    /** 所属业务单位 */
    organizationUnitId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 派车分组 */
    group: string;
    /** 是否激活 */
    isActive: boolean;
}

export class ListResultDtoOfVehicleDispatchReceiptListDto implements IListResultDtoOfVehicleDispatchReceiptListDto {
    items: VehicleDispatchReceiptListDto[] | undefined;

    constructor(data?: IListResultDtoOfVehicleDispatchReceiptListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDispatchReceiptListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfVehicleDispatchReceiptListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfVehicleDispatchReceiptListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfVehicleDispatchReceiptListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfVehicleDispatchReceiptListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfVehicleDispatchReceiptListDto {
    items: VehicleDispatchReceiptListDto[] | undefined;
}

export class VehicleDispatchReceiptListDto implements IVehicleDispatchReceiptListDto {
    /** 派车分组 */
    group: string | undefined;
    /** 派车分组文本 */
    groupText: string | undefined;
    /** 车型 */
    models: string | undefined;
    /** 车型文本 */
    modelsText: string | undefined;
    /** 运行车辆 */
    vehicelCount: number | undefined;
    /** 当日已派单数 */
    todaySendCount: number | undefined;
    /** 当日已入单数 */
    todayEnteredount: number | undefined;
    /** 当日已入吨数 */
    todayEnteredTonnage: number | undefined;
    /** 近30天已派单数 */
    monthSendCount: number | undefined;
    /** 近30天已入库数 */
    monthEnteredCount: number | undefined;

    constructor(data?: IVehicleDispatchReceiptListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.group = data["group"];
            this.groupText = data["groupText"];
            this.models = data["models"];
            this.modelsText = data["modelsText"];
            this.vehicelCount = data["vehicelCount"];
            this.todaySendCount = data["todaySendCount"];
            this.todayEnteredount = data["todayEnteredount"];
            this.todayEnteredTonnage = data["todayEnteredTonnage"];
            this.monthSendCount = data["monthSendCount"];
            this.monthEnteredCount = data["monthEnteredCount"];
        }
    }

    static fromJS(data: any): VehicleDispatchReceiptListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDispatchReceiptListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["group"] = this.group;
        data["groupText"] = this.groupText;
        data["models"] = this.models;
        data["modelsText"] = this.modelsText;
        data["vehicelCount"] = this.vehicelCount;
        data["todaySendCount"] = this.todaySendCount;
        data["todayEnteredount"] = this.todayEnteredount;
        data["todayEnteredTonnage"] = this.todayEnteredTonnage;
        data["monthSendCount"] = this.monthSendCount;
        data["monthEnteredCount"] = this.monthEnteredCount;
        return data; 
    }

    clone(): VehicleDispatchReceiptListDto {
        const json = this.toJSON();
        let result = new VehicleDispatchReceiptListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDispatchReceiptListDto {
    /** 派车分组 */
    group: string | undefined;
    /** 派车分组文本 */
    groupText: string | undefined;
    /** 车型 */
    models: string | undefined;
    /** 车型文本 */
    modelsText: string | undefined;
    /** 运行车辆 */
    vehicelCount: number | undefined;
    /** 当日已派单数 */
    todaySendCount: number | undefined;
    /** 当日已入单数 */
    todayEnteredount: number | undefined;
    /** 当日已入吨数 */
    todayEnteredTonnage: number | undefined;
    /** 近30天已派单数 */
    monthSendCount: number | undefined;
    /** 近30天已入库数 */
    monthEnteredCount: number | undefined;
}

export class ListResultDtoOfDriverIDNumberDto implements IListResultDtoOfDriverIDNumberDto {
    items: DriverIDNumberDto[] | undefined;

    constructor(data?: IListResultDtoOfDriverIDNumberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(DriverIDNumberDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfDriverIDNumberDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfDriverIDNumberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfDriverIDNumberDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfDriverIDNumberDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfDriverIDNumberDto {
    items: DriverIDNumberDto[] | undefined;
}

export class DriverIDNumberDto implements IDriverIDNumberDto {
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;

    constructor(data?: IDriverIDNumberDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.vehicleCode = data["vehicleCode"];
        }
    }

    static fromJS(data: any): DriverIDNumberDto {
        data = typeof data === 'object' ? data : {};
        let result = new DriverIDNumberDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["vehicleCode"] = this.vehicleCode;
        return data; 
    }

    clone(): DriverIDNumberDto {
        const json = this.toJSON();
        let result = new DriverIDNumberDto();
        result.init(json);
        return result;
    }
}

export interface IDriverIDNumberDto {
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
}

export class VehicleDriverArchiveReportOutput implements IVehicleDriverArchiveReportOutput {
    normal: number | undefined;
    joinCount: number | undefined;
    stopCount: number | undefined;
    vacationCount: number | undefined;
    temporary: number | undefined;
    otherCount: number | undefined;
    totalCount: number | undefined;

    constructor(data?: IVehicleDriverArchiveReportOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.normal = data["normal"];
            this.joinCount = data["joinCount"];
            this.stopCount = data["stopCount"];
            this.vacationCount = data["vacationCount"];
            this.temporary = data["temporary"];
            this.otherCount = data["otherCount"];
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveReportOutput {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveReportOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["normal"] = this.normal;
        data["joinCount"] = this.joinCount;
        data["stopCount"] = this.stopCount;
        data["vacationCount"] = this.vacationCount;
        data["temporary"] = this.temporary;
        data["otherCount"] = this.otherCount;
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): VehicleDriverArchiveReportOutput {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveReportOutput();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveReportOutput {
    normal: number | undefined;
    joinCount: number | undefined;
    stopCount: number | undefined;
    vacationCount: number | undefined;
    temporary: number | undefined;
    otherCount: number | undefined;
    totalCount: number | undefined;
}

export class PagedResultDtoOfVehicleDriverArchiveListDto implements IPagedResultDtoOfVehicleDriverArchiveListDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDriverArchiveListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverArchiveListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDriverArchiveListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDriverArchiveListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDriverArchiveListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDriverArchiveListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDriverArchiveListDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveListDto[] | undefined;
}

export class VehicleDriverArchiveListDto implements IVehicleDriverArchiveListDto {
    isAddToUser: boolean | undefined;
    imageId: string | undefined;
    isHavePicture: boolean | undefined;
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 主车车牌号（司机扣分明细里与身份证号关联） */
    mainVehiclePlate: string | undefined;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 住址 */
    address: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    nationText: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    genderText: string | undefined;
    /** 司机所属车辆类型（数据字典维护） */
    belongVehicleType: string | undefined;
    belongVehicleTypeText: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    personStateText: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 加入日期 */
    joiningDate: moment.Moment | undefined;
    /** 预计上班日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾照到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    residenceTypeText: string | undefined;
    /** 操作证书编号 */
    oprationLicenseID: string | undefined;
    /** 上岗证有效期 */
    workLicenseEndDate: moment.Moment | undefined;
    /** 继续教育有效期 */
    continuingEducationEndDate: moment.Moment | undefined;
    /** 诚信考核有效期 */
    integrityAssessmentEndDate: moment.Moment | undefined;
    /** 填表日期 */
    fillFormDate: moment.Moment | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    driverLicenseLevelText: string | undefined;
    /** 备注 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    vehicleStateFlag: VehicleDriverArchiveListDtoVehicleStateFlag | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverArchiveListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isAddToUser = data["isAddToUser"];
            this.imageId = data["imageId"];
            this.isHavePicture = data["isHavePicture"];
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.vehicleCode = data["vehicleCode"];
            this.mainVehiclePlate = data["mainVehiclePlate"];
            this.signingOrganization = data["signingOrganization"];
            this.buckupContactPerson = data["buckupContactPerson"];
            this.buckupContactPersonPhone = data["buckupContactPersonPhone"];
            this.buckupContactPersonAddress = data["buckupContactPersonAddress"];
            this.address = data["address"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.nation = data["nation"];
            this.nationText = data["nationText"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.gender = data["gender"];
            this.genderText = data["genderText"];
            this.belongVehicleType = data["belongVehicleType"];
            this.belongVehicleTypeText = data["belongVehicleTypeText"];
            this.personType = data["personType"];
            this.personTypeText = data["personTypeText"];
            this.personState = data["personState"];
            this.personStateText = data["personStateText"];
            this.nowAddress = data["nowAddress"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
            this.expectedWorkDate = data["expectedWorkDate"] ? moment(data["expectedWorkDate"].toString()) : <any>undefined;
            this.driverLicenseID = data["driverLicenseID"];
            this.dlCertificateEndDate = data["dlCertificateEndDate"] ? moment(data["dlCertificateEndDate"].toString()) : <any>undefined;
            this.dlCertificateYears = data["dlCertificateYears"];
            this.dlCertificateFirstDate = data["dlCertificateFirstDate"] ? moment(data["dlCertificateFirstDate"].toString()) : <any>undefined;
            this.residenceType = data["residenceType"];
            this.residenceTypeText = data["residenceTypeText"];
            this.oprationLicenseID = data["oprationLicenseID"];
            this.workLicenseEndDate = data["workLicenseEndDate"] ? moment(data["workLicenseEndDate"].toString()) : <any>undefined;
            this.continuingEducationEndDate = data["continuingEducationEndDate"] ? moment(data["continuingEducationEndDate"].toString()) : <any>undefined;
            this.integrityAssessmentEndDate = data["integrityAssessmentEndDate"] ? moment(data["integrityAssessmentEndDate"].toString()) : <any>undefined;
            this.fillFormDate = data["fillFormDate"] ? moment(data["fillFormDate"].toString()) : <any>undefined;
            this.driverLicenseIDNumber = data["driverLicenseIDNumber"];
            this.driverLicenseLevel = data["driverLicenseLevel"];
            this.driverLicenseLevelText = data["driverLicenseLevelText"];
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.vehicleStateFlag = data["vehicleStateFlag"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAddToUser"] = this.isAddToUser;
        data["imageId"] = this.imageId;
        data["isHavePicture"] = this.isHavePicture;
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["vehicleCode"] = this.vehicleCode;
        data["mainVehiclePlate"] = this.mainVehiclePlate;
        data["signingOrganization"] = this.signingOrganization;
        data["buckupContactPerson"] = this.buckupContactPerson;
        data["buckupContactPersonPhone"] = this.buckupContactPersonPhone;
        data["buckupContactPersonAddress"] = this.buckupContactPersonAddress;
        data["address"] = this.address;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["nation"] = this.nation;
        data["nationText"] = this.nationText;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["gender"] = this.gender;
        data["genderText"] = this.genderText;
        data["belongVehicleType"] = this.belongVehicleType;
        data["belongVehicleTypeText"] = this.belongVehicleTypeText;
        data["personType"] = this.personType;
        data["personTypeText"] = this.personTypeText;
        data["personState"] = this.personState;
        data["personStateText"] = this.personStateText;
        data["nowAddress"] = this.nowAddress;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        data["expectedWorkDate"] = this.expectedWorkDate ? this.expectedWorkDate.toISOString() : <any>undefined;
        data["driverLicenseID"] = this.driverLicenseID;
        data["dlCertificateEndDate"] = this.dlCertificateEndDate ? this.dlCertificateEndDate.toISOString() : <any>undefined;
        data["dlCertificateYears"] = this.dlCertificateYears;
        data["dlCertificateFirstDate"] = this.dlCertificateFirstDate ? this.dlCertificateFirstDate.toISOString() : <any>undefined;
        data["residenceType"] = this.residenceType;
        data["residenceTypeText"] = this.residenceTypeText;
        data["oprationLicenseID"] = this.oprationLicenseID;
        data["workLicenseEndDate"] = this.workLicenseEndDate ? this.workLicenseEndDate.toISOString() : <any>undefined;
        data["continuingEducationEndDate"] = this.continuingEducationEndDate ? this.continuingEducationEndDate.toISOString() : <any>undefined;
        data["integrityAssessmentEndDate"] = this.integrityAssessmentEndDate ? this.integrityAssessmentEndDate.toISOString() : <any>undefined;
        data["fillFormDate"] = this.fillFormDate ? this.fillFormDate.toISOString() : <any>undefined;
        data["driverLicenseIDNumber"] = this.driverLicenseIDNumber;
        data["driverLicenseLevel"] = this.driverLicenseLevel;
        data["driverLicenseLevelText"] = this.driverLicenseLevelText;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["vehicleStateFlag"] = this.vehicleStateFlag;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverArchiveListDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveListDto {
    isAddToUser: boolean | undefined;
    imageId: string | undefined;
    isHavePicture: boolean | undefined;
    originalOUId: number | undefined;
    ouDisplayName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 主车车牌号（司机扣分明细里与身份证号关联） */
    mainVehiclePlate: string | undefined;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 住址 */
    address: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    nationText: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    genderText: string | undefined;
    /** 司机所属车辆类型（数据字典维护） */
    belongVehicleType: string | undefined;
    belongVehicleTypeText: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    personStateText: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 加入日期 */
    joiningDate: moment.Moment | undefined;
    /** 预计上班日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾照到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    residenceTypeText: string | undefined;
    /** 操作证书编号 */
    oprationLicenseID: string | undefined;
    /** 上岗证有效期 */
    workLicenseEndDate: moment.Moment | undefined;
    /** 继续教育有效期 */
    continuingEducationEndDate: moment.Moment | undefined;
    /** 诚信考核有效期 */
    integrityAssessmentEndDate: moment.Moment | undefined;
    /** 填表日期 */
    fillFormDate: moment.Moment | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    driverLicenseLevelText: string | undefined;
    /** 备注 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    vehicleStateFlag: VehicleDriverArchiveListDtoVehicleStateFlag | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class ListResultDtoOfVehicleDriverArchiveListDto implements IListResultDtoOfVehicleDriverArchiveListDto {
    items: VehicleDriverArchiveListDto[] | undefined;

    constructor(data?: IListResultDtoOfVehicleDriverArchiveListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverArchiveListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfVehicleDriverArchiveListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfVehicleDriverArchiveListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfVehicleDriverArchiveListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfVehicleDriverArchiveListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfVehicleDriverArchiveListDto {
    items: VehicleDriverArchiveListDto[] | undefined;
}

export class GetVehicleDriverArchiveForEditOutput implements IGetVehicleDriverArchiveForEditOutput {
    vehicleDriverArchive: VehicleDriverArchiveEditDto | undefined;

    constructor(data?: IGetVehicleDriverArchiveForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleDriverArchive = data["vehicleDriverArchive"] ? VehicleDriverArchiveEditDto.fromJS(data["vehicleDriverArchive"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVehicleDriverArchiveForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetVehicleDriverArchiveForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleDriverArchive"] = this.vehicleDriverArchive ? this.vehicleDriverArchive.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetVehicleDriverArchiveForEditOutput {
        const json = this.toJSON();
        let result = new GetVehicleDriverArchiveForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetVehicleDriverArchiveForEditOutput {
    vehicleDriverArchive: VehicleDriverArchiveEditDto | undefined;
}

export class VehicleDriverArchiveEditDto implements IVehicleDriverArchiveEditDto {
    isAddToUser: boolean | undefined;
    id: string | undefined;
    /** 组织ID */
    originalOUId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 住址 */
    address: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 司机姓名 */
    driverName: string;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    /** 司机所属车辆类型（数据字典维护） */
    belongVehicleType: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 加入日期 */
    joiningDate: moment.Moment | undefined;
    /** 预计上班日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    /** 操作证书编号 */
    oprationLicenseID: string | undefined;
    /** 上岗证有效期 */
    workLicenseEndDate: moment.Moment | undefined;
    /** 继续教育有效期 */
    continuingEducationEndDate: moment.Moment | undefined;
    /** 诚信考核有效期 */
    integrityAssessmentEndDate: moment.Moment | undefined;
    /** 填表日期 */
    fillFormDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    /** 领证日期 */
    dlCertificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 签发机关 */
    dlSigningOrganization: string | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 用户名 */
    userName: string | undefined;
    userId: number | undefined;
    imageId: string | undefined;
    isHavePicture: boolean | undefined;
    contentType: string | undefined;
    size: number | undefined;
    fileName: string | undefined;
    bytes: string | undefined;

    constructor(data?: IVehicleDriverArchiveEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.isAddToUser = data["isAddToUser"];
            this.id = data["id"];
            this.originalOUId = data["originalOUId"];
            this.vehicleCode = data["vehicleCode"];
            this.signingOrganization = data["signingOrganization"];
            this.buckupContactPerson = data["buckupContactPerson"];
            this.buckupContactPersonPhone = data["buckupContactPersonPhone"];
            this.buckupContactPersonAddress = data["buckupContactPersonAddress"];
            this.address = data["address"];
            this.birthDate = data["birthDate"] ? moment(data["birthDate"].toString()) : <any>undefined;
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.nation = data["nation"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.gender = data["gender"];
            this.belongVehicleType = data["belongVehicleType"];
            this.personType = data["personType"];
            this.personState = data["personState"];
            this.nowAddress = data["nowAddress"];
            this.joiningDate = data["joiningDate"] ? moment(data["joiningDate"].toString()) : <any>undefined;
            this.expectedWorkDate = data["expectedWorkDate"] ? moment(data["expectedWorkDate"].toString()) : <any>undefined;
            this.residenceType = data["residenceType"];
            this.oprationLicenseID = data["oprationLicenseID"];
            this.workLicenseEndDate = data["workLicenseEndDate"] ? moment(data["workLicenseEndDate"].toString()) : <any>undefined;
            this.continuingEducationEndDate = data["continuingEducationEndDate"] ? moment(data["continuingEducationEndDate"].toString()) : <any>undefined;
            this.integrityAssessmentEndDate = data["integrityAssessmentEndDate"] ? moment(data["integrityAssessmentEndDate"].toString()) : <any>undefined;
            this.fillFormDate = data["fillFormDate"] ? moment(data["fillFormDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.driverLicenseID = data["driverLicenseID"];
            this.driverLicenseIDNumber = data["driverLicenseIDNumber"];
            this.driverLicenseLevel = data["driverLicenseLevel"];
            this.dlCertificateStartDate = data["dlCertificateStartDate"] ? moment(data["dlCertificateStartDate"].toString()) : <any>undefined;
            this.dlCertificateEndDate = data["dlCertificateEndDate"] ? moment(data["dlCertificateEndDate"].toString()) : <any>undefined;
            this.dlSigningOrganization = data["dlSigningOrganization"];
            this.dlCertificateYears = data["dlCertificateYears"];
            this.dlCertificateFirstDate = data["dlCertificateFirstDate"] ? moment(data["dlCertificateFirstDate"].toString()) : <any>undefined;
            this.userName = data["userName"];
            this.userId = data["userId"];
            this.imageId = data["imageId"];
            this.isHavePicture = data["isHavePicture"];
            this.contentType = data["contentType"];
            this.size = data["size"];
            this.fileName = data["fileName"];
            this.bytes = data["bytes"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAddToUser"] = this.isAddToUser;
        data["id"] = this.id;
        data["originalOUId"] = this.originalOUId;
        data["vehicleCode"] = this.vehicleCode;
        data["signingOrganization"] = this.signingOrganization;
        data["buckupContactPerson"] = this.buckupContactPerson;
        data["buckupContactPersonPhone"] = this.buckupContactPersonPhone;
        data["buckupContactPersonAddress"] = this.buckupContactPersonAddress;
        data["address"] = this.address;
        data["birthDate"] = this.birthDate ? this.birthDate.toISOString() : <any>undefined;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["nation"] = this.nation;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["gender"] = this.gender;
        data["belongVehicleType"] = this.belongVehicleType;
        data["personType"] = this.personType;
        data["personState"] = this.personState;
        data["nowAddress"] = this.nowAddress;
        data["joiningDate"] = this.joiningDate ? this.joiningDate.toISOString() : <any>undefined;
        data["expectedWorkDate"] = this.expectedWorkDate ? this.expectedWorkDate.toISOString() : <any>undefined;
        data["residenceType"] = this.residenceType;
        data["oprationLicenseID"] = this.oprationLicenseID;
        data["workLicenseEndDate"] = this.workLicenseEndDate ? this.workLicenseEndDate.toISOString() : <any>undefined;
        data["continuingEducationEndDate"] = this.continuingEducationEndDate ? this.continuingEducationEndDate.toISOString() : <any>undefined;
        data["integrityAssessmentEndDate"] = this.integrityAssessmentEndDate ? this.integrityAssessmentEndDate.toISOString() : <any>undefined;
        data["fillFormDate"] = this.fillFormDate ? this.fillFormDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["driverLicenseID"] = this.driverLicenseID;
        data["driverLicenseIDNumber"] = this.driverLicenseIDNumber;
        data["driverLicenseLevel"] = this.driverLicenseLevel;
        data["dlCertificateStartDate"] = this.dlCertificateStartDate ? this.dlCertificateStartDate.toISOString() : <any>undefined;
        data["dlCertificateEndDate"] = this.dlCertificateEndDate ? this.dlCertificateEndDate.toISOString() : <any>undefined;
        data["dlSigningOrganization"] = this.dlSigningOrganization;
        data["dlCertificateYears"] = this.dlCertificateYears;
        data["dlCertificateFirstDate"] = this.dlCertificateFirstDate ? this.dlCertificateFirstDate.toISOString() : <any>undefined;
        data["userName"] = this.userName;
        data["userId"] = this.userId;
        data["imageId"] = this.imageId;
        data["isHavePicture"] = this.isHavePicture;
        data["contentType"] = this.contentType;
        data["size"] = this.size;
        data["fileName"] = this.fileName;
        data["bytes"] = this.bytes;
        return data; 
    }

    clone(): VehicleDriverArchiveEditDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveEditDto {
    isAddToUser: boolean | undefined;
    id: string | undefined;
    /** 组织ID */
    originalOUId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 签发机关 */
    signingOrganization: string | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 住址 */
    address: string | undefined;
    /** 出生日期 */
    birthDate: moment.Moment | undefined;
    /** 发放日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 民族（数据字典维护） */
    nation: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string;
    /** 司机姓名 */
    driverName: string;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 性别（数据字典维护） */
    gender: string | undefined;
    /** 司机所属车辆类型（数据字典维护） */
    belongVehicleType: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    /** 现住址 */
    nowAddress: string | undefined;
    /** 加入日期 */
    joiningDate: moment.Moment | undefined;
    /** 预计上班日期 */
    expectedWorkDate: moment.Moment | undefined;
    /** 户口类型-户口性质（数据字典维护） */
    residenceType: string | undefined;
    /** 操作证书编号 */
    oprationLicenseID: string | undefined;
    /** 上岗证有效期 */
    workLicenseEndDate: moment.Moment | undefined;
    /** 继续教育有效期 */
    continuingEducationEndDate: moment.Moment | undefined;
    /** 诚信考核有效期 */
    integrityAssessmentEndDate: moment.Moment | undefined;
    /** 填表日期 */
    fillFormDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾驶证档案号 */
    driverLicenseIDNumber: string | undefined;
    /** 驾驶证级别（数据字典维护） */
    driverLicenseLevel: string | undefined;
    /** 领证日期 */
    dlCertificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 签发机关 */
    dlSigningOrganization: string | undefined;
    /** 当前驾龄 */
    dlCertificateYears: number | undefined;
    /** 初次领证日期 */
    dlCertificateFirstDate: moment.Moment | undefined;
    /** 用户名 */
    userName: string | undefined;
    userId: number | undefined;
    imageId: string | undefined;
    isHavePicture: boolean | undefined;
    contentType: string | undefined;
    size: number | undefined;
    fileName: string | undefined;
    bytes: string | undefined;
}

export class CreateOrUpdateVehicleDriverArchiveInput implements ICreateOrUpdateVehicleDriverArchiveInput {
    vehicleDriverArchive: VehicleDriverArchiveEditDto | undefined;

    constructor(data?: ICreateOrUpdateVehicleDriverArchiveInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleDriverArchive = data["vehicleDriverArchive"] ? VehicleDriverArchiveEditDto.fromJS(data["vehicleDriverArchive"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateVehicleDriverArchiveInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateVehicleDriverArchiveInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleDriverArchive"] = this.vehicleDriverArchive ? this.vehicleDriverArchive.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateVehicleDriverArchiveInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateVehicleDriverArchiveInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateVehicleDriverArchiveInput {
    vehicleDriverArchive: VehicleDriverArchiveEditDto | undefined;
}

export class VehicleDriverArchiveIdInput implements IVehicleDriverArchiveIdInput {
    id: string | undefined;

    constructor(data?: IVehicleDriverArchiveIdInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveIdInput {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveIdInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverArchiveIdInput {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveIdInput();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveIdInput {
    id: string | undefined;
}

export class VehicleDriverArchiveStatusDto implements IVehicleDriverArchiveStatusDto {
    typeFlag: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    handleType: string | undefined;
    handleTypeText: string | undefined;
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    vehicleAffairsStatus: string | undefined;
    vehicleAffairsStatusText: string | undefined;
    vehicleAffairsType: string | undefined;
    vehicleAffairsTypeText: string | undefined;
    vehicleStateFlag: VehicleDriverArchiveStatusDtoVehicleStateFlag | undefined;
    endDate: moment.Moment | undefined;
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IVehicleDriverArchiveStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.typeFlag = data["typeFlag"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.handleType = data["handleType"];
            this.handleTypeText = data["handleTypeText"];
            this.handleStatus = data["handleStatus"];
            this.handleStatusText = data["handleStatusText"];
            this.vehicleAffairsStatus = data["vehicleAffairsStatus"];
            this.vehicleAffairsStatusText = data["vehicleAffairsStatusText"];
            this.vehicleAffairsType = data["vehicleAffairsType"];
            this.vehicleAffairsTypeText = data["vehicleAffairsTypeText"];
            this.vehicleStateFlag = data["vehicleStateFlag"];
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeFlag"] = this.typeFlag;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["handleType"] = this.handleType;
        data["handleTypeText"] = this.handleTypeText;
        data["handleStatus"] = this.handleStatus;
        data["handleStatusText"] = this.handleStatusText;
        data["vehicleAffairsStatus"] = this.vehicleAffairsStatus;
        data["vehicleAffairsStatusText"] = this.vehicleAffairsStatusText;
        data["vehicleAffairsType"] = this.vehicleAffairsType;
        data["vehicleAffairsTypeText"] = this.vehicleAffairsTypeText;
        data["vehicleStateFlag"] = this.vehicleStateFlag;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverArchiveStatusDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveStatusDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveStatusDto {
    typeFlag: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    handleType: string | undefined;
    handleTypeText: string | undefined;
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    vehicleAffairsStatus: string | undefined;
    vehicleAffairsStatusText: string | undefined;
    vehicleAffairsType: string | undefined;
    vehicleAffairsTypeText: string | undefined;
    vehicleStateFlag: VehicleDriverArchiveStatusDtoVehicleStateFlag | undefined;
    endDate: moment.Moment | undefined;
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfVehicleDriverBusinessStateListDto implements IPagedResultDtoOfVehicleDriverBusinessStateListDto {
    totalCount: number | undefined;
    items: VehicleDriverBusinessStateListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDriverBusinessStateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverBusinessStateListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDriverBusinessStateListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDriverBusinessStateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDriverBusinessStateListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDriverBusinessStateListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDriverBusinessStateListDto {
    totalCount: number | undefined;
    items: VehicleDriverBusinessStateListDto[] | undefined;
}

export class VehicleDriverBusinessStateListDto implements IVehicleDriverBusinessStateListDto {
    businessType: VehicleDriverBusinessStateListDtoBusinessType | undefined;
    vehicleCode: string | undefined;
    handleType: string | undefined;
    handleTypeText: string | undefined;
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    vehicleAffairsStatus: string | undefined;
    vehicleAffairsStatusText: string | undefined;
    vehicleAffairsType: string | undefined;
    vehicleAffairsTypeText: string | undefined;
    vehicleStateFlag: VehicleDriverBusinessStateListDtoVehicleStateFlag | undefined;
    endDate: moment.Moment | undefined;
    description: string | undefined;
    businessCreationTime: moment.Moment | undefined;
    businessCreationUserId: number | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverBusinessStateListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.businessType = data["businessType"];
            this.vehicleCode = data["vehicleCode"];
            this.handleType = data["handleType"];
            this.handleTypeText = data["handleTypeText"];
            this.handleStatus = data["handleStatus"];
            this.handleStatusText = data["handleStatusText"];
            this.vehicleAffairsStatus = data["vehicleAffairsStatus"];
            this.vehicleAffairsStatusText = data["vehicleAffairsStatusText"];
            this.vehicleAffairsType = data["vehicleAffairsType"];
            this.vehicleAffairsTypeText = data["vehicleAffairsTypeText"];
            this.vehicleStateFlag = data["vehicleStateFlag"];
            this.endDate = data["endDate"] ? moment(data["endDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.businessCreationTime = data["businessCreationTime"] ? moment(data["businessCreationTime"].toString()) : <any>undefined;
            this.businessCreationUserId = data["businessCreationUserId"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverBusinessStateListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverBusinessStateListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["businessType"] = this.businessType;
        data["vehicleCode"] = this.vehicleCode;
        data["handleType"] = this.handleType;
        data["handleTypeText"] = this.handleTypeText;
        data["handleStatus"] = this.handleStatus;
        data["handleStatusText"] = this.handleStatusText;
        data["vehicleAffairsStatus"] = this.vehicleAffairsStatus;
        data["vehicleAffairsStatusText"] = this.vehicleAffairsStatusText;
        data["vehicleAffairsType"] = this.vehicleAffairsType;
        data["vehicleAffairsTypeText"] = this.vehicleAffairsTypeText;
        data["vehicleStateFlag"] = this.vehicleStateFlag;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["businessCreationTime"] = this.businessCreationTime ? this.businessCreationTime.toISOString() : <any>undefined;
        data["businessCreationUserId"] = this.businessCreationUserId;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverBusinessStateListDto {
        const json = this.toJSON();
        let result = new VehicleDriverBusinessStateListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverBusinessStateListDto {
    businessType: VehicleDriverBusinessStateListDtoBusinessType | undefined;
    vehicleCode: string | undefined;
    handleType: string | undefined;
    handleTypeText: string | undefined;
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    vehicleAffairsStatus: string | undefined;
    vehicleAffairsStatusText: string | undefined;
    vehicleAffairsType: string | undefined;
    vehicleAffairsTypeText: string | undefined;
    vehicleStateFlag: VehicleDriverBusinessStateListDtoVehicleStateFlag | undefined;
    endDate: moment.Moment | undefined;
    description: string | undefined;
    businessCreationTime: moment.Moment | undefined;
    businessCreationUserId: number | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CreateVehicleDriverArchiveFromExcelInput implements ICreateVehicleDriverArchiveFromExcelInput {
    fileContent: string | undefined;

    constructor(data?: ICreateVehicleDriverArchiveFromExcelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.fileContent = data["fileContent"];
        }
    }

    static fromJS(data: any): CreateVehicleDriverArchiveFromExcelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVehicleDriverArchiveFromExcelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fileContent"] = this.fileContent;
        return data; 
    }

    clone(): CreateVehicleDriverArchiveFromExcelInput {
        const json = this.toJSON();
        let result = new CreateVehicleDriverArchiveFromExcelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateVehicleDriverArchiveFromExcelInput {
    fileContent: string | undefined;
}

export class VehicleDriverArchiveImportingReturnDto implements IVehicleDriverArchiveImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;

    constructor(data?: IVehicleDriverArchiveImportingReturnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveImportingReturnDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveImportingReturnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): VehicleDriverArchiveImportingReturnDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveImportingReturnDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;
}

export class PagedResultDtoOfVehicleDriverArchiveListForManagerDto implements IPagedResultDtoOfVehicleDriverArchiveListForManagerDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveListForManagerDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDriverArchiveListForManagerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverArchiveListForManagerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDriverArchiveListForManagerDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDriverArchiveListForManagerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDriverArchiveListForManagerDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDriverArchiveListForManagerDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDriverArchiveListForManagerDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveListForManagerDto[] | undefined;
}

export class VehicleDriverArchiveListForManagerDto implements IVehicleDriverArchiveListForManagerDto {
    /** 身份证号 */
    driverIDNumber: string | undefined;
    /** 姓名 */
    driverName: string | undefined;
    /** 联系方式 */
    driverPhone: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverArchiveListForManagerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.vehicleCode = data["vehicleCode"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveListForManagerDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveListForManagerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["vehicleCode"] = this.vehicleCode;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverArchiveListForManagerDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveListForManagerDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveListForManagerDto {
    /** 身份证号 */
    driverIDNumber: string | undefined;
    /** 姓名 */
    driverName: string | undefined;
    /** 联系方式 */
    driverPhone: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class VehicleDriverArchiveDetailDto implements IVehicleDriverArchiveDetailDto {
    /** 所属物流公司 */
    originalOUId: number | undefined;
    /** 所属物流公司名称 */
    ouDisplayName: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 人员类型（数据字典维护：车主 = "101";司机 = "102";车主兼司机 = "103";其他 = "999";） */
    personType: string | undefined;
    /** 人员类型名称 */
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护：正常 = "101";退出 = "102";停车 = "103";休假 = "104";待加入 = "105";临时停车 = "106";其他 = "999";） */
    personState: string | undefined;
    /** 人员状态名称 */
    personStateText: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 身份证到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾照到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;

    constructor(data?: IVehicleDriverArchiveDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.personType = data["personType"];
            this.personTypeText = data["personTypeText"];
            this.personState = data["personState"];
            this.personStateText = data["personStateText"];
            this.vehicleCode = data["vehicleCode"];
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.driverLicenseID = data["driverLicenseID"];
            this.dlCertificateEndDate = data["dlCertificateEndDate"] ? moment(data["dlCertificateEndDate"].toString()) : <any>undefined;
            this.buckupContactPerson = data["buckupContactPerson"];
            this.buckupContactPersonPhone = data["buckupContactPersonPhone"];
            this.buckupContactPersonAddress = data["buckupContactPersonAddress"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["personType"] = this.personType;
        data["personTypeText"] = this.personTypeText;
        data["personState"] = this.personState;
        data["personStateText"] = this.personStateText;
        data["vehicleCode"] = this.vehicleCode;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["driverLicenseID"] = this.driverLicenseID;
        data["dlCertificateEndDate"] = this.dlCertificateEndDate ? this.dlCertificateEndDate.toISOString() : <any>undefined;
        data["buckupContactPerson"] = this.buckupContactPerson;
        data["buckupContactPersonPhone"] = this.buckupContactPersonPhone;
        data["buckupContactPersonAddress"] = this.buckupContactPersonAddress;
        return data; 
    }

    clone(): VehicleDriverArchiveDetailDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveDetailDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveDetailDto {
    /** 所属物流公司 */
    originalOUId: number | undefined;
    /** 所属物流公司名称 */
    ouDisplayName: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 司机联系方式 */
    driverPhone: string | undefined;
    /** 人员类型（数据字典维护：车主 = "101";司机 = "102";车主兼司机 = "103";其他 = "999";） */
    personType: string | undefined;
    /** 人员类型名称 */
    personTypeText: string | undefined;
    /** 人员状态（数据字典维护：正常 = "101";退出 = "102";停车 = "103";休假 = "104";待加入 = "105";临时停车 = "106";其他 = "999";） */
    personState: string | undefined;
    /** 人员状态名称 */
    personStateText: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 身份证到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾照到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
}

export class VehicleDriverArchiveOutputToMobile implements IVehicleDriverArchiveOutputToMobile {
    /** 是否成功操作标识 */
    success: boolean | undefined;

    constructor(data?: IVehicleDriverArchiveOutputToMobile) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.success = data["success"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveOutputToMobile {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveOutputToMobile();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["success"] = this.success;
        return data; 
    }

    clone(): VehicleDriverArchiveOutputToMobile {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveOutputToMobile();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveOutputToMobile {
    /** 是否成功操作标识 */
    success: boolean | undefined;
}

export class VehicleDriverArchiveListByMobileDto implements IVehicleDriverArchiveListByMobileDto {
    /** 身份证号 */
    driverIDNumber: string | undefined;
    /** 姓名 */
    driverName: string | undefined;
    /** 联系方式 */
    driverPhone: string | undefined;
    /** 所属物流公司 */
    originalOUId: number | undefined;
    /** 所属物流公司名称 */
    ouDisplayName: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    /** 人员类型名称 */
    personTypeText: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 身份证到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    /** 人员状态名称 */
    personStateText: string | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾照到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverArchiveListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
            this.driverPhone = data["driverPhone"];
            this.originalOUId = data["originalOUId"];
            this.ouDisplayName = data["ouDisplayName"];
            this.personType = data["personType"];
            this.personTypeText = data["personTypeText"];
            this.vehicleCode = data["vehicleCode"];
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.personState = data["personState"];
            this.personStateText = data["personStateText"];
            this.buckupContactPerson = data["buckupContactPerson"];
            this.buckupContactPersonPhone = data["buckupContactPersonPhone"];
            this.buckupContactPersonAddress = data["buckupContactPersonAddress"];
            this.driverLicenseID = data["driverLicenseID"];
            this.dlCertificateEndDate = data["dlCertificateEndDate"] ? moment(data["dlCertificateEndDate"].toString()) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        data["driverPhone"] = this.driverPhone;
        data["originalOUId"] = this.originalOUId;
        data["ouDisplayName"] = this.ouDisplayName;
        data["personType"] = this.personType;
        data["personTypeText"] = this.personTypeText;
        data["vehicleCode"] = this.vehicleCode;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["personState"] = this.personState;
        data["personStateText"] = this.personStateText;
        data["buckupContactPerson"] = this.buckupContactPerson;
        data["buckupContactPersonPhone"] = this.buckupContactPersonPhone;
        data["buckupContactPersonAddress"] = this.buckupContactPersonAddress;
        data["driverLicenseID"] = this.driverLicenseID;
        data["dlCertificateEndDate"] = this.dlCertificateEndDate ? this.dlCertificateEndDate.toISOString() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverArchiveListByMobileDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveListByMobileDto {
    /** 身份证号 */
    driverIDNumber: string | undefined;
    /** 姓名 */
    driverName: string | undefined;
    /** 联系方式 */
    driverPhone: string | undefined;
    /** 所属物流公司 */
    originalOUId: number | undefined;
    /** 所属物流公司名称 */
    ouDisplayName: string | undefined;
    /** 人员类型（数据字典维护） */
    personType: string | undefined;
    /** 人员类型名称 */
    personTypeText: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 身份证到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 人员状态（数据字典维护） */
    personState: string | undefined;
    /** 人员状态名称 */
    personStateText: string | undefined;
    /** 备用联系人 */
    buckupContactPerson: string | undefined;
    /** 备用联系人方式 */
    buckupContactPersonPhone: string | undefined;
    /** 备用联系人地址 */
    buckupContactPersonAddress: string | undefined;
    /** 驾驶证号 */
    driverLicenseID: string | undefined;
    /** 驾照到期日期 */
    dlCertificateEndDate: moment.Moment | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfVehicleDriverArchiveBalanceListDto implements IPagedResultDtoOfVehicleDriverArchiveBalanceListDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveBalanceListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDriverArchiveBalanceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverArchiveBalanceListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDriverArchiveBalanceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDriverArchiveBalanceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDriverArchiveBalanceListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDriverArchiveBalanceListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDriverArchiveBalanceListDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveBalanceListDto[] | undefined;
}

export class VehicleDriverArchiveBalanceListDto implements IVehicleDriverArchiveBalanceListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    ouName: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 会计年度 */
    accountYear: number | undefined;
    /** 结转状态 */
    carryDownState: VehicleDriverArchiveBalanceListDtoCarryDownState | undefined;
    /** 账期状态 */
    accountPeriodState: VehicleDriverArchiveBalanceListDtoAccountPeriodState | undefined;
    /** 年度期初借款 */
    yearOpeningBalance: number | undefined;
    /** 年度期末借款 */
    yearClosingBalance: number | undefined;
    /** 累计借款 */
    accumulatedIncome: number | undefined;
    /** 累计抵扣 */
    accumulatedOutlay: number | undefined;
    /** 运费应扣减金额 */
    freightDeduction: number | undefined;
    /** 下一年累计借款 */
    nextYearAccumulatedIncome: number | undefined;
    /** 下一年累计抵扣 */
    nextYearAccumulatedOutlay: number | undefined;
    /** 下一年运费应扣减金额 */
    nextYearFreightDeduction: number | undefined;
    /** 租户 */
    tenantId: number | undefined;
    /** 备注 */
    description: string | undefined;
    /** 是否冻结 */
    isActive: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverArchiveBalanceListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalOUId = data["originalOUId"];
            this.ouName = data["ouName"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountYear = data["accountYear"];
            this.carryDownState = data["carryDownState"];
            this.accountPeriodState = data["accountPeriodState"];
            this.yearOpeningBalance = data["yearOpeningBalance"];
            this.yearClosingBalance = data["yearClosingBalance"];
            this.accumulatedIncome = data["accumulatedIncome"];
            this.accumulatedOutlay = data["accumulatedOutlay"];
            this.freightDeduction = data["freightDeduction"];
            this.nextYearAccumulatedIncome = data["nextYearAccumulatedIncome"];
            this.nextYearAccumulatedOutlay = data["nextYearAccumulatedOutlay"];
            this.nextYearFreightDeduction = data["nextYearFreightDeduction"];
            this.tenantId = data["tenantId"];
            this.description = data["description"];
            this.isActive = data["isActive"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveBalanceListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveBalanceListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalOUId"] = this.originalOUId;
        data["ouName"] = this.ouName;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountYear"] = this.accountYear;
        data["carryDownState"] = this.carryDownState;
        data["accountPeriodState"] = this.accountPeriodState;
        data["yearOpeningBalance"] = this.yearOpeningBalance;
        data["yearClosingBalance"] = this.yearClosingBalance;
        data["accumulatedIncome"] = this.accumulatedIncome;
        data["accumulatedOutlay"] = this.accumulatedOutlay;
        data["freightDeduction"] = this.freightDeduction;
        data["nextYearAccumulatedIncome"] = this.nextYearAccumulatedIncome;
        data["nextYearAccumulatedOutlay"] = this.nextYearAccumulatedOutlay;
        data["nextYearFreightDeduction"] = this.nextYearFreightDeduction;
        data["tenantId"] = this.tenantId;
        data["description"] = this.description;
        data["isActive"] = this.isActive;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverArchiveBalanceListDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveBalanceListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveBalanceListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    ouName: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 会计年度 */
    accountYear: number | undefined;
    /** 结转状态 */
    carryDownState: VehicleDriverArchiveBalanceListDtoCarryDownState | undefined;
    /** 账期状态 */
    accountPeriodState: VehicleDriverArchiveBalanceListDtoAccountPeriodState | undefined;
    /** 年度期初借款 */
    yearOpeningBalance: number | undefined;
    /** 年度期末借款 */
    yearClosingBalance: number | undefined;
    /** 累计借款 */
    accumulatedIncome: number | undefined;
    /** 累计抵扣 */
    accumulatedOutlay: number | undefined;
    /** 运费应扣减金额 */
    freightDeduction: number | undefined;
    /** 下一年累计借款 */
    nextYearAccumulatedIncome: number | undefined;
    /** 下一年累计抵扣 */
    nextYearAccumulatedOutlay: number | undefined;
    /** 下一年运费应扣减金额 */
    nextYearFreightDeduction: number | undefined;
    /** 租户 */
    tenantId: number | undefined;
    /** 备注 */
    description: string | undefined;
    /** 是否冻结 */
    isActive: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class VehicleDriverArchiveBalanceEditDto implements IVehicleDriverArchiveBalanceEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number;
    /** 司机身份证号 */
    driverIdNumber: string;
    /** 司机姓名 */
    driverName: string;
    /** 会计年度 */
    accountYear: number;
    /** 年度期初借款 */
    yearOpeningBalance: number | undefined;

    constructor(data?: IVehicleDriverArchiveBalanceEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.originalOUId = data["originalOUId"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountYear = data["accountYear"];
            this.yearOpeningBalance = data["yearOpeningBalance"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveBalanceEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveBalanceEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["originalOUId"] = this.originalOUId;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountYear"] = this.accountYear;
        data["yearOpeningBalance"] = this.yearOpeningBalance;
        return data; 
    }

    clone(): VehicleDriverArchiveBalanceEditDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveBalanceEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveBalanceEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number;
    /** 司机身份证号 */
    driverIdNumber: string;
    /** 司机姓名 */
    driverName: string;
    /** 会计年度 */
    accountYear: number;
    /** 年度期初借款 */
    yearOpeningBalance: number | undefined;
}

export class PagedResultDtoOfVehicleDriverArchiveDeductionListDto implements IPagedResultDtoOfVehicleDriverArchiveDeductionListDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveDeductionListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDriverArchiveDeductionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverArchiveDeductionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDriverArchiveDeductionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDriverArchiveDeductionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDriverArchiveDeductionListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDriverArchiveDeductionListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDriverArchiveDeductionListDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveDeductionListDto[] | undefined;
}

export class VehicleDriverArchiveDeductionListDto implements IVehicleDriverArchiveDeductionListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    ouName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 类型 */
    deductionType: VehicleDriverArchiveDeductionListDtoDeductionType | undefined;
    /** 抵扣用途 */
    purpose: string | undefined;
    purposeText: string | undefined;
    /** 审核状态 */
    approveState: VehicleDriverArchiveDeductionListDtoApproveState | undefined;
    /** 银行收款凭证号 */
    bankSlipCode: string | undefined;
    /** 财务会计凭证号 */
    accountCode: string | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 租户 */
    tenantId: number | undefined;
    /** 是否运费扣减 */
    isActive: boolean | undefined;
    /** 审批意见 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverArchiveDeductionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalOUId = data["originalOUId"];
            this.ouName = data["ouName"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.deductionType = data["deductionType"];
            this.purpose = data["purpose"];
            this.purposeText = data["purposeText"];
            this.approveState = data["approveState"];
            this.bankSlipCode = data["bankSlipCode"];
            this.accountCode = data["accountCode"];
            this.amount = data["amount"];
            this.tenantId = data["tenantId"];
            this.isActive = data["isActive"];
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveDeductionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveDeductionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalOUId"] = this.originalOUId;
        data["ouName"] = this.ouName;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["deductionType"] = this.deductionType;
        data["purpose"] = this.purpose;
        data["purposeText"] = this.purposeText;
        data["approveState"] = this.approveState;
        data["bankSlipCode"] = this.bankSlipCode;
        data["accountCode"] = this.accountCode;
        data["amount"] = this.amount;
        data["tenantId"] = this.tenantId;
        data["isActive"] = this.isActive;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverArchiveDeductionListDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveDeductionListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveDeductionListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    ouName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 类型 */
    deductionType: VehicleDriverArchiveDeductionListDtoDeductionType | undefined;
    /** 抵扣用途 */
    purpose: string | undefined;
    purposeText: string | undefined;
    /** 审核状态 */
    approveState: VehicleDriverArchiveDeductionListDtoApproveState | undefined;
    /** 银行收款凭证号 */
    bankSlipCode: string | undefined;
    /** 财务会计凭证号 */
    accountCode: string | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 租户 */
    tenantId: number | undefined;
    /** 是否运费扣减 */
    isActive: boolean | undefined;
    /** 审批意见 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class VehicleDriverArchiveDeductionEditDto implements IVehicleDriverArchiveDeductionEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 司机身份证号 */
    driverIdNumber: string;
    /** 司机姓名 */
    driverName: string;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 类型 */
    deductionType: VehicleDriverArchiveDeductionEditDtoDeductionType | undefined;
    /** 抵扣用途 */
    purpose: string | undefined;
    /** 审核状态 */
    approveState: VehicleDriverArchiveDeductionEditDtoApproveState | undefined;
    /** 银行收款凭证号 */
    bankSlipCode: string | undefined;
    /** 财务会计凭证号 */
    accountCode: string | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 是否运费扣减 */
    isActive: boolean | undefined;
    /** 审批意见 */
    description: string | undefined;

    constructor(data?: IVehicleDriverArchiveDeductionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.originalOUId = data["originalOUId"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.deductionType = data["deductionType"];
            this.purpose = data["purpose"];
            this.approveState = data["approveState"];
            this.bankSlipCode = data["bankSlipCode"];
            this.accountCode = data["accountCode"];
            this.amount = data["amount"];
            this.isActive = data["isActive"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveDeductionEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveDeductionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["originalOUId"] = this.originalOUId;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["deductionType"] = this.deductionType;
        data["purpose"] = this.purpose;
        data["approveState"] = this.approveState;
        data["bankSlipCode"] = this.bankSlipCode;
        data["accountCode"] = this.accountCode;
        data["amount"] = this.amount;
        data["isActive"] = this.isActive;
        data["description"] = this.description;
        return data; 
    }

    clone(): VehicleDriverArchiveDeductionEditDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveDeductionEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveDeductionEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 司机身份证号 */
    driverIdNumber: string;
    /** 司机姓名 */
    driverName: string;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 类型 */
    deductionType: VehicleDriverArchiveDeductionEditDtoDeductionType | undefined;
    /** 抵扣用途 */
    purpose: string | undefined;
    /** 审核状态 */
    approveState: VehicleDriverArchiveDeductionEditDtoApproveState | undefined;
    /** 银行收款凭证号 */
    bankSlipCode: string | undefined;
    /** 财务会计凭证号 */
    accountCode: string | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 是否运费扣减 */
    isActive: boolean | undefined;
    /** 审批意见 */
    description: string | undefined;
}

export class VehicleDriverArchiveDeductionApproveDto implements IVehicleDriverArchiveDeductionApproveDto {
    id: string;
    /** 审核状态 */
    approveState: VehicleDriverArchiveDeductionApproveDtoApproveState;
    /** 审批意见 */
    description: string | undefined;

    constructor(data?: IVehicleDriverArchiveDeductionApproveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.approveState = data["approveState"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveDeductionApproveDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveDeductionApproveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["approveState"] = this.approveState;
        data["description"] = this.description;
        return data; 
    }

    clone(): VehicleDriverArchiveDeductionApproveDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveDeductionApproveDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveDeductionApproveDto {
    id: string;
    /** 审核状态 */
    approveState: VehicleDriverArchiveDeductionApproveDtoApproveState;
    /** 审批意见 */
    description: string | undefined;
}

export class PagedResultDtoOfVehicleDriverArchiveLoanListDto implements IPagedResultDtoOfVehicleDriverArchiveLoanListDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveLoanListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDriverArchiveLoanListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverArchiveLoanListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDriverArchiveLoanListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDriverArchiveLoanListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDriverArchiveLoanListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDriverArchiveLoanListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDriverArchiveLoanListDto {
    totalCount: number | undefined;
    items: VehicleDriverArchiveLoanListDto[] | undefined;
}

export class VehicleDriverArchiveLoanListDto implements IVehicleDriverArchiveLoanListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    ouName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 类型 */
    loanType: VehicleDriverArchiveLoanListDtoLoanType | undefined;
    /** 借款用途 */
    purpose: string | undefined;
    /** 审核状态 */
    approveState: VehicleDriverArchiveLoanListDtoApproveState | undefined;
    /** 银行收款凭证号 */
    bankSlipCode: string | undefined;
    /** 财务会计凭证号 */
    accountCode: string | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 租户 */
    tenantId: number | undefined;
    /** 是否运费扣减 */
    isActive: boolean | undefined;
    /** 审批意见 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverArchiveLoanListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalOUId = data["originalOUId"];
            this.ouName = data["ouName"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.loanType = data["loanType"];
            this.purpose = data["purpose"];
            this.approveState = data["approveState"];
            this.bankSlipCode = data["bankSlipCode"];
            this.accountCode = data["accountCode"];
            this.amount = data["amount"];
            this.tenantId = data["tenantId"];
            this.isActive = data["isActive"];
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveLoanListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveLoanListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalOUId"] = this.originalOUId;
        data["ouName"] = this.ouName;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["loanType"] = this.loanType;
        data["purpose"] = this.purpose;
        data["approveState"] = this.approveState;
        data["bankSlipCode"] = this.bankSlipCode;
        data["accountCode"] = this.accountCode;
        data["amount"] = this.amount;
        data["tenantId"] = this.tenantId;
        data["isActive"] = this.isActive;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverArchiveLoanListDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveLoanListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveLoanListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    ouName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 类型 */
    loanType: VehicleDriverArchiveLoanListDtoLoanType | undefined;
    /** 借款用途 */
    purpose: string | undefined;
    /** 审核状态 */
    approveState: VehicleDriverArchiveLoanListDtoApproveState | undefined;
    /** 银行收款凭证号 */
    bankSlipCode: string | undefined;
    /** 财务会计凭证号 */
    accountCode: string | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 租户 */
    tenantId: number | undefined;
    /** 是否运费扣减 */
    isActive: boolean | undefined;
    /** 审批意见 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class VehicleDriverArchiveLoanEditDto implements IVehicleDriverArchiveLoanEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 司机身份证号 */
    driverIdNumber: string;
    /** 司机姓名 */
    driverName: string;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 类型 */
    loanType: VehicleDriverArchiveLoanEditDtoLoanType | undefined;
    /** 借款用途 */
    purpose: string | undefined;
    /** 审核状态 */
    approveState: VehicleDriverArchiveLoanEditDtoApproveState | undefined;
    /** 银行收款凭证号 */
    bankSlipCode: string | undefined;
    /** 财务会计凭证号 */
    accountCode: string | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 是否运费扣减 */
    isActive: boolean | undefined;
    /** 审批意见 */
    description: string | undefined;

    constructor(data?: IVehicleDriverArchiveLoanEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.originalOUId = data["originalOUId"];
            this.vehicleCode = data["vehicleCode"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.loanType = data["loanType"];
            this.purpose = data["purpose"];
            this.approveState = data["approveState"];
            this.bankSlipCode = data["bankSlipCode"];
            this.accountCode = data["accountCode"];
            this.amount = data["amount"];
            this.isActive = data["isActive"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveLoanEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveLoanEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["originalOUId"] = this.originalOUId;
        data["vehicleCode"] = this.vehicleCode;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["loanType"] = this.loanType;
        data["purpose"] = this.purpose;
        data["approveState"] = this.approveState;
        data["bankSlipCode"] = this.bankSlipCode;
        data["accountCode"] = this.accountCode;
        data["amount"] = this.amount;
        data["isActive"] = this.isActive;
        data["description"] = this.description;
        return data; 
    }

    clone(): VehicleDriverArchiveLoanEditDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveLoanEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveLoanEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number;
    /** 车辆编号 */
    vehicleCode: string;
    /** 司机身份证号 */
    driverIdNumber: string;
    /** 司机姓名 */
    driverName: string;
    /** 会计日期 */
    accountDate: moment.Moment | undefined;
    /** 类型 */
    loanType: VehicleDriverArchiveLoanEditDtoLoanType | undefined;
    /** 借款用途 */
    purpose: string | undefined;
    /** 审核状态 */
    approveState: VehicleDriverArchiveLoanEditDtoApproveState | undefined;
    /** 银行收款凭证号 */
    bankSlipCode: string | undefined;
    /** 财务会计凭证号 */
    accountCode: string | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 是否运费扣减 */
    isActive: boolean | undefined;
    /** 审批意见 */
    description: string | undefined;
}

export class VehicleDriverArchiveLoanApproveDto implements IVehicleDriverArchiveLoanApproveDto {
    id: string;
    /** 审核状态 */
    approveState: VehicleDriverArchiveLoanApproveDtoApproveState;
    /** 审批意见 */
    description: string | undefined;

    constructor(data?: IVehicleDriverArchiveLoanApproveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.approveState = data["approveState"];
            this.description = data["description"];
        }
    }

    static fromJS(data: any): VehicleDriverArchiveLoanApproveDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverArchiveLoanApproveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["approveState"] = this.approveState;
        data["description"] = this.description;
        return data; 
    }

    clone(): VehicleDriverArchiveLoanApproveDto {
        const json = this.toJSON();
        let result = new VehicleDriverArchiveLoanApproveDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverArchiveLoanApproveDto {
    id: string;
    /** 审核状态 */
    approveState: VehicleDriverArchiveLoanApproveDtoApproveState;
    /** 审批意见 */
    description: string | undefined;
}

export class ListResultDtoOfVehicleRefuelingListForStatisticDto implements IListResultDtoOfVehicleRefuelingListForStatisticDto {
    items: VehicleRefuelingListForStatisticDto[] | undefined;

    constructor(data?: IListResultDtoOfVehicleRefuelingListForStatisticDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleRefuelingListForStatisticDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfVehicleRefuelingListForStatisticDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfVehicleRefuelingListForStatisticDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfVehicleRefuelingListForStatisticDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfVehicleRefuelingListForStatisticDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfVehicleRefuelingListForStatisticDto {
    items: VehicleRefuelingListForStatisticDto[] | undefined;
}

export class VehicleRefuelingListForStatisticDto implements IVehicleRefuelingListForStatisticDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    originalOUIdName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    plateNumber: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 会计日期 */
    loanTime: moment.Moment | undefined;
    /** 借款次数 */
    loanCount: number | undefined;
    /** 借款金额 */
    loanAmount: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleRefuelingListForStatisticDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalOUId = data["originalOUId"];
            this.originalOUIdName = data["originalOUIdName"];
            this.vehicleCode = data["vehicleCode"];
            this.plateNumber = data["plateNumber"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.loanTime = data["loanTime"] ? moment(data["loanTime"].toString()) : <any>undefined;
            this.loanCount = data["loanCount"];
            this.loanAmount = data["loanAmount"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleRefuelingListForStatisticDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleRefuelingListForStatisticDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalOUId"] = this.originalOUId;
        data["originalOUIdName"] = this.originalOUIdName;
        data["vehicleCode"] = this.vehicleCode;
        data["plateNumber"] = this.plateNumber;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["loanTime"] = this.loanTime ? this.loanTime.toISOString() : <any>undefined;
        data["loanCount"] = this.loanCount;
        data["loanAmount"] = this.loanAmount;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleRefuelingListForStatisticDto {
        const json = this.toJSON();
        let result = new VehicleRefuelingListForStatisticDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleRefuelingListForStatisticDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    originalOUIdName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 车牌号 */
    plateNumber: string | undefined;
    /** 司机身份证号 */
    driverIdNumber: string | undefined;
    /** 司机姓名 */
    driverName: string | undefined;
    /** 会计日期 */
    loanTime: moment.Moment | undefined;
    /** 借款次数 */
    loanCount: number | undefined;
    /** 借款金额 */
    loanAmount: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfVehicleDriverChangeListDto implements IPagedResultDtoOfVehicleDriverChangeListDto {
    totalCount: number | undefined;
    items: VehicleDriverChangeListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDriverChangeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverChangeListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDriverChangeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDriverChangeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDriverChangeListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDriverChangeListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDriverChangeListDto {
    totalCount: number | undefined;
    items: VehicleDriverChangeListDto[] | undefined;
}

export class VehicleDriverChangeListDto implements IVehicleDriverChangeListDto {
    driverIdNumber: string | undefined;
    oldVehicleCode: string | undefined;
    newVehicleCode: string | undefined;
    driverName: string | undefined;
    changeVehicleDate: moment.Moment | undefined;
    driverOperator: string | undefined;
    driverHistoryBill: string | undefined;
    driverClearArrearsExpain: string | undefined;
    remark: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverChangeListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.driverIdNumber = data["driverIdNumber"];
            this.oldVehicleCode = data["oldVehicleCode"];
            this.newVehicleCode = data["newVehicleCode"];
            this.driverName = data["driverName"];
            this.changeVehicleDate = data["changeVehicleDate"] ? moment(data["changeVehicleDate"].toString()) : <any>undefined;
            this.driverOperator = data["driverOperator"];
            this.driverHistoryBill = data["driverHistoryBill"];
            this.driverClearArrearsExpain = data["driverClearArrearsExpain"];
            this.remark = data["remark"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverChangeListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverChangeListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["driverIdNumber"] = this.driverIdNumber;
        data["oldVehicleCode"] = this.oldVehicleCode;
        data["newVehicleCode"] = this.newVehicleCode;
        data["driverName"] = this.driverName;
        data["changeVehicleDate"] = this.changeVehicleDate ? this.changeVehicleDate.toISOString() : <any>undefined;
        data["driverOperator"] = this.driverOperator;
        data["driverHistoryBill"] = this.driverHistoryBill;
        data["driverClearArrearsExpain"] = this.driverClearArrearsExpain;
        data["remark"] = this.remark;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverChangeListDto {
        const json = this.toJSON();
        let result = new VehicleDriverChangeListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverChangeListDto {
    driverIdNumber: string | undefined;
    oldVehicleCode: string | undefined;
    newVehicleCode: string | undefined;
    driverName: string | undefined;
    changeVehicleDate: moment.Moment | undefined;
    driverOperator: string | undefined;
    driverHistoryBill: string | undefined;
    driverClearArrearsExpain: string | undefined;
    remark: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetVehicleDriverChangeForEditOutput implements IGetVehicleDriverChangeForEditOutput {
    vehicleDriverChange: VehicleDriverChangeEditDto | undefined;

    constructor(data?: IGetVehicleDriverChangeForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleDriverChange = data["vehicleDriverChange"] ? VehicleDriverChangeEditDto.fromJS(data["vehicleDriverChange"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVehicleDriverChangeForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetVehicleDriverChangeForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleDriverChange"] = this.vehicleDriverChange ? this.vehicleDriverChange.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetVehicleDriverChangeForEditOutput {
        const json = this.toJSON();
        let result = new GetVehicleDriverChangeForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetVehicleDriverChangeForEditOutput {
    vehicleDriverChange: VehicleDriverChangeEditDto | undefined;
}

export class VehicleDriverChangeEditDto implements IVehicleDriverChangeEditDto {
    id: string | undefined;
    driverIdNumber: string | undefined;
    driverName: string | undefined;
    oldVehicleCode: string | undefined;
    newVehicleCode: string | undefined;
    changeVehicleDate: moment.Moment | undefined;
    driverOperator: string | undefined;
    driverHistoryBill: string | undefined;
    driverClearArrearsExpain: string | undefined;
    remark: string | undefined;

    constructor(data?: IVehicleDriverChangeEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.driverIdNumber = data["driverIdNumber"];
            this.driverName = data["driverName"];
            this.oldVehicleCode = data["oldVehicleCode"];
            this.newVehicleCode = data["newVehicleCode"];
            this.changeVehicleDate = data["changeVehicleDate"] ? moment(data["changeVehicleDate"].toString()) : <any>undefined;
            this.driverOperator = data["driverOperator"];
            this.driverHistoryBill = data["driverHistoryBill"];
            this.driverClearArrearsExpain = data["driverClearArrearsExpain"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): VehicleDriverChangeEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverChangeEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["driverIdNumber"] = this.driverIdNumber;
        data["driverName"] = this.driverName;
        data["oldVehicleCode"] = this.oldVehicleCode;
        data["newVehicleCode"] = this.newVehicleCode;
        data["changeVehicleDate"] = this.changeVehicleDate ? this.changeVehicleDate.toISOString() : <any>undefined;
        data["driverOperator"] = this.driverOperator;
        data["driverHistoryBill"] = this.driverHistoryBill;
        data["driverClearArrearsExpain"] = this.driverClearArrearsExpain;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): VehicleDriverChangeEditDto {
        const json = this.toJSON();
        let result = new VehicleDriverChangeEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverChangeEditDto {
    id: string | undefined;
    driverIdNumber: string | undefined;
    driverName: string | undefined;
    oldVehicleCode: string | undefined;
    newVehicleCode: string | undefined;
    changeVehicleDate: moment.Moment | undefined;
    driverOperator: string | undefined;
    driverHistoryBill: string | undefined;
    driverClearArrearsExpain: string | undefined;
    remark: string | undefined;
}

export class CreateOrEditVehicleDriverChangeInput implements ICreateOrEditVehicleDriverChangeInput {
    vehicleDriverChange: VehicleDriverChangeEditDto | undefined;

    constructor(data?: ICreateOrEditVehicleDriverChangeInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleDriverChange = data["vehicleDriverChange"] ? VehicleDriverChangeEditDto.fromJS(data["vehicleDriverChange"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditVehicleDriverChangeInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditVehicleDriverChangeInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleDriverChange"] = this.vehicleDriverChange ? this.vehicleDriverChange.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditVehicleDriverChangeInput {
        const json = this.toJSON();
        let result = new CreateOrEditVehicleDriverChangeInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditVehicleDriverChangeInput {
    vehicleDriverChange: VehicleDriverChangeEditDto | undefined;
}

export class ChangeDriverCarInput implements IChangeDriverCarInput {
    /** 司机档案id */
    driverId: string;
    /** 新换车辆编号 */
    newVehicleCode: string;
    /** 换车时间 */
    changeVehicleDate: moment.Moment;

    constructor(data?: IChangeDriverCarInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.driverId = data["driverId"];
            this.newVehicleCode = data["newVehicleCode"];
            this.changeVehicleDate = data["changeVehicleDate"] ? moment(data["changeVehicleDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ChangeDriverCarInput {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeDriverCarInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["driverId"] = this.driverId;
        data["newVehicleCode"] = this.newVehicleCode;
        data["changeVehicleDate"] = this.changeVehicleDate ? this.changeVehicleDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): ChangeDriverCarInput {
        const json = this.toJSON();
        let result = new ChangeDriverCarInput();
        result.init(json);
        return result;
    }
}

export interface IChangeDriverCarInput {
    /** 司机档案id */
    driverId: string;
    /** 新换车辆编号 */
    newVehicleCode: string;
    /** 换车时间 */
    changeVehicleDate: moment.Moment;
}

export class CreateOrUpdateVehicleDriverDimissionInput implements ICreateOrUpdateVehicleDriverDimissionInput {
    vehicleDriverDimissionCreateOrUpdate: VehicleDriverDimissionListForUpdateDto | undefined;

    constructor(data?: ICreateOrUpdateVehicleDriverDimissionInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleDriverDimissionCreateOrUpdate = data["vehicleDriverDimissionCreateOrUpdate"] ? VehicleDriverDimissionListForUpdateDto.fromJS(data["vehicleDriverDimissionCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateVehicleDriverDimissionInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateVehicleDriverDimissionInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleDriverDimissionCreateOrUpdate"] = this.vehicleDriverDimissionCreateOrUpdate ? this.vehicleDriverDimissionCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateVehicleDriverDimissionInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateVehicleDriverDimissionInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateVehicleDriverDimissionInput {
    vehicleDriverDimissionCreateOrUpdate: VehicleDriverDimissionListForUpdateDto | undefined;
}

export class VehicleDriverDimissionListForUpdateDto implements IVehicleDriverDimissionListForUpdateDto {
    id: string | undefined;
    /** 离职司机身份证号 */
    dimissionDriverIdNumber: string | undefined;
    /** 离职司机姓名 */
    dimissionDriverName: string | undefined;
    /** 司机离职时间 */
    driverDimissionDate: moment.Moment | undefined;
    /** 离职司机经办人 */
    dimissionDriverOperator: string | undefined;
    /** 离职司机历史账单 */
    dimissionDriverHistoryBill: string | undefined;
    /** 离职司机清欠说明 */
    dimissionDriverClearArrearsExpain: string | undefined;
    /** 备注 */
    remark: string | undefined;

    constructor(data?: IVehicleDriverDimissionListForUpdateDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dimissionDriverIdNumber = data["dimissionDriverIdNumber"];
            this.dimissionDriverName = data["dimissionDriverName"];
            this.driverDimissionDate = data["driverDimissionDate"] ? moment(data["driverDimissionDate"].toString()) : <any>undefined;
            this.dimissionDriverOperator = data["dimissionDriverOperator"];
            this.dimissionDriverHistoryBill = data["dimissionDriverHistoryBill"];
            this.dimissionDriverClearArrearsExpain = data["dimissionDriverClearArrearsExpain"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): VehicleDriverDimissionListForUpdateDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverDimissionListForUpdateDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dimissionDriverIdNumber"] = this.dimissionDriverIdNumber;
        data["dimissionDriverName"] = this.dimissionDriverName;
        data["driverDimissionDate"] = this.driverDimissionDate ? this.driverDimissionDate.toISOString() : <any>undefined;
        data["dimissionDriverOperator"] = this.dimissionDriverOperator;
        data["dimissionDriverHistoryBill"] = this.dimissionDriverHistoryBill;
        data["dimissionDriverClearArrearsExpain"] = this.dimissionDriverClearArrearsExpain;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): VehicleDriverDimissionListForUpdateDto {
        const json = this.toJSON();
        let result = new VehicleDriverDimissionListForUpdateDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverDimissionListForUpdateDto {
    id: string | undefined;
    /** 离职司机身份证号 */
    dimissionDriverIdNumber: string | undefined;
    /** 离职司机姓名 */
    dimissionDriverName: string | undefined;
    /** 司机离职时间 */
    driverDimissionDate: moment.Moment | undefined;
    /** 离职司机经办人 */
    dimissionDriverOperator: string | undefined;
    /** 离职司机历史账单 */
    dimissionDriverHistoryBill: string | undefined;
    /** 离职司机清欠说明 */
    dimissionDriverClearArrearsExpain: string | undefined;
    /** 备注 */
    remark: string | undefined;
}

export class GetVehicleDriverDimissionForEditOutput implements IGetVehicleDriverDimissionForEditOutput {
    vehicleDriverDimissionEdit: VehicleDriverDimissionEditDto | undefined;

    constructor(data?: IGetVehicleDriverDimissionForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleDriverDimissionEdit = data["vehicleDriverDimissionEdit"] ? VehicleDriverDimissionEditDto.fromJS(data["vehicleDriverDimissionEdit"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVehicleDriverDimissionForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetVehicleDriverDimissionForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleDriverDimissionEdit"] = this.vehicleDriverDimissionEdit ? this.vehicleDriverDimissionEdit.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetVehicleDriverDimissionForEditOutput {
        const json = this.toJSON();
        let result = new GetVehicleDriverDimissionForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetVehicleDriverDimissionForEditOutput {
    vehicleDriverDimissionEdit: VehicleDriverDimissionEditDto | undefined;
}

export class VehicleDriverDimissionEditDto implements IVehicleDriverDimissionEditDto {
    id: string | undefined;
    /** 离职司机身份证号 */
    dimissionDriverIdNumber: string | undefined;
    /** 离职司机姓名 */
    dimissionDriverName: string | undefined;
    /** 司机离职时间 */
    driverDimissionDate: moment.Moment | undefined;
    /** 离职司机经办人 */
    dimissionDriverOperator: string | undefined;
    /** 离职司机历史账单 */
    dimissionDriverHistoryBill: string | undefined;
    /** 离职司机清欠说明 */
    dimissionDriverClearArrearsExpain: string | undefined;
    /** 备注 */
    remark: string | undefined;
    isActive: boolean | undefined;

    constructor(data?: IVehicleDriverDimissionEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.dimissionDriverIdNumber = data["dimissionDriverIdNumber"];
            this.dimissionDriverName = data["dimissionDriverName"];
            this.driverDimissionDate = data["driverDimissionDate"] ? moment(data["driverDimissionDate"].toString()) : <any>undefined;
            this.dimissionDriverOperator = data["dimissionDriverOperator"];
            this.dimissionDriverHistoryBill = data["dimissionDriverHistoryBill"];
            this.dimissionDriverClearArrearsExpain = data["dimissionDriverClearArrearsExpain"];
            this.remark = data["remark"];
            this.isActive = data["isActive"];
        }
    }

    static fromJS(data: any): VehicleDriverDimissionEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverDimissionEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dimissionDriverIdNumber"] = this.dimissionDriverIdNumber;
        data["dimissionDriverName"] = this.dimissionDriverName;
        data["driverDimissionDate"] = this.driverDimissionDate ? this.driverDimissionDate.toISOString() : <any>undefined;
        data["dimissionDriverOperator"] = this.dimissionDriverOperator;
        data["dimissionDriverHistoryBill"] = this.dimissionDriverHistoryBill;
        data["dimissionDriverClearArrearsExpain"] = this.dimissionDriverClearArrearsExpain;
        data["remark"] = this.remark;
        data["isActive"] = this.isActive;
        return data; 
    }

    clone(): VehicleDriverDimissionEditDto {
        const json = this.toJSON();
        let result = new VehicleDriverDimissionEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverDimissionEditDto {
    id: string | undefined;
    /** 离职司机身份证号 */
    dimissionDriverIdNumber: string | undefined;
    /** 离职司机姓名 */
    dimissionDriverName: string | undefined;
    /** 司机离职时间 */
    driverDimissionDate: moment.Moment | undefined;
    /** 离职司机经办人 */
    dimissionDriverOperator: string | undefined;
    /** 离职司机历史账单 */
    dimissionDriverHistoryBill: string | undefined;
    /** 离职司机清欠说明 */
    dimissionDriverClearArrearsExpain: string | undefined;
    /** 备注 */
    remark: string | undefined;
    isActive: boolean | undefined;
}

export class PagedResultDtoOfVehicleDriverDimissionListDto implements IPagedResultDtoOfVehicleDriverDimissionListDto {
    totalCount: number | undefined;
    items: VehicleDriverDimissionListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleDriverDimissionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleDriverDimissionListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleDriverDimissionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleDriverDimissionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleDriverDimissionListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleDriverDimissionListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleDriverDimissionListDto {
    totalCount: number | undefined;
    items: VehicleDriverDimissionListDto[] | undefined;
}

export class VehicleDriverDimissionListDto implements IVehicleDriverDimissionListDto {
    /** 离职司机身份证号 */
    dimissionDriverIdNumber: string | undefined;
    /** 离职司机姓名 */
    dimissionDriverName: string | undefined;
    /** 司机离职时间 */
    driverDimissionDate: moment.Moment | undefined;
    /** 离职司机经办人 */
    dimissionDriverOperator: string | undefined;
    /** 离职经办人显示文本 */
    dimissionDriverOperatorText: string | undefined;
    /** 离职司机历史账单 */
    dimissionDriverHistoryBill: string | undefined;
    /** 离职司机清欠说明 */
    dimissionDriverClearArrearsExpain: string | undefined;
    /** 备注 */
    remark: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isActive: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleDriverDimissionListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dimissionDriverIdNumber = data["dimissionDriverIdNumber"];
            this.dimissionDriverName = data["dimissionDriverName"];
            this.driverDimissionDate = data["driverDimissionDate"] ? moment(data["driverDimissionDate"].toString()) : <any>undefined;
            this.dimissionDriverOperator = data["dimissionDriverOperator"];
            this.dimissionDriverOperatorText = data["dimissionDriverOperatorText"];
            this.dimissionDriverHistoryBill = data["dimissionDriverHistoryBill"];
            this.dimissionDriverClearArrearsExpain = data["dimissionDriverClearArrearsExpain"];
            this.remark = data["remark"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isActive = data["isActive"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleDriverDimissionListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleDriverDimissionListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dimissionDriverIdNumber"] = this.dimissionDriverIdNumber;
        data["dimissionDriverName"] = this.dimissionDriverName;
        data["driverDimissionDate"] = this.driverDimissionDate ? this.driverDimissionDate.toISOString() : <any>undefined;
        data["dimissionDriverOperator"] = this.dimissionDriverOperator;
        data["dimissionDriverOperatorText"] = this.dimissionDriverOperatorText;
        data["dimissionDriverHistoryBill"] = this.dimissionDriverHistoryBill;
        data["dimissionDriverClearArrearsExpain"] = this.dimissionDriverClearArrearsExpain;
        data["remark"] = this.remark;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isActive"] = this.isActive;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleDriverDimissionListDto {
        const json = this.toJSON();
        let result = new VehicleDriverDimissionListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleDriverDimissionListDto {
    /** 离职司机身份证号 */
    dimissionDriverIdNumber: string | undefined;
    /** 离职司机姓名 */
    dimissionDriverName: string | undefined;
    /** 司机离职时间 */
    driverDimissionDate: moment.Moment | undefined;
    /** 离职司机经办人 */
    dimissionDriverOperator: string | undefined;
    /** 离职经办人显示文本 */
    dimissionDriverOperatorText: string | undefined;
    /** 离职司机历史账单 */
    dimissionDriverHistoryBill: string | undefined;
    /** 离职司机清欠说明 */
    dimissionDriverClearArrearsExpain: string | undefined;
    /** 备注 */
    remark: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isActive: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class PagedResultDtoOfVehicleInsuranceRecordListDto implements IPagedResultDtoOfVehicleInsuranceRecordListDto {
    totalCount: number | undefined;
    items: VehicleInsuranceRecordListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleInsuranceRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleInsuranceRecordListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleInsuranceRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleInsuranceRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleInsuranceRecordListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleInsuranceRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleInsuranceRecordListDto {
    totalCount: number | undefined;
    items: VehicleInsuranceRecordListDto[] | undefined;
}

export class VehicleInsuranceRecordListDto implements IVehicleInsuranceRecordListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    originalOUName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 被保险人证件号 */
    insurantIDNumber: string | undefined;
    /** 被保险人姓名 */
    insurantName: string | undefined;
    /** 第一受益人 */
    firstBeneficiary: string | undefined;
    firstBeneficiaryText: string | undefined;
    /** 保险类型 */
    vehicleInsuranceType: string | undefined;
    vehicleInsuranceTypeText: string | undefined;
    /** 保险状态 */
    vehicleInsuranceStatus: string | undefined;
    vehicleInsuranceStatusText: string | undefined;
    /** 生效日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 保险单号 */
    policyNumber: string | undefined;
    /** 办理类型 */
    handleType: string | undefined;
    handleTypeText: string | undefined;
    /** 办理状态 */
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    /** 办理人 */
    handlePerson: string | undefined;
    handlePersonName: string | undefined;
    /** 办理日期/记账日期 */
    accountDate: moment.Moment | undefined;
    /** 办理费用 */
    handleFee: number | undefined;
    /** 保险公司 */
    insuranceCompany: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleInsuranceRecordListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.originalOUId = data["originalOUId"];
            this.originalOUName = data["originalOUName"];
            this.vehicleCode = data["vehicleCode"];
            this.insurantIDNumber = data["insurantIDNumber"];
            this.insurantName = data["insurantName"];
            this.firstBeneficiary = data["firstBeneficiary"];
            this.firstBeneficiaryText = data["firstBeneficiaryText"];
            this.vehicleInsuranceType = data["vehicleInsuranceType"];
            this.vehicleInsuranceTypeText = data["vehicleInsuranceTypeText"];
            this.vehicleInsuranceStatus = data["vehicleInsuranceStatus"];
            this.vehicleInsuranceStatusText = data["vehicleInsuranceStatusText"];
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.policyNumber = data["policyNumber"];
            this.handleType = data["handleType"];
            this.handleTypeText = data["handleTypeText"];
            this.handleStatus = data["handleStatus"];
            this.handleStatusText = data["handleStatusText"];
            this.handlePerson = data["handlePerson"];
            this.handlePersonName = data["handlePersonName"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.handleFee = data["handleFee"];
            this.insuranceCompany = data["insuranceCompany"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleInsuranceRecordListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleInsuranceRecordListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["originalOUId"] = this.originalOUId;
        data["originalOUName"] = this.originalOUName;
        data["vehicleCode"] = this.vehicleCode;
        data["insurantIDNumber"] = this.insurantIDNumber;
        data["insurantName"] = this.insurantName;
        data["firstBeneficiary"] = this.firstBeneficiary;
        data["firstBeneficiaryText"] = this.firstBeneficiaryText;
        data["vehicleInsuranceType"] = this.vehicleInsuranceType;
        data["vehicleInsuranceTypeText"] = this.vehicleInsuranceTypeText;
        data["vehicleInsuranceStatus"] = this.vehicleInsuranceStatus;
        data["vehicleInsuranceStatusText"] = this.vehicleInsuranceStatusText;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["policyNumber"] = this.policyNumber;
        data["handleType"] = this.handleType;
        data["handleTypeText"] = this.handleTypeText;
        data["handleStatus"] = this.handleStatus;
        data["handleStatusText"] = this.handleStatusText;
        data["handlePerson"] = this.handlePerson;
        data["handlePersonName"] = this.handlePersonName;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["handleFee"] = this.handleFee;
        data["insuranceCompany"] = this.insuranceCompany;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleInsuranceRecordListDto {
        const json = this.toJSON();
        let result = new VehicleInsuranceRecordListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleInsuranceRecordListDto {
    /** 所属组织 */
    originalOUId: number | undefined;
    originalOUName: string | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 被保险人证件号 */
    insurantIDNumber: string | undefined;
    /** 被保险人姓名 */
    insurantName: string | undefined;
    /** 第一受益人 */
    firstBeneficiary: string | undefined;
    firstBeneficiaryText: string | undefined;
    /** 保险类型 */
    vehicleInsuranceType: string | undefined;
    vehicleInsuranceTypeText: string | undefined;
    /** 保险状态 */
    vehicleInsuranceStatus: string | undefined;
    vehicleInsuranceStatusText: string | undefined;
    /** 生效日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 保险单号 */
    policyNumber: string | undefined;
    /** 办理类型 */
    handleType: string | undefined;
    handleTypeText: string | undefined;
    /** 办理状态 */
    handleStatus: string | undefined;
    handleStatusText: string | undefined;
    /** 办理人 */
    handlePerson: string | undefined;
    handlePersonName: string | undefined;
    /** 办理日期/记账日期 */
    accountDate: moment.Moment | undefined;
    /** 办理费用 */
    handleFee: number | undefined;
    /** 保险公司 */
    insuranceCompany: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CreateOrUpdateVehicleInsuranceRecordInput implements ICreateOrUpdateVehicleInsuranceRecordInput {
    vehicleInsuranceRecordCreateOrUpdate: VehicleInsuranceRecordEditDto | undefined;

    constructor(data?: ICreateOrUpdateVehicleInsuranceRecordInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleInsuranceRecordCreateOrUpdate = data["vehicleInsuranceRecordCreateOrUpdate"] ? VehicleInsuranceRecordEditDto.fromJS(data["vehicleInsuranceRecordCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateVehicleInsuranceRecordInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateVehicleInsuranceRecordInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleInsuranceRecordCreateOrUpdate"] = this.vehicleInsuranceRecordCreateOrUpdate ? this.vehicleInsuranceRecordCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateVehicleInsuranceRecordInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateVehicleInsuranceRecordInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateVehicleInsuranceRecordInput {
    vehicleInsuranceRecordCreateOrUpdate: VehicleInsuranceRecordEditDto | undefined;
}

export class VehicleInsuranceRecordEditDto implements IVehicleInsuranceRecordEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 被保险人证件号 */
    insurantIDNumber: string | undefined;
    /** 被保险人姓名 */
    insurantName: string | undefined;
    /** 第一受益人 */
    firstBeneficiary: string | undefined;
    /** 保险类型 */
    vehicleInsuranceType: string | undefined;
    /** 保险状态 */
    vehicleInsuranceStatus: string | undefined;
    /** 生效日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 保险单号 */
    policyNumber: string | undefined;
    /** 办理类型 */
    handleType: string | undefined;
    /** 办理状态 */
    handleStatus: string | undefined;
    /** 办理人 */
    handlePerson: string | undefined;
    /** 办理日期/记账日期 */
    accountDate: moment.Moment | undefined;
    /** 办理费用 */
    handleFee: number | undefined;
    /** 保险公司 */
    insuranceCompany: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    isShare: boolean | undefined;

    constructor(data?: IVehicleInsuranceRecordEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.originalOUId = data["originalOUId"];
            this.vehicleCode = data["vehicleCode"];
            this.insurantIDNumber = data["insurantIDNumber"];
            this.insurantName = data["insurantName"];
            this.firstBeneficiary = data["firstBeneficiary"];
            this.vehicleInsuranceType = data["vehicleInsuranceType"];
            this.vehicleInsuranceStatus = data["vehicleInsuranceStatus"];
            this.certificateStartDate = data["certificateStartDate"] ? moment(data["certificateStartDate"].toString()) : <any>undefined;
            this.certificateEndDate = data["certificateEndDate"] ? moment(data["certificateEndDate"].toString()) : <any>undefined;
            this.policyNumber = data["policyNumber"];
            this.handleType = data["handleType"];
            this.handleStatus = data["handleStatus"];
            this.handlePerson = data["handlePerson"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.handleFee = data["handleFee"];
            this.insuranceCompany = data["insuranceCompany"];
            this.expectDate = data["expectDate"] ? moment(data["expectDate"].toString()) : <any>undefined;
            this.actualDate = data["actualDate"] ? moment(data["actualDate"].toString()) : <any>undefined;
            this.description = data["description"];
            this.isShare = data["isShare"];
        }
    }

    static fromJS(data: any): VehicleInsuranceRecordEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleInsuranceRecordEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["originalOUId"] = this.originalOUId;
        data["vehicleCode"] = this.vehicleCode;
        data["insurantIDNumber"] = this.insurantIDNumber;
        data["insurantName"] = this.insurantName;
        data["firstBeneficiary"] = this.firstBeneficiary;
        data["vehicleInsuranceType"] = this.vehicleInsuranceType;
        data["vehicleInsuranceStatus"] = this.vehicleInsuranceStatus;
        data["certificateStartDate"] = this.certificateStartDate ? this.certificateStartDate.toISOString() : <any>undefined;
        data["certificateEndDate"] = this.certificateEndDate ? this.certificateEndDate.toISOString() : <any>undefined;
        data["policyNumber"] = this.policyNumber;
        data["handleType"] = this.handleType;
        data["handleStatus"] = this.handleStatus;
        data["handlePerson"] = this.handlePerson;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["handleFee"] = this.handleFee;
        data["insuranceCompany"] = this.insuranceCompany;
        data["expectDate"] = this.expectDate ? this.expectDate.toISOString() : <any>undefined;
        data["actualDate"] = this.actualDate ? this.actualDate.toISOString() : <any>undefined;
        data["description"] = this.description;
        data["isShare"] = this.isShare;
        return data; 
    }

    clone(): VehicleInsuranceRecordEditDto {
        const json = this.toJSON();
        let result = new VehicleInsuranceRecordEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleInsuranceRecordEditDto {
    id: string | undefined;
    /** 所属组织 */
    originalOUId: number | undefined;
    /** 车辆编号 */
    vehicleCode: string | undefined;
    /** 被保险人证件号 */
    insurantIDNumber: string | undefined;
    /** 被保险人姓名 */
    insurantName: string | undefined;
    /** 第一受益人 */
    firstBeneficiary: string | undefined;
    /** 保险类型 */
    vehicleInsuranceType: string | undefined;
    /** 保险状态 */
    vehicleInsuranceStatus: string | undefined;
    /** 生效日期 */
    certificateStartDate: moment.Moment | undefined;
    /** 到期日期 */
    certificateEndDate: moment.Moment | undefined;
    /** 保险单号 */
    policyNumber: string | undefined;
    /** 办理类型 */
    handleType: string | undefined;
    /** 办理状态 */
    handleStatus: string | undefined;
    /** 办理人 */
    handlePerson: string | undefined;
    /** 办理日期/记账日期 */
    accountDate: moment.Moment | undefined;
    /** 办理费用 */
    handleFee: number | undefined;
    /** 保险公司 */
    insuranceCompany: string | undefined;
    /** 预计完成日期 */
    expectDate: moment.Moment | undefined;
    /** 实际完成日期 */
    actualDate: moment.Moment | undefined;
    /** 备注 */
    description: string | undefined;
    isShare: boolean | undefined;
}

export class PagedResultDtoOfVehicleNumberMappingListDto implements IPagedResultDtoOfVehicleNumberMappingListDto {
    totalCount: number | undefined;
    items: VehicleNumberMappingListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleNumberMappingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleNumberMappingListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleNumberMappingListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleNumberMappingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleNumberMappingListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleNumberMappingListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleNumberMappingListDto {
    totalCount: number | undefined;
    items: VehicleNumberMappingListDto[] | undefined;
}

export class VehicleNumberMappingListDto implements IVehicleNumberMappingListDto {
    thirdPartyVehicleNumber: string | undefined;
    vehicleNumber: string | undefined;
    thirdPartyCode: string | undefined;
    thirdPartySystemName: string | undefined;
    isActive: boolean | undefined;
    activeDate: moment.Moment | undefined;
    remark: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleNumberMappingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartyVehicleNumber = data["thirdPartyVehicleNumber"];
            this.vehicleNumber = data["vehicleNumber"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.thirdPartySystemName = data["thirdPartySystemName"];
            this.isActive = data["isActive"];
            this.activeDate = data["activeDate"] ? moment(data["activeDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
            this.creatorUserName = data["creatorUserName"];
            this.lastModifierUserName = data["lastModifierUserName"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleNumberMappingListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleNumberMappingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartyVehicleNumber"] = this.thirdPartyVehicleNumber;
        data["vehicleNumber"] = this.vehicleNumber;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["thirdPartySystemName"] = this.thirdPartySystemName;
        data["isActive"] = this.isActive;
        data["activeDate"] = this.activeDate ? this.activeDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["creatorUserName"] = this.creatorUserName;
        data["lastModifierUserName"] = this.lastModifierUserName;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleNumberMappingListDto {
        const json = this.toJSON();
        let result = new VehicleNumberMappingListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleNumberMappingListDto {
    thirdPartyVehicleNumber: string | undefined;
    vehicleNumber: string | undefined;
    thirdPartyCode: string | undefined;
    thirdPartySystemName: string | undefined;
    isActive: boolean | undefined;
    activeDate: moment.Moment | undefined;
    remark: string | undefined;
    creatorUserName: string | undefined;
    lastModifierUserName: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class GetVehicleNumberMappingForEditOutput implements IGetVehicleNumberMappingForEditOutput {
    vehicleNumberMapping: VehicleNumberMappingEditDto | undefined;

    constructor(data?: IGetVehicleNumberMappingForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleNumberMapping = data["vehicleNumberMapping"] ? VehicleNumberMappingEditDto.fromJS(data["vehicleNumberMapping"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetVehicleNumberMappingForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetVehicleNumberMappingForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleNumberMapping"] = this.vehicleNumberMapping ? this.vehicleNumberMapping.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetVehicleNumberMappingForEditOutput {
        const json = this.toJSON();
        let result = new GetVehicleNumberMappingForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetVehicleNumberMappingForEditOutput {
    vehicleNumberMapping: VehicleNumberMappingEditDto | undefined;
}

export class VehicleNumberMappingEditDto implements IVehicleNumberMappingEditDto {
    id: string | undefined;
    vehicleNumber: string | undefined;
    thirdPartyVehicleNumber: string | undefined;
    thirdPartyCode: string | undefined;
    activeDate: moment.Moment | undefined;
    isActive: boolean | undefined;
    remark: string | undefined;

    constructor(data?: IVehicleNumberMappingEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.vehicleNumber = data["vehicleNumber"];
            this.thirdPartyVehicleNumber = data["thirdPartyVehicleNumber"];
            this.thirdPartyCode = data["thirdPartyCode"];
            this.activeDate = data["activeDate"] ? moment(data["activeDate"].toString()) : <any>undefined;
            this.isActive = data["isActive"];
            this.remark = data["remark"];
        }
    }

    static fromJS(data: any): VehicleNumberMappingEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleNumberMappingEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["vehicleNumber"] = this.vehicleNumber;
        data["thirdPartyVehicleNumber"] = this.thirdPartyVehicleNumber;
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["activeDate"] = this.activeDate ? this.activeDate.toISOString() : <any>undefined;
        data["isActive"] = this.isActive;
        data["remark"] = this.remark;
        return data; 
    }

    clone(): VehicleNumberMappingEditDto {
        const json = this.toJSON();
        let result = new VehicleNumberMappingEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleNumberMappingEditDto {
    id: string | undefined;
    vehicleNumber: string | undefined;
    thirdPartyVehicleNumber: string | undefined;
    thirdPartyCode: string | undefined;
    activeDate: moment.Moment | undefined;
    isActive: boolean | undefined;
    remark: string | undefined;
}

export class CreateOrEditVehicleNumberMappingInput implements ICreateOrEditVehicleNumberMappingInput {
    vehicleNumberMapping: VehicleNumberMappingEditDto | undefined;

    constructor(data?: ICreateOrEditVehicleNumberMappingInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleNumberMapping = data["vehicleNumberMapping"] ? VehicleNumberMappingEditDto.fromJS(data["vehicleNumberMapping"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditVehicleNumberMappingInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditVehicleNumberMappingInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleNumberMapping"] = this.vehicleNumberMapping ? this.vehicleNumberMapping.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrEditVehicleNumberMappingInput {
        const json = this.toJSON();
        let result = new CreateOrEditVehicleNumberMappingInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrEditVehicleNumberMappingInput {
    vehicleNumberMapping: VehicleNumberMappingEditDto | undefined;
}

export class ListResultDtoOfVehicleNumberMappingListDto implements IListResultDtoOfVehicleNumberMappingListDto {
    items: VehicleNumberMappingListDto[] | undefined;

    constructor(data?: IListResultDtoOfVehicleNumberMappingListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleNumberMappingListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfVehicleNumberMappingListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfVehicleNumberMappingListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfVehicleNumberMappingListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfVehicleNumberMappingListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfVehicleNumberMappingListDto {
    items: VehicleNumberMappingListDto[] | undefined;
}

export class CreateOrUpdateVehicleRefuelInput implements ICreateOrUpdateVehicleRefuelInput {
    vehicleRefuelCreateOrUpdate: VehicleRefuelEditDto | undefined;

    constructor(data?: ICreateOrUpdateVehicleRefuelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleRefuelCreateOrUpdate = data["vehicleRefuelCreateOrUpdate"] ? VehicleRefuelEditDto.fromJS(data["vehicleRefuelCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateVehicleRefuelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateVehicleRefuelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleRefuelCreateOrUpdate"] = this.vehicleRefuelCreateOrUpdate ? this.vehicleRefuelCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateVehicleRefuelInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateVehicleRefuelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateVehicleRefuelInput {
    vehicleRefuelCreateOrUpdate: VehicleRefuelEditDto | undefined;
}

export class VehicleRefuelEditDto implements IVehicleRefuelEditDto {
    id: string | undefined;
    /** 业务部门 */
    bussinessDepartment: number | undefined;
    /** 班次（组织树） */
    shiftId: number | undefined;
    /** 加油员 */
    refuelPerson: number | undefined;
    /** 加油时间 */
    refuelTime: moment.Moment | undefined;
    /** 物料编号 */
    materialNumber: number | undefined;
    /** 车辆信息（小号，车牌号） */
    vehicleInfo: string | undefined;
    /** 内部车辆当前公里数 */
    innerVehicleKilometers: number | undefined;
    /** 加油价格 */
    refuelPrice: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油金额 */
    refuelMoney: number | undefined;
    /** 结算方式 */
    settlementMethod: string | undefined;
    /** 结算状态 */
    settlementState: string | undefined;
    /** 上账状态 */
    accountState: string | undefined;
    /** 付款状态 */
    paymentState: string | undefined;
    /** 内部加油标识 */
    innerRefuelIdentification: string | undefined;
    /** 加油客户（内部运输公司或外部客户编号） */
    refuelCustomers: number | undefined;
    /** 出库仓库（具体加油站或加油车） */
    outStorageName: number | undefined;
    /** 上账日期 */
    accountDate: moment.Moment | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 结算日期 */
    settlementDate: moment.Moment | undefined;
    /** 加油类别 */
    refuelType: string | undefined;

    constructor(data?: IVehicleRefuelEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.bussinessDepartment = data["bussinessDepartment"];
            this.shiftId = data["shiftId"];
            this.refuelPerson = data["refuelPerson"];
            this.refuelTime = data["refuelTime"] ? moment(data["refuelTime"].toString()) : <any>undefined;
            this.materialNumber = data["materialNumber"];
            this.vehicleInfo = data["vehicleInfo"];
            this.innerVehicleKilometers = data["innerVehicleKilometers"];
            this.refuelPrice = data["refuelPrice"];
            this.refuelLitres = data["refuelLitres"];
            this.refuelMoney = data["refuelMoney"];
            this.settlementMethod = data["settlementMethod"];
            this.settlementState = data["settlementState"];
            this.accountState = data["accountState"];
            this.paymentState = data["paymentState"];
            this.innerRefuelIdentification = data["innerRefuelIdentification"];
            this.refuelCustomers = data["refuelCustomers"];
            this.outStorageName = data["outStorageName"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
            this.settlementDate = data["settlementDate"] ? moment(data["settlementDate"].toString()) : <any>undefined;
            this.refuelType = data["refuelType"];
        }
    }

    static fromJS(data: any): VehicleRefuelEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleRefuelEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["shiftId"] = this.shiftId;
        data["refuelPerson"] = this.refuelPerson;
        data["refuelTime"] = this.refuelTime ? this.refuelTime.toISOString() : <any>undefined;
        data["materialNumber"] = this.materialNumber;
        data["vehicleInfo"] = this.vehicleInfo;
        data["innerVehicleKilometers"] = this.innerVehicleKilometers;
        data["refuelPrice"] = this.refuelPrice;
        data["refuelLitres"] = this.refuelLitres;
        data["refuelMoney"] = this.refuelMoney;
        data["settlementMethod"] = this.settlementMethod;
        data["settlementState"] = this.settlementState;
        data["accountState"] = this.accountState;
        data["paymentState"] = this.paymentState;
        data["innerRefuelIdentification"] = this.innerRefuelIdentification;
        data["refuelCustomers"] = this.refuelCustomers;
        data["outStorageName"] = this.outStorageName;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["settlementDate"] = this.settlementDate ? this.settlementDate.toISOString() : <any>undefined;
        data["refuelType"] = this.refuelType;
        return data; 
    }

    clone(): VehicleRefuelEditDto {
        const json = this.toJSON();
        let result = new VehicleRefuelEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleRefuelEditDto {
    id: string | undefined;
    /** 业务部门 */
    bussinessDepartment: number | undefined;
    /** 班次（组织树） */
    shiftId: number | undefined;
    /** 加油员 */
    refuelPerson: number | undefined;
    /** 加油时间 */
    refuelTime: moment.Moment | undefined;
    /** 物料编号 */
    materialNumber: number | undefined;
    /** 车辆信息（小号，车牌号） */
    vehicleInfo: string | undefined;
    /** 内部车辆当前公里数 */
    innerVehicleKilometers: number | undefined;
    /** 加油价格 */
    refuelPrice: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油金额 */
    refuelMoney: number | undefined;
    /** 结算方式 */
    settlementMethod: string | undefined;
    /** 结算状态 */
    settlementState: string | undefined;
    /** 上账状态 */
    accountState: string | undefined;
    /** 付款状态 */
    paymentState: string | undefined;
    /** 内部加油标识 */
    innerRefuelIdentification: string | undefined;
    /** 加油客户（内部运输公司或外部客户编号） */
    refuelCustomers: number | undefined;
    /** 出库仓库（具体加油站或加油车） */
    outStorageName: number | undefined;
    /** 上账日期 */
    accountDate: moment.Moment | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 结算日期 */
    settlementDate: moment.Moment | undefined;
    /** 加油类别 */
    refuelType: string | undefined;
}

export class PagedResultDtoOfVehicleRefuelListDto implements IPagedResultDtoOfVehicleRefuelListDto {
    totalCount: number | undefined;
    items: VehicleRefuelListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleRefuelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleRefuelListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleRefuelListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleRefuelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleRefuelListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleRefuelListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleRefuelListDto {
    totalCount: number | undefined;
    items: VehicleRefuelListDto[] | undefined;
}

export class VehicleRefuelListDto implements IVehicleRefuelListDto {
    /** 业务部门 */
    bussinessDepartment: number | undefined;
    /** 业务部门名称 */
    bussinessDepartmentText: string | undefined;
    /** 班次（组织树） */
    shiftId: number | undefined;
    shiftIdName: string | undefined;
    /** 加油员 */
    refuelPerson: number | undefined;
    /** 加油员显示文本 */
    refuelPersonText: string | undefined;
    /** 加油时间 */
    refuelTime: moment.Moment | undefined;
    /** 物料编号 */
    materialNumber: number | undefined;
    /** 物料显示文本 */
    materialNumberText: string | undefined;
    /** 车辆信息（小号，车牌号） */
    vehicleInfo: string | undefined;
    /** 带连接符的小号 */
    vehicleInfoWithHyphen: string | undefined;
    /** 牌照号 */
    vehicleLicensePlateNumber: string | undefined;
    /** 内部车辆当前公里数 */
    innerVehicleKilometers: number | undefined;
    /** 加油价格 */
    refuelPrice: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油金额 */
    refuelMoney: number | undefined;
    /** 结算方式 */
    settlementMethod: string | undefined;
    /** 结算方式显示文本 */
    settlementMethodText: string | undefined;
    /** 结算状态 */
    settlementState: string | undefined;
    /** 结算状态显示文本 */
    settlementStateText: string | undefined;
    /** 付款状态 */
    paymentState: string | undefined;
    /** 付款状态显示文本 */
    paymentStateText: string | undefined;
    /** 上账状态 */
    accountState: string | undefined;
    /** 上账状态显示文本 */
    accountStateText: string | undefined;
    /** 内部加油标识 */
    innerRefuelIdentification: string | undefined;
    /** 内部加油标识显示文本 */
    innerRefuelIdentificationText: string | undefined;
    /** 加油客户（内部运输公司或外部客户编号） */
    refuelCustomers: number | undefined;
    /** 加油客户显示文本 */
    refuelCustomersText: string | undefined;
    /** 出库仓库（具体加油站或加油车） */
    outStorageName: number | undefined;
    /** 出库仓库（具体加油站或加油车）显示文本 */
    outStorageNameText: string | undefined;
    /** 上账日期 */
    accountDate: moment.Moment | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 结算日期 */
    settlementDate: moment.Moment | undefined;
    /** 加油类别 */
    refuelType: string | undefined;
    /** 加油类别显示文本 */
    refuelTypeText: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleRefuelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bussinessDepartment = data["bussinessDepartment"];
            this.bussinessDepartmentText = data["bussinessDepartmentText"];
            this.shiftId = data["shiftId"];
            this.shiftIdName = data["shiftIdName"];
            this.refuelPerson = data["refuelPerson"];
            this.refuelPersonText = data["refuelPersonText"];
            this.refuelTime = data["refuelTime"] ? moment(data["refuelTime"].toString()) : <any>undefined;
            this.materialNumber = data["materialNumber"];
            this.materialNumberText = data["materialNumberText"];
            this.vehicleInfo = data["vehicleInfo"];
            this.vehicleInfoWithHyphen = data["vehicleInfoWithHyphen"];
            this.vehicleLicensePlateNumber = data["vehicleLicensePlateNumber"];
            this.innerVehicleKilometers = data["innerVehicleKilometers"];
            this.refuelPrice = data["refuelPrice"];
            this.refuelLitres = data["refuelLitres"];
            this.refuelMoney = data["refuelMoney"];
            this.settlementMethod = data["settlementMethod"];
            this.settlementMethodText = data["settlementMethodText"];
            this.settlementState = data["settlementState"];
            this.settlementStateText = data["settlementStateText"];
            this.paymentState = data["paymentState"];
            this.paymentStateText = data["paymentStateText"];
            this.accountState = data["accountState"];
            this.accountStateText = data["accountStateText"];
            this.innerRefuelIdentification = data["innerRefuelIdentification"];
            this.innerRefuelIdentificationText = data["innerRefuelIdentificationText"];
            this.refuelCustomers = data["refuelCustomers"];
            this.refuelCustomersText = data["refuelCustomersText"];
            this.outStorageName = data["outStorageName"];
            this.outStorageNameText = data["outStorageNameText"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
            this.settlementDate = data["settlementDate"] ? moment(data["settlementDate"].toString()) : <any>undefined;
            this.refuelType = data["refuelType"];
            this.refuelTypeText = data["refuelTypeText"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleRefuelListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleRefuelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["bussinessDepartmentText"] = this.bussinessDepartmentText;
        data["shiftId"] = this.shiftId;
        data["shiftIdName"] = this.shiftIdName;
        data["refuelPerson"] = this.refuelPerson;
        data["refuelPersonText"] = this.refuelPersonText;
        data["refuelTime"] = this.refuelTime ? this.refuelTime.toISOString() : <any>undefined;
        data["materialNumber"] = this.materialNumber;
        data["materialNumberText"] = this.materialNumberText;
        data["vehicleInfo"] = this.vehicleInfo;
        data["vehicleInfoWithHyphen"] = this.vehicleInfoWithHyphen;
        data["vehicleLicensePlateNumber"] = this.vehicleLicensePlateNumber;
        data["innerVehicleKilometers"] = this.innerVehicleKilometers;
        data["refuelPrice"] = this.refuelPrice;
        data["refuelLitres"] = this.refuelLitres;
        data["refuelMoney"] = this.refuelMoney;
        data["settlementMethod"] = this.settlementMethod;
        data["settlementMethodText"] = this.settlementMethodText;
        data["settlementState"] = this.settlementState;
        data["settlementStateText"] = this.settlementStateText;
        data["paymentState"] = this.paymentState;
        data["paymentStateText"] = this.paymentStateText;
        data["accountState"] = this.accountState;
        data["accountStateText"] = this.accountStateText;
        data["innerRefuelIdentification"] = this.innerRefuelIdentification;
        data["innerRefuelIdentificationText"] = this.innerRefuelIdentificationText;
        data["refuelCustomers"] = this.refuelCustomers;
        data["refuelCustomersText"] = this.refuelCustomersText;
        data["outStorageName"] = this.outStorageName;
        data["outStorageNameText"] = this.outStorageNameText;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["settlementDate"] = this.settlementDate ? this.settlementDate.toISOString() : <any>undefined;
        data["refuelType"] = this.refuelType;
        data["refuelTypeText"] = this.refuelTypeText;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleRefuelListDto {
        const json = this.toJSON();
        let result = new VehicleRefuelListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleRefuelListDto {
    /** 业务部门 */
    bussinessDepartment: number | undefined;
    /** 业务部门名称 */
    bussinessDepartmentText: string | undefined;
    /** 班次（组织树） */
    shiftId: number | undefined;
    shiftIdName: string | undefined;
    /** 加油员 */
    refuelPerson: number | undefined;
    /** 加油员显示文本 */
    refuelPersonText: string | undefined;
    /** 加油时间 */
    refuelTime: moment.Moment | undefined;
    /** 物料编号 */
    materialNumber: number | undefined;
    /** 物料显示文本 */
    materialNumberText: string | undefined;
    /** 车辆信息（小号，车牌号） */
    vehicleInfo: string | undefined;
    /** 带连接符的小号 */
    vehicleInfoWithHyphen: string | undefined;
    /** 牌照号 */
    vehicleLicensePlateNumber: string | undefined;
    /** 内部车辆当前公里数 */
    innerVehicleKilometers: number | undefined;
    /** 加油价格 */
    refuelPrice: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油金额 */
    refuelMoney: number | undefined;
    /** 结算方式 */
    settlementMethod: string | undefined;
    /** 结算方式显示文本 */
    settlementMethodText: string | undefined;
    /** 结算状态 */
    settlementState: string | undefined;
    /** 结算状态显示文本 */
    settlementStateText: string | undefined;
    /** 付款状态 */
    paymentState: string | undefined;
    /** 付款状态显示文本 */
    paymentStateText: string | undefined;
    /** 上账状态 */
    accountState: string | undefined;
    /** 上账状态显示文本 */
    accountStateText: string | undefined;
    /** 内部加油标识 */
    innerRefuelIdentification: string | undefined;
    /** 内部加油标识显示文本 */
    innerRefuelIdentificationText: string | undefined;
    /** 加油客户（内部运输公司或外部客户编号） */
    refuelCustomers: number | undefined;
    /** 加油客户显示文本 */
    refuelCustomersText: string | undefined;
    /** 出库仓库（具体加油站或加油车） */
    outStorageName: number | undefined;
    /** 出库仓库（具体加油站或加油车）显示文本 */
    outStorageNameText: string | undefined;
    /** 上账日期 */
    accountDate: moment.Moment | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 结算日期 */
    settlementDate: moment.Moment | undefined;
    /** 加油类别 */
    refuelType: string | undefined;
    /** 加油类别显示文本 */
    refuelTypeText: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class Materiel implements IMateriel {
    tenantId: number | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    standardPrice: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    purchaseMeasureUnit: string | undefined;
    measureMethod: string | undefined;
    financialMappingNumber: string | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    order: number | undefined;
    description: string | undefined;
    materielTypeId: number | undefined;
    materielType: MaterielType | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IMateriel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.category = data["category"];
            this.standardPrice = data["standardPrice"];
            this.manufacturer = data["manufacturer"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.purchaseMeasureUnit = data["purchaseMeasureUnit"];
            this.measureMethod = data["measureMethod"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.order = data["order"];
            this.description = data["description"];
            this.materielTypeId = data["materielTypeId"];
            this.materielType = data["materielType"] ? MaterielType.fromJS(data["materielType"]) : <any>undefined;
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Materiel {
        data = typeof data === 'object' ? data : {};
        let result = new Materiel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["category"] = this.category;
        data["standardPrice"] = this.standardPrice;
        data["manufacturer"] = this.manufacturer;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["purchaseMeasureUnit"] = this.purchaseMeasureUnit;
        data["measureMethod"] = this.measureMethod;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["order"] = this.order;
        data["description"] = this.description;
        data["materielTypeId"] = this.materielTypeId;
        data["materielType"] = this.materielType ? this.materielType.toJSON() : <any>undefined;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): Materiel {
        const json = this.toJSON();
        let result = new Materiel();
        result.init(json);
        return result;
    }
}

export interface IMateriel {
    tenantId: number | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    standardPrice: number | undefined;
    manufacturer: string | undefined;
    baseMeasureUnit: string | undefined;
    purchaseMeasureUnit: string | undefined;
    measureMethod: string | undefined;
    financialMappingNumber: string | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    order: number | undefined;
    description: string | undefined;
    materielTypeId: number | undefined;
    materielType: MaterielType | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class MaterielType implements IMaterielType {
    tenantId: number | undefined;
    value: string | undefined;
    text: string | undefined;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    parent: MaterielType | undefined;
    children: MaterielType[] | undefined;
    materiels: Materiel[] | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: IMaterielType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.value = data["value"];
            this.text = data["text"];
            this.description = data["description"];
            this.order = data["order"];
            this.parentId = data["parentId"];
            this.parent = data["parent"] ? MaterielType.fromJS(data["parent"]) : <any>undefined;
            if (data["children"] && data["children"].constructor === Array) {
                this.children = [] as any;
                for (let item of data["children"])
                    this.children.push(MaterielType.fromJS(item));
            }
            if (data["materiels"] && data["materiels"].constructor === Array) {
                this.materiels = [] as any;
                for (let item of data["materiels"])
                    this.materiels.push(Materiel.fromJS(item));
            }
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): MaterielType {
        data = typeof data === 'object' ? data : {};
        let result = new MaterielType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["value"] = this.value;
        data["text"] = this.text;
        data["description"] = this.description;
        data["order"] = this.order;
        data["parentId"] = this.parentId;
        data["parent"] = this.parent ? this.parent.toJSON() : <any>undefined;
        if (this.children && this.children.constructor === Array) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item.toJSON());
        }
        if (this.materiels && this.materiels.constructor === Array) {
            data["materiels"] = [];
            for (let item of this.materiels)
                data["materiels"].push(item.toJSON());
        }
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): MaterielType {
        const json = this.toJSON();
        let result = new MaterielType();
        result.init(json);
        return result;
    }
}

export interface IMaterielType {
    tenantId: number | undefined;
    value: string | undefined;
    text: string | undefined;
    description: string | undefined;
    order: number | undefined;
    parentId: number | undefined;
    parent: MaterielType | undefined;
    children: MaterielType[] | undefined;
    materiels: Materiel[] | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class Customer implements ICustomer {
    tenantId: number | undefined;
    organizationUnitId: number | undefined;
    ownershipOUId: number | undefined;
    code: string | undefined;
    name: string | undefined;
    type: string | undefined;
    isInner: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    order: number | undefined;
    description: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;

    constructor(data?: ICustomer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenantId = data["tenantId"];
            this.organizationUnitId = data["organizationUnitId"];
            this.ownershipOUId = data["ownershipOUId"];
            this.code = data["code"];
            this.name = data["name"];
            this.type = data["type"];
            this.isInner = data["isInner"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.taxRegistrationNumber = data["taxRegistrationNumber"];
            this.financialMappingNumber = data["financialMappingNumber"];
            this.unifiedSocialCreditCode = data["unifiedSocialCreditCode"];
            this.organizationCodeCertificate = data["organizationCodeCertificate"];
            this.businessLicence = data["businessLicence"];
            this.taxpayerIdentityNumber = data["taxpayerIdentityNumber"];
            this.bankAccount = data["bankAccount"];
            this.legalPerson = data["legalPerson"];
            this.legalResidentIdentity = data["legalResidentIdentity"];
            this.isEnable = data["isEnable"];
            this.isDefault = data["isDefault"];
            this.order = data["order"];
            this.description = data["description"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): Customer {
        data = typeof data === 'object' ? data : {};
        let result = new Customer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenantId"] = this.tenantId;
        data["organizationUnitId"] = this.organizationUnitId;
        data["ownershipOUId"] = this.ownershipOUId;
        data["code"] = this.code;
        data["name"] = this.name;
        data["type"] = this.type;
        data["isInner"] = this.isInner;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["taxRegistrationNumber"] = this.taxRegistrationNumber;
        data["financialMappingNumber"] = this.financialMappingNumber;
        data["unifiedSocialCreditCode"] = this.unifiedSocialCreditCode;
        data["organizationCodeCertificate"] = this.organizationCodeCertificate;
        data["businessLicence"] = this.businessLicence;
        data["taxpayerIdentityNumber"] = this.taxpayerIdentityNumber;
        data["bankAccount"] = this.bankAccount;
        data["legalPerson"] = this.legalPerson;
        data["legalResidentIdentity"] = this.legalResidentIdentity;
        data["isEnable"] = this.isEnable;
        data["isDefault"] = this.isDefault;
        data["order"] = this.order;
        data["description"] = this.description;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): Customer {
        const json = this.toJSON();
        let result = new Customer();
        result.init(json);
        return result;
    }
}

export interface ICustomer {
    tenantId: number | undefined;
    organizationUnitId: number | undefined;
    ownershipOUId: number | undefined;
    code: string | undefined;
    name: string | undefined;
    type: string | undefined;
    isInner: boolean | undefined;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    taxRegistrationNumber: string | undefined;
    financialMappingNumber: string | undefined;
    unifiedSocialCreditCode: string | undefined;
    organizationCodeCertificate: string | undefined;
    businessLicence: string | undefined;
    taxpayerIdentityNumber: string | undefined;
    bankAccount: string | undefined;
    legalPerson: string | undefined;
    legalResidentIdentity: string | undefined;
    isEnable: boolean | undefined;
    isDefault: boolean | undefined;
    order: number | undefined;
    description: string | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: number | undefined;
}

export class PagedResultDtoOfPrivateFuelRefuelListDto implements IPagedResultDtoOfPrivateFuelRefuelListDto {
    totalCount: number | undefined;
    items: PrivateFuelRefuelListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfPrivateFuelRefuelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(PrivateFuelRefuelListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfPrivateFuelRefuelListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfPrivateFuelRefuelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfPrivateFuelRefuelListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfPrivateFuelRefuelListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfPrivateFuelRefuelListDto {
    totalCount: number | undefined;
    items: PrivateFuelRefuelListDto[] | undefined;
}

export class PrivateFuelRefuelListDto implements IPrivateFuelRefuelListDto {
    /** 业务单位 */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 加油时间（日期时间型、必输） */
    refuelTime: moment.Moment | undefined;
    /** 加油支数（必输） */
    refuelCount: number | undefined;
    /** 加油升数（必输） */
    refuelLitres: number | undefined;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 油品（必输）货物中选择 */
    fuel: number | undefined;
    fuelText: string | undefined;
    /** 加油车辆编号（必输） */
    refuelVehicleCode: string | undefined;
    /** 司机（必输） */
    driver: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 加油操作人 */
    refuelOperator: string | undefined;
    /** 审核状态（必输，使用统一的审核状态定义项目） */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 加油站（必输）从组织机构中选择 */
    fillingStation: number | undefined;
    fillingStationText: string | undefined;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 数据类型（手工创建、批量导入） */
    dataType: string | undefined;
    dataTypeText: string | undefined;
    /** 单车付款方式（必输）（抵扣运费、抵扣司机借款） */
    singleVehiclePaymentMethod: string | undefined;
    singleVehiclePaymentMethodText: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IPrivateFuelRefuelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bussinessDepartment = data["bussinessDepartment"];
            this.bussinessDepartmentText = data["bussinessDepartmentText"];
            this.refuelTime = data["refuelTime"] ? moment(data["refuelTime"].toString()) : <any>undefined;
            this.refuelCount = data["refuelCount"];
            this.refuelLitres = data["refuelLitres"];
            this.refuelPrice = data["refuelPrice"];
            this.isTax = data["isTax"];
            this.taxRate = data["taxRate"];
            this.taxAmount = data["taxAmount"];
            this.noTaxAmount = data["noTaxAmount"];
            this.fuel = data["fuel"];
            this.fuelText = data["fuelText"];
            this.refuelVehicleCode = data["refuelVehicleCode"];
            this.driver = data["driver"];
            this.driverIDNumber = data["driverIDNumber"];
            this.refuelOperator = data["refuelOperator"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.fillingStation = data["fillingStation"];
            this.fillingStationText = data["fillingStationText"];
            this.auditSpecification = data["auditSpecification"];
            this.auditOperator = data["auditOperator"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
            this.dataType = data["dataType"];
            this.dataTypeText = data["dataTypeText"];
            this.singleVehiclePaymentMethod = data["singleVehiclePaymentMethod"];
            this.singleVehiclePaymentMethodText = data["singleVehiclePaymentMethodText"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): PrivateFuelRefuelListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrivateFuelRefuelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["bussinessDepartmentText"] = this.bussinessDepartmentText;
        data["refuelTime"] = this.refuelTime ? this.refuelTime.toISOString() : <any>undefined;
        data["refuelCount"] = this.refuelCount;
        data["refuelLitres"] = this.refuelLitres;
        data["refuelPrice"] = this.refuelPrice;
        data["isTax"] = this.isTax;
        data["taxRate"] = this.taxRate;
        data["taxAmount"] = this.taxAmount;
        data["noTaxAmount"] = this.noTaxAmount;
        data["fuel"] = this.fuel;
        data["fuelText"] = this.fuelText;
        data["refuelVehicleCode"] = this.refuelVehicleCode;
        data["driver"] = this.driver;
        data["driverIDNumber"] = this.driverIDNumber;
        data["refuelOperator"] = this.refuelOperator;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["fillingStation"] = this.fillingStation;
        data["fillingStationText"] = this.fillingStationText;
        data["auditSpecification"] = this.auditSpecification;
        data["auditOperator"] = this.auditOperator;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["dataType"] = this.dataType;
        data["dataTypeText"] = this.dataTypeText;
        data["singleVehiclePaymentMethod"] = this.singleVehiclePaymentMethod;
        data["singleVehiclePaymentMethodText"] = this.singleVehiclePaymentMethodText;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): PrivateFuelRefuelListDto {
        const json = this.toJSON();
        let result = new PrivateFuelRefuelListDto();
        result.init(json);
        return result;
    }
}

export interface IPrivateFuelRefuelListDto {
    /** 业务单位 */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 加油时间（日期时间型、必输） */
    refuelTime: moment.Moment | undefined;
    /** 加油支数（必输） */
    refuelCount: number | undefined;
    /** 加油升数（必输） */
    refuelLitres: number | undefined;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 油品（必输）货物中选择 */
    fuel: number | undefined;
    fuelText: string | undefined;
    /** 加油车辆编号（必输） */
    refuelVehicleCode: string | undefined;
    /** 司机（必输） */
    driver: string | undefined;
    /** 司机身份证号 */
    driverIDNumber: string | undefined;
    /** 加油操作人 */
    refuelOperator: string | undefined;
    /** 审核状态（必输，使用统一的审核状态定义项目） */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 加油站（必输）从组织机构中选择 */
    fillingStation: number | undefined;
    fillingStationText: string | undefined;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 数据类型（手工创建、批量导入） */
    dataType: string | undefined;
    dataTypeText: string | undefined;
    /** 单车付款方式（必输）（抵扣运费、抵扣司机借款） */
    singleVehiclePaymentMethod: string | undefined;
    singleVehiclePaymentMethodText: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CreateOrUpdatePrivateFuelRefuelInput implements ICreateOrUpdatePrivateFuelRefuelInput {
    privateFuelRefuelCreateOrUpdate: PrivateFuelRefuelEditDto | undefined;

    constructor(data?: ICreateOrUpdatePrivateFuelRefuelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.privateFuelRefuelCreateOrUpdate = data["privateFuelRefuelCreateOrUpdate"] ? PrivateFuelRefuelEditDto.fromJS(data["privateFuelRefuelCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdatePrivateFuelRefuelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdatePrivateFuelRefuelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["privateFuelRefuelCreateOrUpdate"] = this.privateFuelRefuelCreateOrUpdate ? this.privateFuelRefuelCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdatePrivateFuelRefuelInput {
        const json = this.toJSON();
        let result = new CreateOrUpdatePrivateFuelRefuelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdatePrivateFuelRefuelInput {
    privateFuelRefuelCreateOrUpdate: PrivateFuelRefuelEditDto | undefined;
}

export class PrivateFuelRefuelEditDto implements IPrivateFuelRefuelEditDto {
    id: string | undefined;
    /** 业务单位 */
    bussinessDepartment: number;
    /** 加油时间（日期时间型、必输） */
    refuelTime: moment.Moment;
    /** 加油支数（必输） */
    refuelCount: number | undefined;
    /** 加油升数（必输） */
    refuelLitres: number;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number;
    /** 油品（必输）货物中选择 */
    fuel: number;
    /** 加油车辆编号（必输） */
    refuelVehicleCode: string;
    /** 司机（必输） */
    driver: string;
    /** 司机身份证号（必输） */
    driverIDNumber: string;
    /** 加油操作人 */
    refuelOperator: string | undefined;
    /** 审核状态（必输，使用统一的审核状态定义项目） */
    auditStatus: string;
    /** 加油站（必输）从组织机构中选择 */
    fillingStation: number;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 数据类型（手工创建、批量导入） */
    dataType: string | undefined;
    /** 单车付款方式（必输）（抵扣运费、抵扣司机借款） */
    singleVehiclePaymentMethod: string;

    constructor(data?: IPrivateFuelRefuelEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.bussinessDepartment = data["bussinessDepartment"];
            this.refuelTime = data["refuelTime"] ? moment(data["refuelTime"].toString()) : <any>undefined;
            this.refuelCount = data["refuelCount"];
            this.refuelLitres = data["refuelLitres"];
            this.refuelPrice = data["refuelPrice"];
            this.isTax = data["isTax"];
            this.taxRate = data["taxRate"];
            this.taxAmount = data["taxAmount"];
            this.noTaxAmount = data["noTaxAmount"];
            this.fuel = data["fuel"];
            this.refuelVehicleCode = data["refuelVehicleCode"];
            this.driver = data["driver"];
            this.driverIDNumber = data["driverIDNumber"];
            this.refuelOperator = data["refuelOperator"];
            this.auditStatus = data["auditStatus"];
            this.fillingStation = data["fillingStation"];
            this.auditSpecification = data["auditSpecification"];
            this.auditOperator = data["auditOperator"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.remark = data["remark"];
            this.dataType = data["dataType"];
            this.singleVehiclePaymentMethod = data["singleVehiclePaymentMethod"];
        }
    }

    static fromJS(data: any): PrivateFuelRefuelEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrivateFuelRefuelEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["refuelTime"] = this.refuelTime ? this.refuelTime.toISOString() : <any>undefined;
        data["refuelCount"] = this.refuelCount;
        data["refuelLitres"] = this.refuelLitres;
        data["refuelPrice"] = this.refuelPrice;
        data["isTax"] = this.isTax;
        data["taxRate"] = this.taxRate;
        data["taxAmount"] = this.taxAmount;
        data["noTaxAmount"] = this.noTaxAmount;
        data["fuel"] = this.fuel;
        data["refuelVehicleCode"] = this.refuelVehicleCode;
        data["driver"] = this.driver;
        data["driverIDNumber"] = this.driverIDNumber;
        data["refuelOperator"] = this.refuelOperator;
        data["auditStatus"] = this.auditStatus;
        data["fillingStation"] = this.fillingStation;
        data["auditSpecification"] = this.auditSpecification;
        data["auditOperator"] = this.auditOperator;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["remark"] = this.remark;
        data["dataType"] = this.dataType;
        data["singleVehiclePaymentMethod"] = this.singleVehiclePaymentMethod;
        return data; 
    }

    clone(): PrivateFuelRefuelEditDto {
        const json = this.toJSON();
        let result = new PrivateFuelRefuelEditDto();
        result.init(json);
        return result;
    }
}

export interface IPrivateFuelRefuelEditDto {
    id: string | undefined;
    /** 业务单位 */
    bussinessDepartment: number;
    /** 加油时间（日期时间型、必输） */
    refuelTime: moment.Moment;
    /** 加油支数（必输） */
    refuelCount: number | undefined;
    /** 加油升数（必输） */
    refuelLitres: number;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number;
    /** 油品（必输）货物中选择 */
    fuel: number;
    /** 加油车辆编号（必输） */
    refuelVehicleCode: string;
    /** 司机（必输） */
    driver: string;
    /** 司机身份证号（必输） */
    driverIDNumber: string;
    /** 加油操作人 */
    refuelOperator: string | undefined;
    /** 审核状态（必输，使用统一的审核状态定义项目） */
    auditStatus: string;
    /** 加油站（必输）从组织机构中选择 */
    fillingStation: number;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 数据类型（手工创建、批量导入） */
    dataType: string | undefined;
    /** 单车付款方式（必输）（抵扣运费、抵扣司机借款） */
    singleVehiclePaymentMethod: string;
}

export class GetDriverInfoOutput implements IGetDriverInfoOutput {
    driverIDNumber: string | undefined;
    driverName: string | undefined;

    constructor(data?: IGetDriverInfoOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.driverIDNumber = data["driverIDNumber"];
            this.driverName = data["driverName"];
        }
    }

    static fromJS(data: any): GetDriverInfoOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetDriverInfoOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["driverIDNumber"] = this.driverIDNumber;
        data["driverName"] = this.driverName;
        return data; 
    }

    clone(): GetDriverInfoOutput {
        const json = this.toJSON();
        let result = new GetDriverInfoOutput();
        result.init(json);
        return result;
    }
}

export interface IGetDriverInfoOutput {
    driverIDNumber: string | undefined;
    driverName: string | undefined;
}

export class PrivateFuelRefuelApprovalInput implements IPrivateFuelRefuelApprovalInput {
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditSpecification: string | undefined;

    constructor(data?: IPrivateFuelRefuelApprovalInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idStr = data["idStr"];
            this.auditStatus = data["auditStatus"];
            this.auditSpecification = data["auditSpecification"];
        }
    }

    static fromJS(data: any): PrivateFuelRefuelApprovalInput {
        data = typeof data === 'object' ? data : {};
        let result = new PrivateFuelRefuelApprovalInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idStr"] = this.idStr;
        data["auditStatus"] = this.auditStatus;
        data["auditSpecification"] = this.auditSpecification;
        return data; 
    }

    clone(): PrivateFuelRefuelApprovalInput {
        const json = this.toJSON();
        let result = new PrivateFuelRefuelApprovalInput();
        result.init(json);
        return result;
    }
}

export interface IPrivateFuelRefuelApprovalInput {
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditSpecification: string | undefined;
}

export class CreatePrivateFuelRefuelFromExcelInput implements ICreatePrivateFuelRefuelFromExcelInput {
    /** 业务单位 */
    bussinessDepartment: number;
    /** 油品（必输）货物中选择 */
    fuel: number;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number;
    /** 加油操作人 */
    refuelOperator: string | undefined;
    /** 加油站（必输）从组织机构中选择 */
    fillingStation: number;
    /** 付款方式 */
    singleVehiclePaymentMethod: string;
    /** 记账日期 */
    accountDate: moment.Moment;
    fileContent: string | undefined;

    constructor(data?: ICreatePrivateFuelRefuelFromExcelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bussinessDepartment = data["bussinessDepartment"];
            this.fuel = data["fuel"];
            this.isTax = data["isTax"];
            this.taxRate = data["taxRate"];
            this.refuelOperator = data["refuelOperator"];
            this.fillingStation = data["fillingStation"];
            this.singleVehiclePaymentMethod = data["singleVehiclePaymentMethod"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.fileContent = data["fileContent"];
        }
    }

    static fromJS(data: any): CreatePrivateFuelRefuelFromExcelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePrivateFuelRefuelFromExcelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["fuel"] = this.fuel;
        data["isTax"] = this.isTax;
        data["taxRate"] = this.taxRate;
        data["refuelOperator"] = this.refuelOperator;
        data["fillingStation"] = this.fillingStation;
        data["singleVehiclePaymentMethod"] = this.singleVehiclePaymentMethod;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["fileContent"] = this.fileContent;
        return data; 
    }

    clone(): CreatePrivateFuelRefuelFromExcelInput {
        const json = this.toJSON();
        let result = new CreatePrivateFuelRefuelFromExcelInput();
        result.init(json);
        return result;
    }
}

export interface ICreatePrivateFuelRefuelFromExcelInput {
    /** 业务单位 */
    bussinessDepartment: number;
    /** 油品（必输）货物中选择 */
    fuel: number;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number;
    /** 加油操作人 */
    refuelOperator: string | undefined;
    /** 加油站（必输）从组织机构中选择 */
    fillingStation: number;
    /** 付款方式 */
    singleVehiclePaymentMethod: string;
    /** 记账日期 */
    accountDate: moment.Moment;
    fileContent: string | undefined;
}

export class PrivateFuelRefuelImportingReturnDto implements IPrivateFuelRefuelImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;

    constructor(data?: IPrivateFuelRefuelImportingReturnDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
        }
    }

    static fromJS(data: any): PrivateFuelRefuelImportingReturnDto {
        data = typeof data === 'object' ? data : {};
        let result = new PrivateFuelRefuelImportingReturnDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        return data; 
    }

    clone(): PrivateFuelRefuelImportingReturnDto {
        const json = this.toJSON();
        let result = new PrivateFuelRefuelImportingReturnDto();
        result.init(json);
        return result;
    }
}

export interface IPrivateFuelRefuelImportingReturnDto {
    /** 总数 */
    totalCount: number | undefined;
}

export class PagedResultDtoOfVehicleExternalRefuelListDto implements IPagedResultDtoOfVehicleExternalRefuelListDto {
    totalCount: number | undefined;
    items: VehicleExternalRefuelListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleExternalRefuelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleExternalRefuelListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleExternalRefuelListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleExternalRefuelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleExternalRefuelListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleExternalRefuelListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleExternalRefuelListDto {
    totalCount: number | undefined;
    items: VehicleExternalRefuelListDto[] | undefined;
}

export class VehicleExternalRefuelListDto implements IVehicleExternalRefuelListDto {
    /** 业务单位（必输） */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 加油时间（日期时间型，必输） */
    refuelTime: moment.Moment | undefined;
    /** 加油支数 */
    refuelCount: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 油品（必输）（货物中选择） */
    fuel: number | undefined;
    fuelText: string | undefined;
    /** 加油车辆编号（必输） */
    refuelVehicleCode: string | undefined;
    /** 司机（必输） */
    driver: string | undefined;
    /** 司机身份证号（必输） */
    driverIDNumber: string | undefined;
    /** 数据对接人 */
    dataAbutmentPerson: string | undefined;
    /** 审核状态（必输，使用统一的审核状态定义项目） */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditOperationTime: moment.Moment | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 第三方系统编号 */
    thirdPartySystemCode: string | undefined;
    /** 第三方车辆编号（包括车辆编号、加油卡号、其他卡号或编号） */
    thirdPartyVehicleCode: string | undefined;
    /** 来源（第三方数据表来源或第三方加油站名称，伊泰为手工、510、520等，中石化为加油站名称） */
    source: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 数据类型（手工创建、批量导入） */
    dataType: string | undefined;
    dataTypeText: string | undefined;
    /** 加油站（必输）（供应商中选择） */
    fillingStation: number | undefined;
    fillingStationText: string | undefined;
    /** 供应商付款方式（必输）（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    supplierPaymentMethod: string | undefined;
    supplierPaymentMethodText: string | undefined;
    /** 单车结算方式（必输）（抵扣运费、抵扣司机借款） */
    singleVehicleSettlementMethod: string | undefined;
    singleVehicleSettlementMethodText: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleExternalRefuelListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bussinessDepartment = data["bussinessDepartment"];
            this.bussinessDepartmentText = data["bussinessDepartmentText"];
            this.refuelTime = data["refuelTime"] ? moment(data["refuelTime"].toString()) : <any>undefined;
            this.refuelCount = data["refuelCount"];
            this.refuelLitres = data["refuelLitres"];
            this.refuelPrice = data["refuelPrice"];
            this.isTax = data["isTax"];
            this.taxRate = data["taxRate"];
            this.taxAmount = data["taxAmount"];
            this.noTaxAmount = data["noTaxAmount"];
            this.fuel = data["fuel"];
            this.fuelText = data["fuelText"];
            this.refuelVehicleCode = data["refuelVehicleCode"];
            this.driver = data["driver"];
            this.driverIDNumber = data["driverIDNumber"];
            this.dataAbutmentPerson = data["dataAbutmentPerson"];
            this.auditStatus = data["auditStatus"];
            this.auditStatusText = data["auditStatusText"];
            this.auditSpecification = data["auditSpecification"];
            this.auditOperator = data["auditOperator"];
            this.auditOperationTime = data["auditOperationTime"] ? moment(data["auditOperationTime"].toString()) : <any>undefined;
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.thirdPartySystemCode = data["thirdPartySystemCode"];
            this.thirdPartyVehicleCode = data["thirdPartyVehicleCode"];
            this.source = data["source"];
            this.remark = data["remark"];
            this.dataType = data["dataType"];
            this.dataTypeText = data["dataTypeText"];
            this.fillingStation = data["fillingStation"];
            this.fillingStationText = data["fillingStationText"];
            this.supplierPaymentMethod = data["supplierPaymentMethod"];
            this.supplierPaymentMethodText = data["supplierPaymentMethodText"];
            this.singleVehicleSettlementMethod = data["singleVehicleSettlementMethod"];
            this.singleVehicleSettlementMethodText = data["singleVehicleSettlementMethodText"];
            this.isHaveAttachment = data["isHaveAttachment"];
            this.lastModificationTime = data["lastModificationTime"] ? moment(data["lastModificationTime"].toString()) : <any>undefined;
            this.lastModifierUserId = data["lastModifierUserId"];
            this.creationTime = data["creationTime"] ? moment(data["creationTime"].toString()) : <any>undefined;
            this.creatorUserId = data["creatorUserId"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleExternalRefuelListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleExternalRefuelListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["bussinessDepartmentText"] = this.bussinessDepartmentText;
        data["refuelTime"] = this.refuelTime ? this.refuelTime.toISOString() : <any>undefined;
        data["refuelCount"] = this.refuelCount;
        data["refuelLitres"] = this.refuelLitres;
        data["refuelPrice"] = this.refuelPrice;
        data["isTax"] = this.isTax;
        data["taxRate"] = this.taxRate;
        data["taxAmount"] = this.taxAmount;
        data["noTaxAmount"] = this.noTaxAmount;
        data["fuel"] = this.fuel;
        data["fuelText"] = this.fuelText;
        data["refuelVehicleCode"] = this.refuelVehicleCode;
        data["driver"] = this.driver;
        data["driverIDNumber"] = this.driverIDNumber;
        data["dataAbutmentPerson"] = this.dataAbutmentPerson;
        data["auditStatus"] = this.auditStatus;
        data["auditStatusText"] = this.auditStatusText;
        data["auditSpecification"] = this.auditSpecification;
        data["auditOperator"] = this.auditOperator;
        data["auditOperationTime"] = this.auditOperationTime ? this.auditOperationTime.toISOString() : <any>undefined;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["thirdPartySystemCode"] = this.thirdPartySystemCode;
        data["thirdPartyVehicleCode"] = this.thirdPartyVehicleCode;
        data["source"] = this.source;
        data["remark"] = this.remark;
        data["dataType"] = this.dataType;
        data["dataTypeText"] = this.dataTypeText;
        data["fillingStation"] = this.fillingStation;
        data["fillingStationText"] = this.fillingStationText;
        data["supplierPaymentMethod"] = this.supplierPaymentMethod;
        data["supplierPaymentMethodText"] = this.supplierPaymentMethodText;
        data["singleVehicleSettlementMethod"] = this.singleVehicleSettlementMethod;
        data["singleVehicleSettlementMethodText"] = this.singleVehicleSettlementMethodText;
        data["isHaveAttachment"] = this.isHaveAttachment;
        data["lastModificationTime"] = this.lastModificationTime ? this.lastModificationTime.toISOString() : <any>undefined;
        data["lastModifierUserId"] = this.lastModifierUserId;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : <any>undefined;
        data["creatorUserId"] = this.creatorUserId;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleExternalRefuelListDto {
        const json = this.toJSON();
        let result = new VehicleExternalRefuelListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleExternalRefuelListDto {
    /** 业务单位（必输） */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 加油时间（日期时间型，必输） */
    refuelTime: moment.Moment | undefined;
    /** 加油支数 */
    refuelCount: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 油品（必输）（货物中选择） */
    fuel: number | undefined;
    fuelText: string | undefined;
    /** 加油车辆编号（必输） */
    refuelVehicleCode: string | undefined;
    /** 司机（必输） */
    driver: string | undefined;
    /** 司机身份证号（必输） */
    driverIDNumber: string | undefined;
    /** 数据对接人 */
    dataAbutmentPerson: string | undefined;
    /** 审核状态（必输，使用统一的审核状态定义项目） */
    auditStatus: string | undefined;
    auditStatusText: string | undefined;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditOperationTime: moment.Moment | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 第三方系统编号 */
    thirdPartySystemCode: string | undefined;
    /** 第三方车辆编号（包括车辆编号、加油卡号、其他卡号或编号） */
    thirdPartyVehicleCode: string | undefined;
    /** 来源（第三方数据表来源或第三方加油站名称，伊泰为手工、510、520等，中石化为加油站名称） */
    source: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 数据类型（手工创建、批量导入） */
    dataType: string | undefined;
    dataTypeText: string | undefined;
    /** 加油站（必输）（供应商中选择） */
    fillingStation: number | undefined;
    fillingStationText: string | undefined;
    /** 供应商付款方式（必输）（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    supplierPaymentMethod: string | undefined;
    supplierPaymentMethodText: string | undefined;
    /** 单车结算方式（必输）（抵扣运费、抵扣司机借款） */
    singleVehicleSettlementMethod: string | undefined;
    singleVehicleSettlementMethodText: string | undefined;
    isHaveAttachment: boolean | undefined;
    lastModificationTime: moment.Moment | undefined;
    lastModifierUserId: number | undefined;
    creationTime: moment.Moment | undefined;
    creatorUserId: number | undefined;
    id: string | undefined;
}

export class CreateOrUpdateVehicleExternalRefuelInput implements ICreateOrUpdateVehicleExternalRefuelInput {
    vehicleExternalRefuelCreateOrUpdate: VehicleExternalRefuelEditDto | undefined;

    constructor(data?: ICreateOrUpdateVehicleExternalRefuelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.vehicleExternalRefuelCreateOrUpdate = data["vehicleExternalRefuelCreateOrUpdate"] ? VehicleExternalRefuelEditDto.fromJS(data["vehicleExternalRefuelCreateOrUpdate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrUpdateVehicleExternalRefuelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrUpdateVehicleExternalRefuelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["vehicleExternalRefuelCreateOrUpdate"] = this.vehicleExternalRefuelCreateOrUpdate ? this.vehicleExternalRefuelCreateOrUpdate.toJSON() : <any>undefined;
        return data; 
    }

    clone(): CreateOrUpdateVehicleExternalRefuelInput {
        const json = this.toJSON();
        let result = new CreateOrUpdateVehicleExternalRefuelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateOrUpdateVehicleExternalRefuelInput {
    vehicleExternalRefuelCreateOrUpdate: VehicleExternalRefuelEditDto | undefined;
}

export class VehicleExternalRefuelEditDto implements IVehicleExternalRefuelEditDto {
    id: string | undefined;
    /** 业务单位（必输） */
    bussinessDepartment: number | undefined;
    /** 加油时间（日期时间型，必输） */
    refuelTime: moment.Moment | undefined;
    /** 加油支数 */
    refuelCount: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 油品（必输）（货物中选择） */
    fuel: number | undefined;
    /** 加油车辆编号（必输） */
    refuelVehicleCode: string;
    /** 司机（必输） */
    driver: string;
    /** 司机身份证号（必输） */
    driverIDNumber: string;
    /** 数据对接人 */
    dataAbutmentPerson: string | undefined;
    /** 审核状态（必输，使用统一的审核状态定义项目） */
    auditStatus: string;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditOperationTime: moment.Moment | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 第三方系统编号 */
    thirdPartySystemCode: string | undefined;
    /** 第三方车辆编号（包括车辆编号、加油卡号、其他卡号或编号） */
    thirdPartyVehicleCode: string | undefined;
    /** 来源（第三方数据表来源或第三方加油站名称，伊泰为手工、510、520等，中石化为加油站名称） */
    source: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 数据类型（手工创建、批量导入） */
    dataType: string | undefined;
    /** 加油站（必输）（供应商中选择） */
    fillingStation: number | undefined;
    /** 供应商付款方式（必输）（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    supplierPaymentMethod: string;
    /** 单车结算方式（必输）（抵扣运费、抵扣司机借款） */
    singleVehicleSettlementMethod: string;

    constructor(data?: IVehicleExternalRefuelEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.bussinessDepartment = data["bussinessDepartment"];
            this.refuelTime = data["refuelTime"] ? moment(data["refuelTime"].toString()) : <any>undefined;
            this.refuelCount = data["refuelCount"];
            this.refuelLitres = data["refuelLitres"];
            this.refuelPrice = data["refuelPrice"];
            this.isTax = data["isTax"];
            this.taxRate = data["taxRate"];
            this.taxAmount = data["taxAmount"];
            this.noTaxAmount = data["noTaxAmount"];
            this.fuel = data["fuel"];
            this.refuelVehicleCode = data["refuelVehicleCode"];
            this.driver = data["driver"];
            this.driverIDNumber = data["driverIDNumber"];
            this.dataAbutmentPerson = data["dataAbutmentPerson"];
            this.auditStatus = data["auditStatus"];
            this.auditSpecification = data["auditSpecification"];
            this.auditOperator = data["auditOperator"];
            this.auditOperationTime = data["auditOperationTime"] ? moment(data["auditOperationTime"].toString()) : <any>undefined;
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.thirdPartySystemCode = data["thirdPartySystemCode"];
            this.thirdPartyVehicleCode = data["thirdPartyVehicleCode"];
            this.source = data["source"];
            this.remark = data["remark"];
            this.dataType = data["dataType"];
            this.fillingStation = data["fillingStation"];
            this.supplierPaymentMethod = data["supplierPaymentMethod"];
            this.singleVehicleSettlementMethod = data["singleVehicleSettlementMethod"];
        }
    }

    static fromJS(data: any): VehicleExternalRefuelEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleExternalRefuelEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["refuelTime"] = this.refuelTime ? this.refuelTime.toISOString() : <any>undefined;
        data["refuelCount"] = this.refuelCount;
        data["refuelLitres"] = this.refuelLitres;
        data["refuelPrice"] = this.refuelPrice;
        data["isTax"] = this.isTax;
        data["taxRate"] = this.taxRate;
        data["taxAmount"] = this.taxAmount;
        data["noTaxAmount"] = this.noTaxAmount;
        data["fuel"] = this.fuel;
        data["refuelVehicleCode"] = this.refuelVehicleCode;
        data["driver"] = this.driver;
        data["driverIDNumber"] = this.driverIDNumber;
        data["dataAbutmentPerson"] = this.dataAbutmentPerson;
        data["auditStatus"] = this.auditStatus;
        data["auditSpecification"] = this.auditSpecification;
        data["auditOperator"] = this.auditOperator;
        data["auditOperationTime"] = this.auditOperationTime ? this.auditOperationTime.toISOString() : <any>undefined;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["thirdPartySystemCode"] = this.thirdPartySystemCode;
        data["thirdPartyVehicleCode"] = this.thirdPartyVehicleCode;
        data["source"] = this.source;
        data["remark"] = this.remark;
        data["dataType"] = this.dataType;
        data["fillingStation"] = this.fillingStation;
        data["supplierPaymentMethod"] = this.supplierPaymentMethod;
        data["singleVehicleSettlementMethod"] = this.singleVehicleSettlementMethod;
        return data; 
    }

    clone(): VehicleExternalRefuelEditDto {
        const json = this.toJSON();
        let result = new VehicleExternalRefuelEditDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleExternalRefuelEditDto {
    id: string | undefined;
    /** 业务单位（必输） */
    bussinessDepartment: number | undefined;
    /** 加油时间（日期时间型，必输） */
    refuelTime: moment.Moment | undefined;
    /** 加油支数 */
    refuelCount: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number | undefined;
    /** 含税金额 */
    taxAmount: number | undefined;
    /** 不含税金额（必输） */
    noTaxAmount: number | undefined;
    /** 油品（必输）（货物中选择） */
    fuel: number | undefined;
    /** 加油车辆编号（必输） */
    refuelVehicleCode: string;
    /** 司机（必输） */
    driver: string;
    /** 司机身份证号（必输） */
    driverIDNumber: string;
    /** 数据对接人 */
    dataAbutmentPerson: string | undefined;
    /** 审核状态（必输，使用统一的审核状态定义项目） */
    auditStatus: string;
    /** 审核说明 */
    auditSpecification: string | undefined;
    /** 审核操作人 */
    auditOperator: string | undefined;
    /** 审核操作时间 */
    auditOperationTime: moment.Moment | undefined;
    /** 记账日期 */
    accountDate: moment.Moment | undefined;
    /** 第三方系统编号 */
    thirdPartySystemCode: string | undefined;
    /** 第三方车辆编号（包括车辆编号、加油卡号、其他卡号或编号） */
    thirdPartyVehicleCode: string | undefined;
    /** 来源（第三方数据表来源或第三方加油站名称，伊泰为手工、510、520等，中石化为加油站名称） */
    source: string | undefined;
    /** 备注 */
    remark: string | undefined;
    /** 数据类型（手工创建、批量导入） */
    dataType: string | undefined;
    /** 加油站（必输）（供应商中选择） */
    fillingStation: number | undefined;
    /** 供应商付款方式（必输）（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    supplierPaymentMethod: string;
    /** 单车结算方式（必输）（抵扣运费、抵扣司机借款） */
    singleVehicleSettlementMethod: string;
}

export class VehicleExternalRefuelApprovalInput implements IVehicleExternalRefuelApprovalInput {
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditSpecification: string | undefined;

    constructor(data?: IVehicleExternalRefuelApprovalInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.idStr = data["idStr"];
            this.auditStatus = data["auditStatus"];
            this.auditSpecification = data["auditSpecification"];
        }
    }

    static fromJS(data: any): VehicleExternalRefuelApprovalInput {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleExternalRefuelApprovalInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["idStr"] = this.idStr;
        data["auditStatus"] = this.auditStatus;
        data["auditSpecification"] = this.auditSpecification;
        return data; 
    }

    clone(): VehicleExternalRefuelApprovalInput {
        const json = this.toJSON();
        let result = new VehicleExternalRefuelApprovalInput();
        result.init(json);
        return result;
    }
}

export interface IVehicleExternalRefuelApprovalInput {
    idStr: string | undefined;
    auditStatus: string | undefined;
    auditSpecification: string | undefined;
}

export class CreateVehicleExternalRefuelFromExcelInput implements ICreateVehicleExternalRefuelFromExcelInput {
    thirdPartyCode: string | undefined;
    /** 业务单位 */
    bussinessDepartment: number;
    /** 油品（必输）货物中选择 */
    fuel: number;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number;
    /** 数据对接人 */
    dataAbutmentPerson: string | undefined;
    /** 加油站（必输）从组织机构中选择 */
    fillingStation: number;
    /** 单车结算方式 */
    singleVehicleSettlementMethod: string;
    /** 供应商付款方式（必输）（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    supplierPaymentMethod: string;
    /** 记账日期 */
    accountDate: moment.Moment;
    fileContent: string | undefined;

    constructor(data?: ICreateVehicleExternalRefuelFromExcelInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.thirdPartyCode = data["thirdPartyCode"];
            this.bussinessDepartment = data["bussinessDepartment"];
            this.fuel = data["fuel"];
            this.isTax = data["isTax"];
            this.taxRate = data["taxRate"];
            this.dataAbutmentPerson = data["dataAbutmentPerson"];
            this.fillingStation = data["fillingStation"];
            this.singleVehicleSettlementMethod = data["singleVehicleSettlementMethod"];
            this.supplierPaymentMethod = data["supplierPaymentMethod"];
            this.accountDate = data["accountDate"] ? moment(data["accountDate"].toString()) : <any>undefined;
            this.fileContent = data["fileContent"];
        }
    }

    static fromJS(data: any): CreateVehicleExternalRefuelFromExcelInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateVehicleExternalRefuelFromExcelInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["thirdPartyCode"] = this.thirdPartyCode;
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["fuel"] = this.fuel;
        data["isTax"] = this.isTax;
        data["taxRate"] = this.taxRate;
        data["dataAbutmentPerson"] = this.dataAbutmentPerson;
        data["fillingStation"] = this.fillingStation;
        data["singleVehicleSettlementMethod"] = this.singleVehicleSettlementMethod;
        data["supplierPaymentMethod"] = this.supplierPaymentMethod;
        data["accountDate"] = this.accountDate ? this.accountDate.toISOString() : <any>undefined;
        data["fileContent"] = this.fileContent;
        return data; 
    }

    clone(): CreateVehicleExternalRefuelFromExcelInput {
        const json = this.toJSON();
        let result = new CreateVehicleExternalRefuelFromExcelInput();
        result.init(json);
        return result;
    }
}

export interface ICreateVehicleExternalRefuelFromExcelInput {
    thirdPartyCode: string | undefined;
    /** 业务单位 */
    bussinessDepartment: number;
    /** 油品（必输）货物中选择 */
    fuel: number;
    /** 是否含税价 */
    isTax: boolean | undefined;
    /** 税率（必输，无则为0） */
    taxRate: number;
    /** 数据对接人 */
    dataAbutmentPerson: string | undefined;
    /** 加油站（必输）从组织机构中选择 */
    fillingStation: number;
    /** 单车结算方式 */
    singleVehicleSettlementMethod: string;
    /** 供应商付款方式（必输）（数据字典维护，如现金支付、网银支付、微信支付、银行转账、充值卡） */
    supplierPaymentMethod: string;
    /** 记账日期 */
    accountDate: moment.Moment;
    fileContent: string | undefined;
}

export class PagedResultDtoOfVehicleRefuelListByMobileDto implements IPagedResultDtoOfVehicleRefuelListByMobileDto {
    totalCount: number | undefined;
    items: VehicleRefuelListByMobileDto[] | undefined;

    constructor(data?: IPagedResultDtoOfVehicleRefuelListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleRefuelListByMobileDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfVehicleRefuelListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfVehicleRefuelListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfVehicleRefuelListByMobileDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfVehicleRefuelListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfVehicleRefuelListByMobileDto {
    totalCount: number | undefined;
    items: VehicleRefuelListByMobileDto[] | undefined;
}

export class VehicleRefuelListByMobileDto implements IVehicleRefuelListByMobileDto {
    /** 加油时间 */
    refuelTime: moment.Moment | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 油品 */
    fuel: number | undefined;
    /** 油品名称 */
    fuelText: string | undefined;
    /** 加油车辆编号 */
    refuelVehicleCode: string | undefined;
    /** 加油站 */
    fillingStation: number | undefined;
    /** 加油站名称 */
    fillingStationText: string | undefined;
    flag: number | undefined;
    id: string | undefined;

    constructor(data?: IVehicleRefuelListByMobileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.refuelTime = data["refuelTime"] ? moment(data["refuelTime"].toString()) : <any>undefined;
            this.refuelLitres = data["refuelLitres"];
            this.fuel = data["fuel"];
            this.fuelText = data["fuelText"];
            this.refuelVehicleCode = data["refuelVehicleCode"];
            this.fillingStation = data["fillingStation"];
            this.fillingStationText = data["fillingStationText"];
            this.flag = data["flag"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): VehicleRefuelListByMobileDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleRefuelListByMobileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["refuelTime"] = this.refuelTime ? this.refuelTime.toISOString() : <any>undefined;
        data["refuelLitres"] = this.refuelLitres;
        data["fuel"] = this.fuel;
        data["fuelText"] = this.fuelText;
        data["refuelVehicleCode"] = this.refuelVehicleCode;
        data["fillingStation"] = this.fillingStation;
        data["fillingStationText"] = this.fillingStationText;
        data["flag"] = this.flag;
        data["id"] = this.id;
        return data; 
    }

    clone(): VehicleRefuelListByMobileDto {
        const json = this.toJSON();
        let result = new VehicleRefuelListByMobileDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleRefuelListByMobileDto {
    /** 加油时间 */
    refuelTime: moment.Moment | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 油品 */
    fuel: number | undefined;
    /** 油品名称 */
    fuelText: string | undefined;
    /** 加油车辆编号 */
    refuelVehicleCode: string | undefined;
    /** 加油站 */
    fillingStation: number | undefined;
    /** 加油站名称 */
    fillingStationText: string | undefined;
    flag: number | undefined;
    id: string | undefined;
}

export class ListResultDtoOfVehicleRefuelingByVehicleListDto implements IListResultDtoOfVehicleRefuelingByVehicleListDto {
    items: VehicleRefuelingByVehicleListDto[] | undefined;

    constructor(data?: IListResultDtoOfVehicleRefuelingByVehicleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleRefuelingByVehicleListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfVehicleRefuelingByVehicleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfVehicleRefuelingByVehicleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfVehicleRefuelingByVehicleListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfVehicleRefuelingByVehicleListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfVehicleRefuelingByVehicleListDto {
    items: VehicleRefuelingByVehicleListDto[] | undefined;
}

export class VehicleRefuelingByVehicleListDto implements IVehicleRefuelingByVehicleListDto {
    /** 业务单位 */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 加油站 */
    fillingStation: number | undefined;
    fillingStationText: string | undefined;
    /** 车辆编号 */
    refuelVehicleCode: string | undefined;
    /** 车牌号 */
    plateNumber: string | undefined;
    /** 加油支数 */
    refuelCount: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 加油时间开始 */
    refuelTimeFrom: moment.Moment | undefined;
    /** 加油时间结束 */
    refuelTimeTo: moment.Moment | undefined;

    constructor(data?: IVehicleRefuelingByVehicleListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bussinessDepartment = data["bussinessDepartment"];
            this.bussinessDepartmentText = data["bussinessDepartmentText"];
            this.fillingStation = data["fillingStation"];
            this.fillingStationText = data["fillingStationText"];
            this.refuelVehicleCode = data["refuelVehicleCode"];
            this.plateNumber = data["plateNumber"];
            this.refuelCount = data["refuelCount"];
            this.refuelLitres = data["refuelLitres"];
            this.refuelPrice = data["refuelPrice"];
            this.amount = data["amount"];
            this.refuelTimeFrom = data["refuelTimeFrom"] ? moment(data["refuelTimeFrom"].toString()) : <any>undefined;
            this.refuelTimeTo = data["refuelTimeTo"] ? moment(data["refuelTimeTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleRefuelingByVehicleListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleRefuelingByVehicleListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["bussinessDepartmentText"] = this.bussinessDepartmentText;
        data["fillingStation"] = this.fillingStation;
        data["fillingStationText"] = this.fillingStationText;
        data["refuelVehicleCode"] = this.refuelVehicleCode;
        data["plateNumber"] = this.plateNumber;
        data["refuelCount"] = this.refuelCount;
        data["refuelLitres"] = this.refuelLitres;
        data["refuelPrice"] = this.refuelPrice;
        data["amount"] = this.amount;
        data["refuelTimeFrom"] = this.refuelTimeFrom ? this.refuelTimeFrom.toISOString() : <any>undefined;
        data["refuelTimeTo"] = this.refuelTimeTo ? this.refuelTimeTo.toISOString() : <any>undefined;
        return data; 
    }

    clone(): VehicleRefuelingByVehicleListDto {
        const json = this.toJSON();
        let result = new VehicleRefuelingByVehicleListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleRefuelingByVehicleListDto {
    /** 业务单位 */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 加油站 */
    fillingStation: number | undefined;
    fillingStationText: string | undefined;
    /** 车辆编号 */
    refuelVehicleCode: string | undefined;
    /** 车牌号 */
    plateNumber: string | undefined;
    /** 加油支数 */
    refuelCount: number | undefined;
    /** 加油升数 */
    refuelLitres: number | undefined;
    /** 加油单价 */
    refuelPrice: number | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 加油时间开始 */
    refuelTimeFrom: moment.Moment | undefined;
    /** 加油时间结束 */
    refuelTimeTo: moment.Moment | undefined;
}

export class ListResultDtoOfVehicleRefuelingByFillingStationListDto implements IListResultDtoOfVehicleRefuelingByFillingStationListDto {
    items: VehicleRefuelingByFillingStationListDto[] | undefined;

    constructor(data?: IListResultDtoOfVehicleRefuelingByFillingStationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(VehicleRefuelingByFillingStationListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfVehicleRefuelingByFillingStationListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfVehicleRefuelingByFillingStationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfVehicleRefuelingByFillingStationListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfVehicleRefuelingByFillingStationListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfVehicleRefuelingByFillingStationListDto {
    items: VehicleRefuelingByFillingStationListDto[] | undefined;
}

export class VehicleRefuelingByFillingStationListDto implements IVehicleRefuelingByFillingStationListDto {
    /** 业务单位 */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 加油站 */
    fillingStation: number | undefined;
    fillingStationText: string | undefined;
    /** 车辆编号 */
    refuelVehicleCode: string | undefined;
    /** 车牌号 */
    plateNumber: string | undefined;
    /** 加油支数 */
    refuelCount: number | undefined;
    /** 加油升数（必输） */
    refuelLitres: number | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 加油时间开始 */
    refuelTimeFrom: moment.Moment | undefined;
    /** 加油时间结束 */
    refuelTimeTo: moment.Moment | undefined;

    constructor(data?: IVehicleRefuelingByFillingStationListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.bussinessDepartment = data["bussinessDepartment"];
            this.bussinessDepartmentText = data["bussinessDepartmentText"];
            this.fillingStation = data["fillingStation"];
            this.fillingStationText = data["fillingStationText"];
            this.refuelVehicleCode = data["refuelVehicleCode"];
            this.plateNumber = data["plateNumber"];
            this.refuelCount = data["refuelCount"];
            this.refuelLitres = data["refuelLitres"];
            this.amount = data["amount"];
            this.refuelTimeFrom = data["refuelTimeFrom"] ? moment(data["refuelTimeFrom"].toString()) : <any>undefined;
            this.refuelTimeTo = data["refuelTimeTo"] ? moment(data["refuelTimeTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): VehicleRefuelingByFillingStationListDto {
        data = typeof data === 'object' ? data : {};
        let result = new VehicleRefuelingByFillingStationListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bussinessDepartment"] = this.bussinessDepartment;
        data["bussinessDepartmentText"] = this.bussinessDepartmentText;
        data["fillingStation"] = this.fillingStation;
        data["fillingStationText"] = this.fillingStationText;
        data["refuelVehicleCode"] = this.refuelVehicleCode;
        data["plateNumber"] = this.plateNumber;
        data["refuelCount"] = this.refuelCount;
        data["refuelLitres"] = this.refuelLitres;
        data["amount"] = this.amount;
        data["refuelTimeFrom"] = this.refuelTimeFrom ? this.refuelTimeFrom.toISOString() : <any>undefined;
        data["refuelTimeTo"] = this.refuelTimeTo ? this.refuelTimeTo.toISOString() : <any>undefined;
        return data; 
    }

    clone(): VehicleRefuelingByFillingStationListDto {
        const json = this.toJSON();
        let result = new VehicleRefuelingByFillingStationListDto();
        result.init(json);
        return result;
    }
}

export interface IVehicleRefuelingByFillingStationListDto {
    /** 业务单位 */
    bussinessDepartment: number | undefined;
    bussinessDepartmentText: string | undefined;
    /** 加油站 */
    fillingStation: number | undefined;
    fillingStationText: string | undefined;
    /** 车辆编号 */
    refuelVehicleCode: string | undefined;
    /** 车牌号 */
    plateNumber: string | undefined;
    /** 加油支数 */
    refuelCount: number | undefined;
    /** 加油升数（必输） */
    refuelLitres: number | undefined;
    /** 金额 */
    amount: number | undefined;
    /** 加油时间开始 */
    refuelTimeFrom: moment.Moment | undefined;
    /** 加油时间结束 */
    refuelTimeTo: moment.Moment | undefined;
}

export class PagedResultDtoOfWarehouseOrderListDto implements IPagedResultDtoOfWarehouseOrderListDto {
    totalCount: number | undefined;
    items: WarehouseOrderListDto[] | undefined;

    constructor(data?: IPagedResultDtoOfWarehouseOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.totalCount = data["totalCount"];
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(WarehouseOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfWarehouseOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfWarehouseOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalCount"] = this.totalCount;
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): PagedResultDtoOfWarehouseOrderListDto {
        const json = this.toJSON();
        let result = new PagedResultDtoOfWarehouseOrderListDto();
        result.init(json);
        return result;
    }
}

export interface IPagedResultDtoOfWarehouseOrderListDto {
    totalCount: number | undefined;
    items: WarehouseOrderListDto[] | undefined;
}

export class ListResultDtoOfWarehouseOrderListDto implements IListResultDtoOfWarehouseOrderListDto {
    items: WarehouseOrderListDto[] | undefined;

    constructor(data?: IListResultDtoOfWarehouseOrderListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            if (data["items"] && data["items"].constructor === Array) {
                this.items = [] as any;
                for (let item of data["items"])
                    this.items.push(WarehouseOrderListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ListResultDtoOfWarehouseOrderListDto {
        data = typeof data === 'object' ? data : {};
        let result = new ListResultDtoOfWarehouseOrderListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.items && this.items.constructor === Array) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }

    clone(): ListResultDtoOfWarehouseOrderListDto {
        const json = this.toJSON();
        let result = new ListResultDtoOfWarehouseOrderListDto();
        result.init(json);
        return result;
    }
}

export interface IListResultDtoOfWarehouseOrderListDto {
    items: WarehouseOrderListDto[] | undefined;
}

export class GetWarehouseOrderForEditOutput implements IGetWarehouseOrderForEditOutput {
    warehouseOrder: WarehouseOrderEditDto | undefined;

    constructor(data?: IGetWarehouseOrderForEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.warehouseOrder = data["warehouseOrder"] ? WarehouseOrderEditDto.fromJS(data["warehouseOrder"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetWarehouseOrderForEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetWarehouseOrderForEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseOrder"] = this.warehouseOrder ? this.warehouseOrder.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetWarehouseOrderForEditOutput {
        const json = this.toJSON();
        let result = new GetWarehouseOrderForEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetWarehouseOrderForEditOutput {
    warehouseOrder: WarehouseOrderEditDto | undefined;
}

export class WarehouseOrderEditDto implements IWarehouseOrderEditDto {
    id: string | undefined;
    code: string;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    /** 仓库所属的业务单位 */
    businessOUId: number | undefined;
    supplierId: number | undefined;
    party: string | undefined;
    amount: number;
    /** 实际收金额 */
    actualAmount: number | undefined;
    type: WarehouseOrderEditDtoType | undefined;
    warehouseDate: moment.Moment;
    purchaseOrderId: string | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    details: WarehouseDetailEditDto[] | undefined;

    constructor(data?: IWarehouseOrderEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.organizationUnitId = data["organizationUnitId"];
            this.businessOUId = data["businessOUId"];
            this.supplierId = data["supplierId"];
            this.party = data["party"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.type = data["type"];
            this.warehouseDate = data["warehouseDate"] ? moment(data["warehouseDate"].toString()) : <any>undefined;
            this.purchaseOrderId = data["purchaseOrderId"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.paymentStatus = data["paymentStatus"];
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
            this.operatorId = data["operatorId"];
            if (data["details"] && data["details"].constructor === Array) {
                this.details = [] as any;
                for (let item of data["details"])
                    this.details.push(WarehouseDetailEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): WarehouseOrderEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseOrderEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessOUId"] = this.businessOUId;
        data["supplierId"] = this.supplierId;
        data["party"] = this.party;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["type"] = this.type;
        data["warehouseDate"] = this.warehouseDate ? this.warehouseDate.toISOString() : <any>undefined;
        data["purchaseOrderId"] = this.purchaseOrderId;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["paymentStatus"] = this.paymentStatus;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        if (this.details && this.details.constructor === Array) {
            data["details"] = [];
            for (let item of this.details)
                data["details"].push(item.toJSON());
        }
        return data; 
    }

    clone(): WarehouseOrderEditDto {
        const json = this.toJSON();
        let result = new WarehouseOrderEditDto();
        result.init(json);
        return result;
    }
}

export interface IWarehouseOrderEditDto {
    id: string | undefined;
    code: string;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    /** 仓库所属的业务单位 */
    businessOUId: number | undefined;
    supplierId: number | undefined;
    party: string | undefined;
    amount: number;
    /** 实际收金额 */
    actualAmount: number | undefined;
    type: WarehouseOrderEditDtoType | undefined;
    warehouseDate: moment.Moment;
    purchaseOrderId: string | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    details: WarehouseDetailEditDto[] | undefined;
}

export class WarehouseDetailEditDto implements IWarehouseDetailEditDto {
    id: string | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    categoryName: string | undefined;
    standardPrice: number | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    quantity: number | undefined;
    amount: number | undefined;
    description: string | undefined;
    materielId: number | undefined;

    constructor(data?: IWarehouseDetailEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.name = data["name"];
            this.specification = data["specification"];
            this.category = data["category"];
            this.categoryName = data["categoryName"];
            this.standardPrice = data["standardPrice"];
            this.baseMeasureUnit = data["baseMeasureUnit"];
            this.baseMeasureUnitName = data["baseMeasureUnitName"];
            this.quantity = data["quantity"];
            this.amount = data["amount"];
            this.description = data["description"];
            this.materielId = data["materielId"];
        }
    }

    static fromJS(data: any): WarehouseDetailEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseDetailEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["name"] = this.name;
        data["specification"] = this.specification;
        data["category"] = this.category;
        data["categoryName"] = this.categoryName;
        data["standardPrice"] = this.standardPrice;
        data["baseMeasureUnit"] = this.baseMeasureUnit;
        data["baseMeasureUnitName"] = this.baseMeasureUnitName;
        data["quantity"] = this.quantity;
        data["amount"] = this.amount;
        data["description"] = this.description;
        data["materielId"] = this.materielId;
        return data; 
    }

    clone(): WarehouseDetailEditDto {
        const json = this.toJSON();
        let result = new WarehouseDetailEditDto();
        result.init(json);
        return result;
    }
}

export interface IWarehouseDetailEditDto {
    id: string | undefined;
    code: string | undefined;
    name: string | undefined;
    specification: string | undefined;
    category: string | undefined;
    categoryName: string | undefined;
    standardPrice: number | undefined;
    baseMeasureUnit: string | undefined;
    baseMeasureUnitName: string | undefined;
    quantity: number | undefined;
    amount: number | undefined;
    description: string | undefined;
    materielId: number | undefined;
}

export class GetWarehouseOrderForAccountEditOutput implements IGetWarehouseOrderForAccountEditOutput {
    warehouseOrderAccount: WarehouseOrderAccountEditDto | undefined;

    constructor(data?: IGetWarehouseOrderForAccountEditOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.warehouseOrderAccount = data["warehouseOrderAccount"] ? WarehouseOrderAccountEditDto.fromJS(data["warehouseOrderAccount"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetWarehouseOrderForAccountEditOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetWarehouseOrderForAccountEditOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseOrderAccount"] = this.warehouseOrderAccount ? this.warehouseOrderAccount.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetWarehouseOrderForAccountEditOutput {
        const json = this.toJSON();
        let result = new GetWarehouseOrderForAccountEditOutput();
        result.init(json);
        return result;
    }
}

export interface IGetWarehouseOrderForAccountEditOutput {
    warehouseOrderAccount: WarehouseOrderAccountEditDto | undefined;
}

export class WarehouseOrderAccountEditDto implements IWarehouseOrderAccountEditDto {
    id: string | undefined;
    accountMethod: string;
    submitAccountState: string;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;

    constructor(data?: IWarehouseOrderAccountEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): WarehouseOrderAccountEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseOrderAccountEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        return data; 
    }

    clone(): WarehouseOrderAccountEditDto {
        const json = this.toJSON();
        let result = new WarehouseOrderAccountEditDto();
        result.init(json);
        return result;
    }
}

export interface IWarehouseOrderAccountEditDto {
    id: string | undefined;
    accountMethod: string;
    submitAccountState: string;
    amount: number | undefined;
    /** 实际收金额 */
    actualAmount: number | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
}

export class CreateWarehouseOrderInput implements ICreateWarehouseOrderInput {
    warehouseOrder: WarehouseOrderEditForSaveDto | undefined;
    warehouseOrderDetails: WarehouseDetailEditDto[] | undefined;

    constructor(data?: ICreateWarehouseOrderInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.warehouseOrder = data["warehouseOrder"] ? WarehouseOrderEditForSaveDto.fromJS(data["warehouseOrder"]) : <any>undefined;
            if (data["warehouseOrderDetails"] && data["warehouseOrderDetails"].constructor === Array) {
                this.warehouseOrderDetails = [] as any;
                for (let item of data["warehouseOrderDetails"])
                    this.warehouseOrderDetails.push(WarehouseDetailEditDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateWarehouseOrderInput {
        data = typeof data === 'object' ? data : {};
        let result = new CreateWarehouseOrderInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseOrder"] = this.warehouseOrder ? this.warehouseOrder.toJSON() : <any>undefined;
        if (this.warehouseOrderDetails && this.warehouseOrderDetails.constructor === Array) {
            data["warehouseOrderDetails"] = [];
            for (let item of this.warehouseOrderDetails)
                data["warehouseOrderDetails"].push(item.toJSON());
        }
        return data; 
    }

    clone(): CreateWarehouseOrderInput {
        const json = this.toJSON();
        let result = new CreateWarehouseOrderInput();
        result.init(json);
        return result;
    }
}

export interface ICreateWarehouseOrderInput {
    warehouseOrder: WarehouseOrderEditForSaveDto | undefined;
    warehouseOrderDetails: WarehouseDetailEditDto[] | undefined;
}

export class WarehouseOrderEditForSaveDto implements IWarehouseOrderEditForSaveDto {
    id: string | undefined;
    code: string;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    /** 仓库所属的业务单位 */
    businessOUId: number | undefined;
    supplierId: number | undefined;
    party: string | undefined;
    amount: number;
    /** 实际收金额 */
    actualAmount: number | undefined;
    warehouseDate: moment.Moment;
    type: WarehouseOrderEditForSaveDtoType | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    purchaseOrderId: string | undefined;

    constructor(data?: IWarehouseOrderEditForSaveDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"];
            this.code = data["code"];
            this.contactPerson = data["contactPerson"];
            this.contactMethod = data["contactMethod"];
            this.organizationUnitId = data["organizationUnitId"];
            this.businessOUId = data["businessOUId"];
            this.supplierId = data["supplierId"];
            this.party = data["party"];
            this.amount = data["amount"];
            this.actualAmount = data["actualAmount"];
            this.warehouseDate = data["warehouseDate"] ? moment(data["warehouseDate"].toString()) : <any>undefined;
            this.type = data["type"];
            this.accountMethod = data["accountMethod"];
            this.submitAccountState = data["submitAccountState"];
            this.paymentStatus = data["paymentStatus"];
            this.paymentDate = data["paymentDate"] ? moment(data["paymentDate"].toString()) : <any>undefined;
            this.operatorId = data["operatorId"];
            this.purchaseOrderId = data["purchaseOrderId"];
        }
    }

    static fromJS(data: any): WarehouseOrderEditForSaveDto {
        data = typeof data === 'object' ? data : {};
        let result = new WarehouseOrderEditForSaveDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["code"] = this.code;
        data["contactPerson"] = this.contactPerson;
        data["contactMethod"] = this.contactMethod;
        data["organizationUnitId"] = this.organizationUnitId;
        data["businessOUId"] = this.businessOUId;
        data["supplierId"] = this.supplierId;
        data["party"] = this.party;
        data["amount"] = this.amount;
        data["actualAmount"] = this.actualAmount;
        data["warehouseDate"] = this.warehouseDate ? this.warehouseDate.toISOString() : <any>undefined;
        data["type"] = this.type;
        data["accountMethod"] = this.accountMethod;
        data["submitAccountState"] = this.submitAccountState;
        data["paymentStatus"] = this.paymentStatus;
        data["paymentDate"] = this.paymentDate ? this.paymentDate.toISOString() : <any>undefined;
        data["operatorId"] = this.operatorId;
        data["purchaseOrderId"] = this.purchaseOrderId;
        return data; 
    }

    clone(): WarehouseOrderEditForSaveDto {
        const json = this.toJSON();
        let result = new WarehouseOrderEditForSaveDto();
        result.init(json);
        return result;
    }
}

export interface IWarehouseOrderEditForSaveDto {
    id: string | undefined;
    code: string;
    contactPerson: string | undefined;
    contactMethod: string | undefined;
    organizationUnitId: number | undefined;
    /** 仓库所属的业务单位 */
    businessOUId: number | undefined;
    supplierId: number | undefined;
    party: string | undefined;
    amount: number;
    /** 实际收金额 */
    actualAmount: number | undefined;
    warehouseDate: moment.Moment;
    type: WarehouseOrderEditForSaveDtoType | undefined;
    accountMethod: string | undefined;
    submitAccountState: string | undefined;
    paymentStatus: string | undefined;
    /** 付款日期 */
    paymentDate: moment.Moment | undefined;
    /** 经办人 */
    operatorId: number | undefined;
    purchaseOrderId: string | undefined;
}

export class UpdateWarehouseOrderAccountInput implements IUpdateWarehouseOrderAccountInput {
    warehouseOrderAccount: WarehouseOrderAccountEditDto | undefined;

    constructor(data?: IUpdateWarehouseOrderAccountInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.warehouseOrderAccount = data["warehouseOrderAccount"] ? WarehouseOrderAccountEditDto.fromJS(data["warehouseOrderAccount"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateWarehouseOrderAccountInput {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateWarehouseOrderAccountInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["warehouseOrderAccount"] = this.warehouseOrderAccount ? this.warehouseOrderAccount.toJSON() : <any>undefined;
        return data; 
    }

    clone(): UpdateWarehouseOrderAccountInput {
        const json = this.toJSON();
        let result = new UpdateWarehouseOrderAccountInput();
        result.init(json);
        return result;
    }
}

export interface IUpdateWarehouseOrderAccountInput {
    warehouseOrderAccount: WarehouseOrderAccountEditDto | undefined;
}

export class GetLoginTokenOutput implements IGetLoginTokenOutput {
    token: string | undefined;
    nickName: string | undefined;
    headImgUrl: string | undefined;
    linkedAccountInfo: { [key: string] : GetLoginTokenOutputLinkedAccountInfo; } | undefined;
    availableTenants: AvailableTenantDto[] | undefined;
    authResult: WeChatAuthenticateResultModel | undefined;

    constructor(data?: IGetLoginTokenOutput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.token = data["token"];
            this.nickName = data["nickName"];
            this.headImgUrl = data["headImgUrl"];
            if (data["linkedAccountInfo"]) {
                this.linkedAccountInfo = {} as any;
                for (let key in data["linkedAccountInfo"]) {
                    if (data["linkedAccountInfo"].hasOwnProperty(key))
                        this.linkedAccountInfo[key] = data["linkedAccountInfo"][key] ? GetLoginTokenOutputLinkedAccountInfo.fromJS(data["linkedAccountInfo"][key]) : new GetLoginTokenOutputLinkedAccountInfo();
                }
            }
            if (data["availableTenants"] && data["availableTenants"].constructor === Array) {
                this.availableTenants = [] as any;
                for (let item of data["availableTenants"])
                    this.availableTenants.push(AvailableTenantDto.fromJS(item));
            }
            this.authResult = data["authResult"] ? WeChatAuthenticateResultModel.fromJS(data["authResult"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetLoginTokenOutput {
        data = typeof data === 'object' ? data : {};
        let result = new GetLoginTokenOutput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["nickName"] = this.nickName;
        data["headImgUrl"] = this.headImgUrl;
        if (this.linkedAccountInfo) {
            data["linkedAccountInfo"] = {};
            for (let key in this.linkedAccountInfo) {
                if (this.linkedAccountInfo.hasOwnProperty(key))
                    data["linkedAccountInfo"][key] = this.linkedAccountInfo[key] ? this.linkedAccountInfo[key].toJSON() : <any>undefined;
            }
        }
        if (this.availableTenants && this.availableTenants.constructor === Array) {
            data["availableTenants"] = [];
            for (let item of this.availableTenants)
                data["availableTenants"].push(item.toJSON());
        }
        data["authResult"] = this.authResult ? this.authResult.toJSON() : <any>undefined;
        return data; 
    }

    clone(): GetLoginTokenOutput {
        const json = this.toJSON();
        let result = new GetLoginTokenOutput();
        result.init(json);
        return result;
    }
}

export interface IGetLoginTokenOutput {
    token: string | undefined;
    nickName: string | undefined;
    headImgUrl: string | undefined;
    linkedAccountInfo: { [key: string] : GetLoginTokenOutputLinkedAccountInfo; } | undefined;
    availableTenants: AvailableTenantDto[] | undefined;
    authResult: WeChatAuthenticateResultModel | undefined;
}

export class GetLoginTokenOutputLinkedAccountInfo implements IGetLoginTokenOutputLinkedAccountInfo {
    userName: string | undefined;
    fullName: string | undefined;
    tenancyName: string | undefined;
    tenantName: string | undefined;

    constructor(data?: IGetLoginTokenOutputLinkedAccountInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.fullName = data["fullName"];
            this.tenancyName = data["tenancyName"];
            this.tenantName = data["tenantName"];
        }
    }

    static fromJS(data: any): GetLoginTokenOutputLinkedAccountInfo {
        data = typeof data === 'object' ? data : {};
        let result = new GetLoginTokenOutputLinkedAccountInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["fullName"] = this.fullName;
        data["tenancyName"] = this.tenancyName;
        data["tenantName"] = this.tenantName;
        return data; 
    }

    clone(): GetLoginTokenOutputLinkedAccountInfo {
        const json = this.toJSON();
        let result = new GetLoginTokenOutputLinkedAccountInfo();
        result.init(json);
        return result;
    }
}

export interface IGetLoginTokenOutputLinkedAccountInfo {
    userName: string | undefined;
    fullName: string | undefined;
    tenancyName: string | undefined;
    tenantName: string | undefined;
}

export class AvailableTenantDto implements IAvailableTenantDto {
    tenancyName: string | undefined;
    name: string | undefined;
    id: number | undefined;

    constructor(data?: IAvailableTenantDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.tenancyName = data["tenancyName"];
            this.name = data["name"];
            this.id = data["id"];
        }
    }

    static fromJS(data: any): AvailableTenantDto {
        data = typeof data === 'object' ? data : {};
        let result = new AvailableTenantDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tenancyName"] = this.tenancyName;
        data["name"] = this.name;
        data["id"] = this.id;
        return data; 
    }

    clone(): AvailableTenantDto {
        const json = this.toJSON();
        let result = new AvailableTenantDto();
        result.init(json);
        return result;
    }
}

export interface IAvailableTenantDto {
    tenancyName: string | undefined;
    name: string | undefined;
    id: number | undefined;
}

export class WeChatAuthenticateResultModel implements IWeChatAuthenticateResultModel {
    redirectURL: string | undefined;
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number | undefined;
    userId: number | undefined;

    constructor(data?: IWeChatAuthenticateResultModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.redirectURL = data["redirectURL"];
            this.accessToken = data["accessToken"];
            this.encryptedAccessToken = data["encryptedAccessToken"];
            this.expireInSeconds = data["expireInSeconds"];
            this.userId = data["userId"];
        }
    }

    static fromJS(data: any): WeChatAuthenticateResultModel {
        data = typeof data === 'object' ? data : {};
        let result = new WeChatAuthenticateResultModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["redirectURL"] = this.redirectURL;
        data["accessToken"] = this.accessToken;
        data["encryptedAccessToken"] = this.encryptedAccessToken;
        data["expireInSeconds"] = this.expireInSeconds;
        data["userId"] = this.userId;
        return data; 
    }

    clone(): WeChatAuthenticateResultModel {
        const json = this.toJSON();
        let result = new WeChatAuthenticateResultModel();
        result.init(json);
        return result;
    }
}

export interface IWeChatAuthenticateResultModel {
    redirectURL: string | undefined;
    accessToken: string | undefined;
    encryptedAccessToken: string | undefined;
    expireInSeconds: number | undefined;
    userId: number | undefined;
}

export class WeChatAuthenticateInput implements IWeChatAuthenticateInput {
    accountToken: string | undefined;
    loginToken: string | undefined;

    constructor(data?: IWeChatAuthenticateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.accountToken = data["accountToken"];
            this.loginToken = data["loginToken"];
        }
    }

    static fromJS(data: any): WeChatAuthenticateInput {
        data = typeof data === 'object' ? data : {};
        let result = new WeChatAuthenticateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accountToken"] = this.accountToken;
        data["loginToken"] = this.loginToken;
        return data; 
    }

    clone(): WeChatAuthenticateInput {
        const json = this.toJSON();
        let result = new WeChatAuthenticateInput();
        result.init(json);
        return result;
    }
}

export interface IWeChatAuthenticateInput {
    accountToken: string | undefined;
    loginToken: string | undefined;
}

export class WeChatBindAuthenticateInput implements IWeChatBindAuthenticateInput {
    userName: string | undefined;
    password: string | undefined;
    tenancyName: string | undefined;
    loginToken: string | undefined;

    constructor(data?: IWeChatBindAuthenticateInput) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.userName = data["userName"];
            this.password = data["password"];
            this.tenancyName = data["tenancyName"];
            this.loginToken = data["loginToken"];
        }
    }

    static fromJS(data: any): WeChatBindAuthenticateInput {
        data = typeof data === 'object' ? data : {};
        let result = new WeChatBindAuthenticateInput();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["tenancyName"] = this.tenancyName;
        data["loginToken"] = this.loginToken;
        return data; 
    }

    clone(): WeChatBindAuthenticateInput {
        const json = this.toJSON();
        let result = new WeChatBindAuthenticateInput();
        result.init(json);
        return result;
    }
}

export interface IWeChatBindAuthenticateInput {
    userName: string | undefined;
    password: string | undefined;
    tenancyName: string | undefined;
    loginToken: string | undefined;
}

/** 提货单来源（mes,系统自建） */
export enum Source {
    系统自建 = <any>"系统自建", 
    伊泰MES同步 = <any>"伊泰MES同步", 
}

/** 提货单状态 */
export enum DeliveryOrderState {
    未完成 = <any>"未完成", 
    生成装车凭证 = <any>"生成装车凭证", 
    生成卸车凭证 = <any>"生成卸车凭证", 
    生成入库凭证 = <any>"生成入库凭证", 
    作废 = <any>"作废", 
    锁定 = <any>"锁定", 
}

export enum AcceptOrderQueueListDtoQueueState {
    排队中 = <any>"排队中", 
    已派车 = <any>"已派车", 
    已取消 = <any>"已取消", 
    队列失效 = <any>"队列失效", 
}

export enum AcceptOrderQueueListDtoQueueSource {
    司机移动端 = <any>"司机移动端", 
    物流公司代排 = <any>"物流公司代排", 
}

export enum AcceptOrderQueueListForManagerDtoQueueState {
    排队中 = <any>"排队中", 
    已派车 = <any>"已派车", 
    已取消 = <any>"已取消", 
    队列失效 = <any>"队列失效", 
}

export enum VehicleQueueAndOrderStatusListDtoAutoAcceptOrderState {
    开启 = <any>"开启", 
    关闭 = <any>"关闭", 
}

export enum IsTenantAvailableOutputState {
    Available = <any>"available", 
    InActive = <any>"inActive", 
    NotFound = <any>"notFound", 
}

export enum EntireUploadInputType {
    图片 = <any>"图片", 
    文件 = <any>"文件", 
}

export enum AttachmentListDtoType {
    图片 = <any>"图片", 
    文件 = <any>"文件", 
}

export enum AutoAcceptOrderStateEditDtoState {
    开启 = <any>"开启", 
    关闭 = <any>"关闭", 
}

export enum BMOrganizationUnitListDtoOrganizationType {
    公司 = <any>"公司", 
    职能部室 = <any>"职能部室", 
    业务部门 = <any>"业务部门", 
    业务班组 = <any>"业务班组", 
}

export enum BMOrganizationUnitEditDtoOrganizationType {
    公司 = <any>"公司", 
    职能部室 = <any>"职能部室", 
    业务部门 = <any>"业务部门", 
    业务班组 = <any>"业务班组", 
}

export enum BMOUFunctionalEditDtoFunctional {
    采购职能 = <any>"采购职能", 
    销售职能 = <any>"销售职能", 
    库存职能 = <any>"库存职能", 
    其他职能 = <any>"其他职能", 
}

export enum BmouFunctionals {
    采购职能 = <any>"采购职能", 
    销售职能 = <any>"销售职能", 
    库存职能 = <any>"库存职能", 
    其他职能 = <any>"其他职能", 
}

export enum BMOrganizationUnitCreateInputDtoOrganizationType {
    公司 = <any>"公司", 
    职能部室 = <any>"职能部室", 
    业务部门 = <any>"业务部门", 
    业务班组 = <any>"业务班组", 
}

export enum BmouFunctionals2 {
    采购职能 = <any>"采购职能", 
    销售职能 = <any>"销售职能", 
    库存职能 = <any>"库存职能", 
    其他职能 = <any>"其他职能", 
}

export enum BMOrganizationUnitEditInputDtoOrganizationType {
    公司 = <any>"公司", 
    职能部室 = <any>"职能部室", 
    业务部门 = <any>"业务部门", 
    业务班组 = <any>"业务班组", 
}

export enum CapitalFlowBillListDtoUploadStarus {
    未上报 = <any>"未上报", 
    上报成功 = <any>"上报成功", 
    上报失败 = <any>"上报失败", 
}

export enum CapitalFlowBillLogListDtoUploadStarus {
    未上报 = <any>"未上报", 
    上报成功 = <any>"上报成功", 
    上报失败 = <any>"上报失败", 
}

export enum DailySourcePlanRecordListDtoPlanType {
    自建计划 = <any>"自建计划", 
    MES同步订单 = <any>"mES同步订单", 
}

export enum DailySourcePlanRecordListByMobileDtoPlanType {
    自建计划 = <any>"自建计划", 
    MES同步订单 = <any>"mES同步订单", 
}

export enum DailySourcePlanRecordEditDtoPlanType {
    自建计划 = <any>"自建计划", 
    MES同步订单 = <any>"mES同步订单", 
}

export enum DataRuleListDtoPermissionObjectType {
    组织机构 = <any>"组织机构", 
    区域 = <any>"区域", 
    其他 = <any>"其他", 
}

export enum DataRuleEditDtoPermissionObjectType {
    组织机构 = <any>"组织机构", 
    区域 = <any>"区域", 
    其他 = <any>"其他", 
}

export enum DataFilterListDtoRelationOperator {
    等于 = <any>"等于", 
    不等于 = <any>"不等于", 
    包含于 = <any>"包含于", 
    小于 = <any>"小于", 
    小于等于 = <any>"小于等于", 
    大于 = <any>"大于", 
    大于等于 = <any>"大于等于", 
}

export enum DataFilterListDtoLogicOperator {
    并且 = <any>"并且", 
    或者 = <any>"或者", 
}

export enum DataFilterEditDtoRelationOperator {
    等于 = <any>"等于", 
    不等于 = <any>"不等于", 
    包含于 = <any>"包含于", 
    小于 = <any>"小于", 
    小于等于 = <any>"小于等于", 
    大于 = <any>"大于", 
    大于等于 = <any>"大于等于", 
}

export enum DataFilterEditDtoLogicOperator {
    并且 = <any>"并且", 
    或者 = <any>"或者", 
}

export enum DeliveryOrderRecordListDtoSource {
    系统自建 = <any>"系统自建", 
    伊泰MES同步 = <any>"伊泰MES同步", 
}

export enum DeliveryOrderRecordListDtoDeliveryOrderState {
    未完成 = <any>"未完成", 
    生成装车凭证 = <any>"生成装车凭证", 
    生成卸车凭证 = <any>"生成卸车凭证", 
    生成入库凭证 = <any>"生成入库凭证", 
    作废 = <any>"作废", 
    锁定 = <any>"锁定", 
}

export enum NowDeliveryOrderRecordListByMobileDtoDeliveryOrderState {
    未完成 = <any>"未完成", 
    生成装车凭证 = <any>"生成装车凭证", 
    生成卸车凭证 = <any>"生成卸车凭证", 
    生成入库凭证 = <any>"生成入库凭证", 
    作废 = <any>"作废", 
    锁定 = <any>"锁定", 
}

export enum DeliveryOrderRecordListByMobileDtoDeliveryOrderState {
    未完成 = <any>"未完成", 
    生成装车凭证 = <any>"生成装车凭证", 
    生成卸车凭证 = <any>"生成卸车凭证", 
    生成入库凭证 = <any>"生成入库凭证", 
    作废 = <any>"作废", 
    锁定 = <any>"锁定", 
}

export enum GetElectronicWayBillInputUploadStarus {
    未上报 = <any>"未上报", 
    上报成功 = <any>"上报成功", 
    上报失败 = <any>"上报失败", 
}

export enum GetElectronicWayBillInputCheckStatus {
    未审核 = <any>"未审核", 
    审核通过 = <any>"审核通过", 
    驳回 = <any>"驳回", 
}

export enum ElectronicWayBillListDtoUploadStarus {
    未上报 = <any>"未上报", 
    上报成功 = <any>"上报成功", 
    上报失败 = <any>"上报失败", 
}

export enum ElectronicWayBillListDtoCheckStatus {
    未审核 = <any>"未审核", 
    审核通过 = <any>"审核通过", 
    驳回 = <any>"驳回", 
}

export enum ElectronicWayBillEditDtoUploadStarus {
    未上报 = <any>"未上报", 
    上报成功 = <any>"上报成功", 
    上报失败 = <any>"上报失败", 
}

export enum ElectronicWayBillEditDtoCheckStatus {
    未审核 = <any>"未审核", 
    审核通过 = <any>"审核通过", 
    驳回 = <any>"驳回", 
}

export enum ElectronicWayBillLogDetailDtoUploadStarus {
    未上报 = <any>"未上报", 
    上报成功 = <any>"上报成功", 
    上报失败 = <any>"上报失败", 
}

export enum ElectronicWayBillLogDetailDtoCheckStatus {
    未审核 = <any>"未审核", 
    审核通过 = <any>"审核通过", 
    驳回 = <any>"驳回", 
}

export enum InspectionVehicleDriverArchiveListDtoUploadStarus {
    未上报 = <any>"未上报", 
    上报成功 = <any>"上报成功", 
    上报失败 = <any>"上报失败", 
}

export enum InspectionVehicleDriverArchiveListDtoCheckStatus {
    未审核 = <any>"未审核", 
    审核通过 = <any>"审核通过", 
    驳回 = <any>"驳回", 
}

export enum DriverArchiveToAuditSendDtoCheckStatus {
    未审核 = <any>"未审核", 
    审核通过 = <any>"审核通过", 
    驳回 = <any>"驳回", 
}

export enum InStockListDtoCurrentStockType {
    正常库存 = <any>"正常库存", 
    寄售库存 = <any>"寄售库存", 
    冻结库存 = <any>"冻结库存", 
    赠送库存 = <any>"赠送库存", 
    其他库存 = <any>"其他库存", 
}

export enum InStockEditDtoCurrentStockType {
    正常库存 = <any>"正常库存", 
    寄售库存 = <any>"寄售库存", 
    冻结库存 = <any>"冻结库存", 
    赠送库存 = <any>"赠送库存", 
    其他库存 = <any>"其他库存", 
}

export enum InStockSaveEditDtoCurrentStockType {
    正常库存 = <any>"正常库存", 
    寄售库存 = <any>"寄售库存", 
    冻结库存 = <any>"冻结库存", 
    赠送库存 = <any>"赠送库存", 
    其他库存 = <any>"其他库存", 
}

export enum MaintenanceFeeAllotListDtoMaintenanceSubmitAccountType {
    入库材料上账 = <any>"入库材料上账", 
    维修材料上账 = <any>"维修材料上账", 
    内领材料上账 = <any>"内领材料上账", 
    销售材料上账 = <any>"销售材料上账", 
    退库材料上账 = <any>"退库材料上账", 
    维修记录上账 = <any>"维修记录上账", 
    其他上账 = <any>"其他上账", 
}

export enum MaintenanceFeeAllotEditDtoMaintenanceSubmitAccountType {
    入库材料上账 = <any>"入库材料上账", 
    维修材料上账 = <any>"维修材料上账", 
    内领材料上账 = <any>"内领材料上账", 
    销售材料上账 = <any>"销售材料上账", 
    退库材料上账 = <any>"退库材料上账", 
    维修记录上账 = <any>"维修记录上账", 
    其他上账 = <any>"其他上账", 
}

export enum MaintenanceFeeAllotEditForSaveDtoMaintenanceSubmitAccountType {
    入库材料上账 = <any>"入库材料上账", 
    维修材料上账 = <any>"维修材料上账", 
    内领材料上账 = <any>"内领材料上账", 
    销售材料上账 = <any>"销售材料上账", 
    退库材料上账 = <any>"退库材料上账", 
    维修记录上账 = <any>"维修记录上账", 
    其他上账 = <any>"其他上账", 
}

export enum OutboundOrderListDtoType {
    维修出库 = <any>"维修出库", 
    内部领用 = <any>"内部领用", 
    销售出库 = <any>"销售出库", 
    退货出库 = <any>"退货出库", 
    其他出库 = <any>"其他出库", 
}

export enum WarehouseOrderListDtoWarehouseEntryStatus {
    未完成入库 = <any>"未完成入库", 
    已完成入库 = <any>"已完成入库", 
}

export enum WarehouseOrderListDtoType {
    采购 = <any>"采购", 
    临时 = <any>"临时", 
    冻结 = <any>"冻结", 
    赠送 = <any>"赠送", 
    寄售 = <any>"寄售", 
    其他 = <any>"其他", 
}

export enum UserNotificationState {
    Unread = <any>"unread", 
    Read = <any>"read", 
}

export enum TenantNotificationSeverity {
    Info = <any>"info", 
    Success = <any>"success", 
    Warn = <any>"warn", 
    Error = <any>"error", 
    Fatal = <any>"fatal", 
}

export enum GetNotificationListDtoState {
    Unread = <any>"unread", 
    Read = <any>"read", 
}

export enum OutboundOrderEditDtoType {
    维修出库 = <any>"维修出库", 
    内部领用 = <any>"内部领用", 
    销售出库 = <any>"销售出库", 
    退货出库 = <any>"退货出库", 
    其他出库 = <any>"其他出库", 
}

export enum OutboundOrderEditForSaveDtoType {
    维修出库 = <any>"维修出库", 
    内部领用 = <any>"内部领用", 
    销售出库 = <any>"销售出库", 
    退货出库 = <any>"退货出库", 
    其他出库 = <any>"其他出库", 
}

export enum PermissionObjectListDtoType {
    组织机构 = <any>"组织机构", 
    区域 = <any>"区域", 
    其他 = <any>"其他", 
}

export enum PermissionObjectEditDtoType {
    组织机构 = <any>"组织机构", 
    区域 = <any>"区域", 
    其他 = <any>"其他", 
}

export enum PurchaseOrderListDtoWarehouseEntryStatus {
    未完成入库 = <any>"未完成入库", 
    已完成入库 = <any>"已完成入库", 
}

export enum PurchaseOrderEditDtoWarehouseEntryStatus {
    未完成入库 = <any>"未完成入库", 
    已完成入库 = <any>"已完成入库", 
}

export enum PurchaseOrderEditForSaveDtoWarehouseEntryStatus {
    未完成入库 = <any>"未完成入库", 
    已完成入库 = <any>"已完成入库", 
}

export enum TransportDataValidScopeSettingListDtoDataType {
    单车毛重范围 = <any>"单车毛重范围", 
    单车皮重范围 = <any>"单车皮重范围", 
    单车净重范围 = <any>"单车净重范围", 
    运价范围 = <any>"运价范围", 
    加油升数范围 = <any>"加油升数范围", 
    维修金额范围 = <any>"维修金额范围", 
    扣款煤价范围 = <any>"扣款煤价范围", 
    无车承运运费上传比例 = <any>"无车承运运费上传比例", 
    平均过路费费率 = <any>"平均过路费费率", 
    平均油耗率 = <any>"平均油耗率", 
}

export enum TransportDataValidScopeSettingEditDtoDataType {
    单车毛重范围 = <any>"单车毛重范围", 
    单车皮重范围 = <any>"单车皮重范围", 
    单车净重范围 = <any>"单车净重范围", 
    运价范围 = <any>"运价范围", 
    加油升数范围 = <any>"加油升数范围", 
    维修金额范围 = <any>"维修金额范围", 
    扣款煤价范围 = <any>"扣款煤价范围", 
    无车承运运费上传比例 = <any>"无车承运运费上传比例", 
    平均过路费费率 = <any>"平均过路费费率", 
    平均油耗率 = <any>"平均油耗率", 
}

export enum TransportMeteringListDtoDataType {
    手工创建 = <any>"手工创建", 
    批量导入 = <any>"批量导入", 
    第三方同步 = <any>"第三方同步", 
}

export enum TransportMeteringEditDtoDataType {
    手工创建 = <any>"手工创建", 
    批量导入 = <any>"批量导入", 
    第三方同步 = <any>"第三方同步", 
}

export enum TransportSendGoodsListDtoDataType {
    手工创建 = <any>"手工创建", 
    批量导入 = <any>"批量导入", 
    第三方同步 = <any>"第三方同步", 
}

export enum TransportSendGoodsListEditDtoDataType {
    手工创建 = <any>"手工创建", 
    批量导入 = <any>"批量导入", 
    第三方同步 = <any>"第三方同步", 
}

export enum VehicleFreightReportSubmitAccountEditDtoSubmitAccountState {
    未上账 = <any>"未上账", 
    取消上账 = <any>"取消上账", 
    已上账 = <any>"已上账", 
}

export enum TransportSingleVehicleFreightSubItemCostListDtoExpenseType {
    日摊费用 = <any>"日摊费用", 
    过路费 = <any>"过路费", 
    特殊费用 = <any>"特殊费用", 
}

export enum TransportSingleVehicleRoadCostListDtoDataType {
    手工创建 = <any>"手工创建", 
    批量导入 = <any>"批量导入", 
    第三方同步 = <any>"第三方同步", 
}

export enum TransportSingleVehicleRoadCostEditDtoDataType {
    手工创建 = <any>"手工创建", 
    批量导入 = <any>"批量导入", 
    第三方同步 = <any>"第三方同步", 
}

export enum UserInfoByMobileDtoOrganizationType {
    公司 = <any>"公司", 
    职能部室 = <any>"职能部室", 
    业务部门 = <any>"业务部门", 
    业务班组 = <any>"业务班组", 
}

export enum VehicleArchivesListDtoVehicleStateFlag {
    正常 = <any>"正常", 
    警告 = <any>"警告", 
    异常 = <any>"异常", 
}

export enum VehicleArchivesStatusWarnListDtoVehicleStateFlag {
    正常 = <any>"正常", 
    警告 = <any>"警告", 
    异常 = <any>"异常", 
}

export enum VehicleBusinessStateListDtoBusinessType {
    车务类 = <any>"车务类", 
    日常类 = <any>"日常类", 
    保险类 = <any>"保险类", 
    档案类 = <any>"档案类", 
}

export enum VehicleBusinessStateListDtoVehicleStateFlag {
    正常 = <any>"正常", 
    警告 = <any>"警告", 
    异常 = <any>"异常", 
}

export enum VehicleDriverArchiveListDtoVehicleStateFlag {
    正常 = <any>"正常", 
    警告 = <any>"警告", 
    异常 = <any>"异常", 
}

export enum VehicleDriverArchiveStatusDtoVehicleStateFlag {
    正常 = <any>"正常", 
    警告 = <any>"警告", 
    异常 = <any>"异常", 
}

export enum VehicleDriverBusinessStateListDtoBusinessType {
    车务类 = <any>"车务类", 
    日常类 = <any>"日常类", 
    保险类 = <any>"保险类", 
    档案类 = <any>"档案类", 
}

export enum VehicleDriverBusinessStateListDtoVehicleStateFlag {
    正常 = <any>"正常", 
    警告 = <any>"警告", 
    异常 = <any>"异常", 
}

export enum VehicleDriverArchiveBalanceListDtoCarryDownState {
    未结转 = <any>"未结转", 
    取消结转 = <any>"取消结转", 
    已结转 = <any>"已结转", 
}

export enum VehicleDriverArchiveBalanceListDtoAccountPeriodState {
    打开 = <any>"打开", 
    关闭 = <any>"关闭", 
}

export enum VehicleDriverArchiveDeductionListDtoDeductionType {
    抵扣 = <any>"抵扣", 
    冲销 = <any>"冲销", 
}

export enum VehicleDriverArchiveDeductionListDtoApproveState {
    未审核 = <any>"未审核", 
    审核驳回 = <any>"审核驳回", 
    审核通过 = <any>"审核通过", 
}

export enum VehicleDriverArchiveDeductionEditDtoDeductionType {
    抵扣 = <any>"抵扣", 
    冲销 = <any>"冲销", 
}

export enum VehicleDriverArchiveDeductionEditDtoApproveState {
    未审核 = <any>"未审核", 
    审核驳回 = <any>"审核驳回", 
    审核通过 = <any>"审核通过", 
}

export enum VehicleDriverArchiveDeductionApproveDtoApproveState {
    未审核 = <any>"未审核", 
    审核驳回 = <any>"审核驳回", 
    审核通过 = <any>"审核通过", 
}

export enum VehicleDriverArchiveLoanListDtoLoanType {
    借款 = <any>"借款", 
    冲销 = <any>"冲销", 
}

export enum VehicleDriverArchiveLoanListDtoApproveState {
    未审核 = <any>"未审核", 
    审核驳回 = <any>"审核驳回", 
    审核通过 = <any>"审核通过", 
}

export enum VehicleDriverArchiveLoanEditDtoLoanType {
    借款 = <any>"借款", 
    冲销 = <any>"冲销", 
}

export enum VehicleDriverArchiveLoanEditDtoApproveState {
    未审核 = <any>"未审核", 
    审核驳回 = <any>"审核驳回", 
    审核通过 = <any>"审核通过", 
}

export enum VehicleDriverArchiveLoanApproveDtoApproveState {
    未审核 = <any>"未审核", 
    审核驳回 = <any>"审核驳回", 
    审核通过 = <any>"审核通过", 
}

export enum WarehouseOrderEditDtoType {
    采购 = <any>"采购", 
    临时 = <any>"临时", 
    冻结 = <any>"冻结", 
    赠送 = <any>"赠送", 
    寄售 = <any>"寄售", 
    其他 = <any>"其他", 
}

export enum WarehouseOrderEditForSaveDtoType {
    采购 = <any>"采购", 
    临时 = <any>"临时", 
    冻结 = <any>"冻结", 
    赠送 = <any>"赠送", 
    寄售 = <any>"寄售", 
    其他 = <any>"其他", 
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = event => { 
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob); 
        }
    });
}